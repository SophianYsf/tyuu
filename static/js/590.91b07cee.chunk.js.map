{"version":3,"file":"static/js/590.91b07cee.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenloginAdapterOptions[\"adapterSettings\"];\n\n  private loginSettings: LoginSettings = { loginProvider: \"\" };\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions = {}) {\n    super(params);\n    this.setAdapterSettings({\n      ...params.adapterSettings,\n      chainConfig: params.chainConfig,\n      clientId: params.clientId || \"\",\n      sessionTime: params.sessionTime,\n      web3AuthNetwork: params.web3AuthNetwork,\n      useCoreKitKey: params.useCoreKitKey,\n    });\n    this.loginSettings = params.loginSettings || { loginProvider: \"\" };\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.openloginOptions) throw WalletInitializationError.invalidParams(\"openloginOptions is required before openlogin's initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT || this.openloginOptions.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin({\n      ...this.openloginOptions,\n      clientId: this.clientId,\n      network: this.openloginOptions.network || this.web3AuthNetwork || OPENLOGIN_NETWORK.MAINNET,\n    });\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n\n      const finalPrivKey = this._getFinalPrivKey();\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      } else if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: Partial<OpenLoginOptions & BaseAdapterSettings>): void {\n    super.setAdapterSettings(adapterSettings);\n    const defaultOptions = getOpenloginDefaultOptions();\n    log.info(\"setting adapter settings\", adapterSettings);\n    this.openloginOptions = {\n      ...defaultOptions.adapterSettings,\n      ...this.openloginOptions,\n      ...adapterSettings,\n    };\n    if (adapterSettings.web3AuthNetwork) {\n      this.openloginOptions.network = adapterSettings.web3AuthNetwork;\n    }\n    if (adapterSettings.useCoreKitKey !== undefined) {\n      this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;\n    }\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    this.privKeyProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.privKeyProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private _getFinalPrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.privKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey) {\n      // this is to check if the user has already logged in but coreKitKey is not available.\n      // when useCoreKitKey is set to true.\n      // This is to ensure that when there is no user session active, we don't throw an exception.\n      if (this.openloginInstance.privKey && !this.openloginInstance.coreKitKey) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.openloginInstance.coreKitKey;\n    }\n    return finalPrivKey;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    const keyAvailable = this._getFinalPrivKey();\n    // if not logged in then login\n    if (!keyAvailable || params.extraLoginOptions?.id_token) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      if (!params.loginProvider && !this.loginSettings.loginProvider)\n        throw WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n      await this.openloginInstance.login(\n        merge(this.loginSettings, params, {\n          extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint },\n        })\n      );\n    }\n    let finalPrivKey = this._getFinalPrivKey();\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n        this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n      } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n        const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n        this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n      } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n        this.privKeyProvider = new CommonPrivateKeyProvider();\n      } else {\n        throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","adapterSettings","network","OPENLOGIN_NETWORK","MAINNET","clientId","uxMode","UX_MODE","POPUP","loginSettings","OpenloginAdapter","_BaseAdapter","_inherits","_super","_createSuper","_this","_classCallCheck","params","arguments","length","undefined","call","_defineProperty","_assertThisInitialized","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","loginProvider","setAdapterSettings","_objectSpread","chainConfig","sessionTime","web3AuthNetwork","useCoreKitKey","_createClass","key","get","this","_this$privKeyProvider","privKeyProvider","provider","set","_","Error","value","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","isRedirectResult","redirectResult","wrap","_context","prev","next","_get","_getPrototypeOf","prototype","WalletInitializationError","invalidParams","openloginOptions","REDIRECT","SESSIONLESS_REDIRECT","getHashQueryParams","Object","keys","_pid","replaceUrlOnRedirect","openloginInstance","OpenLogin","log","debug","init","status","READY","emit","ADAPTER_EVENTS","_getFinalPrivKey","autoConnect","rehydrated","connect","t0","error","stop","_x","apply","_connect","_callee2","_args2","_context2","CONNECTING","adapter","connectWithProvider","abrupt","ERRORED","message","includes","WalletLoginError","popupClosed","Web3AuthError","connectionError","_disconnect","_callee3","_args3","_context3","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","_authenticateUser","_callee4","userInfo","_context4","getUserInfo","sent","idToken","_getUserInfo","_callee5","_context5","defaultOptions","info","_addChain","_callee6","_this$privKeyProvider2","_args6","_context6","addChain","addChainConfig","_x2","_switchChain","_callee7","_this$privKeyProvider3","_args7","_context7","switchChain","getChainConfig","chainId","_x3","_this$openloginOption","finalPrivKey","privKey","coreKitKey","coreKitKeyNotFound","_connectWithProvider","_callee8","_params$extraLoginOpt","_params$extraLoginOpt2","_yield$import","getED25519Key","_yield$import2","SolanaPrivateKeyProvider","_yield$import3","EthereumPrivateKeyProvider","_args8","_context8","extraLoginOptions","id_token","curve","currentChainNamespace","SOLANA","SUPPORTED_KEY_CURVES","ED25519","SECP256K1","login","merge","login_hint","sk","toString","config","OTHER","CommonPrivateKeyProvider","concat","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}
{"version":3,"file":"static/js/703.fef5e8e6.chunk.js","mappings":";0GAoIaA,EAAAC,EAAAA,OAAAA,QAAAC,EAAAD,EAAAA,OAAAA,QAAAE,EAAAF,EAAAA,MAAAA,QAAAG,EAAAH,EAAAA,OAAAA,QAAAI,EAAAJ,EAAAA,OAAAA,QAAAK,EAAAL,EAAAA,OAAAA,QAAAM,EAAAN,EAAAA,OAAAA,QAAAO,EAAAP,EAAAA,OAAAA,mEAEb,IAAAQ,EAAAR,EAAA,OAYA,SAAgBS,EAAgBC,GAC9B,KAAMA,aAAaC,YACjB,MAAM,IAAIC,UAAU,yBAExB,CAKA,SAAgBC,EAAmBH,GAEjC,OADAD,EAAgBC,GACTF,EAAAM,OAAOC,KAAKL,EAAEM,OAAQN,EAAEO,WAAYP,EAAEQ,OAC/C,CAEA,IAgBsBC,EAAM,WAK1B,SAAAA,EAAYC,EAAcC,GACxB,GADyCf,EAAA,KAAAa,IACpCG,OAAOC,UAAUH,GACpB,MAAM,IAAIR,UAAU,2BAYtB,KAAKQ,KAAOA,EAUZ,KAAKC,SAAWA,CAClB,CA+HC,OA7HDd,EAAAY,EAAA,EAAAK,IAAA,wBAAAC,MAeA,WACE,MAAO,EACT,GAwCA,CAAAD,IAAA,UAAAC,MAgBA,SAAQf,EAAgBgB,GACtB,GAAI,EAAI,KAAKN,KACX,MAAM,IAAIO,WAAW,sBAEvB,OAAO,KAAKP,IACd,GAEA,CAAAI,IAAA,YAAAC,MAgBA,SAAUJ,GACR,IAAMO,EAAKC,OAAOC,OAAO,KAAKC,YAAYC,WAG1C,OAFAH,OAAOI,OAAOL,EAAI,MAClBA,EAAGP,SAAWA,EACPO,CACT,GAEA,CAAAJ,IAAA,YAAAC,MAoBA,SAAUS,GAEV,KAACf,CAAA,CA7JyB,GAqK5B,SAAgBgB,EAAiBC,EAAcC,GAC7C,OAAIA,EAAGhB,SACEe,EAAO,IAAMC,EAAGhB,SAAW,IAE7Be,CACT,CA6DA,IAqBsBE,EAAe,SAAAC,GAAAnC,EAAAkC,EAAAC,GAAA,IAAAC,EAAAnC,EAAAiC,GAAA,SAAAA,IAAA,OAAAhC,EAAA,KAAAgC,GAAAE,EAAAC,MAAA,KAAAC,UAAA,CAclC,OAdkCnC,EAAA+B,EAAA,EAAAd,IAAA,UAAAC,MAYnC,WACE,MAAM,IAAIkB,MAAM,6BAClB,KAACL,CAAA,CAdkC,CAAQnB,GAiB7C,IAeayB,EAAY,SAAAC,GAAAzC,EAAAwC,EAAAC,GAAA,IAAAC,EAAAzC,EAAAuC,GAGvB,SAAAA,IAA8C,IAAAG,EAAlCC,EAAWN,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAGrB,EAAiBqB,UAAAxB,OAAA,EAAAwB,UAAA,QAAAO,EAC5C,GAD4C3C,EAAA,KAAAsC,IACtCtB,OAAOC,UAAUyB,IAAkB,GAAKA,EAC5C,MAAM,IAAIpC,UAAU,4CAOS,OAL/BmC,EAAAD,EAAAI,KAAA,MAAO,EAAG7B,IAKL2B,YAAcA,EAAYD,CACjC,CAiBC,OAfDxC,EAAAqC,EAAA,EAAApB,IAAA,UAAAC,MACA,WACE,OAAO,CACT,GAEA,CAAAD,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7BjC,EAAgBC,GAChB,IAAMyC,EAAMzC,EAAEQ,OAASQ,EACvB,OAAO0B,KAAKC,MAAMF,EAAM,KAAKH,YAC/B,GAEA,CAAAxB,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,EAAegB,GACjC,OAAO,CACT,KAACkB,CAAA,CA9BsB,CAAQN,GAiCjC,IAoBaiB,EAAa,SAAAC,GAAApD,EAAAmD,EAAAC,GAAA,IAAAC,EAAApD,EAAAkD,GAGxB,SAAAA,EAAYG,GAAqD,IAAAC,EAA7BjC,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAGrB,EAAiBqB,UAAAxB,OAAA,EAAAwB,UAAA,QAAAO,EAC/D,GAD+D3C,EAAA,KAAAiD,KACzDG,aAAkBvC,GACtB,MAAM,IAAIP,UAAU,2BAGtB,IAAKU,OAAOC,UAAUG,GACpB,MAAM,IAAId,UAAU,uCAcD,OAXrB+C,EAAAF,EAAAP,KAAA,KAAMQ,EAAOtC,KAAMC,GAAYqC,EAAOrC,WAGjCqC,OAASA,EAQdC,EAAKjC,OAASA,EAAOiC,CACvB,CAgBC,OAdDpD,EAAAgD,EAAA,EAAA/B,IAAA,UAAAC,MACA,WACE,OAAS,KAAKiC,kBAAkBE,GACpB,KAAKF,kBAAkBG,CACrC,GAEA,CAAArC,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO,KAAKgB,OAAOI,OAAOpD,EAAGgB,EAAS,KAAKA,OAC7C,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC1C,OAAO,KAAKgB,OAAOK,OAAOT,EAAK5C,EAAGgB,EAAS,KAAKA,OAClD,KAAC6B,CAAA,CAxCuB,CAAQjB,GA2ClC,IAgBasB,EAAK,SAAAI,GAAA5D,EAAAwD,EAAAI,GAAA,IAAAC,EAAA5D,EAAAuD,GAChB,SAAAA,EAAYxC,EAAcC,GAAiB,IAAA6C,EAEzC,GAFyC5D,EAAA,KAAAsD,GAErC,GADJM,EAAAD,EAAAf,KAAA,KAAM9B,EAAMC,IACCD,KACX,MAAM,IAAIO,WAAW,gCACtB,OAAAuC,CACH,CAWC,OATD3D,EAAAqD,EAAA,EAAApC,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAGyD,WAAWzC,EAAQ,KAAKN,KACvD,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAG0D,YAAYd,EAAK5B,EAAQ,KAAKN,MAC7C,KAAKA,IACd,KAACwC,CAAA,CAjBe,CAAQzC,GAoB1B,IAgBa0C,EAAO,SAAAQ,GAAAjE,EAAAyD,EAAAQ,GAAA,IAAAC,EAAAjE,EAAAwD,GAClB,SAAAA,EAAYzC,EAAcC,GAAiB,IAAAkD,EAEzC,GAFyCjE,EAAA,KAAAuD,GAErC,GADJU,EAAAD,EAAApB,KAAA,KAAM9B,EAAMC,IACCD,KACX,MAAM,IAAIO,WAAW,gCACtB,OAAA4C,CACH,CAWC,OATDhE,EAAAsD,EAAA,EAAArC,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAG8D,WAAW9C,EAAQ,KAAKN,KACvD,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAG+D,YAAYnB,EAAK5B,EAAQ,KAAKN,MAC7C,KAAKA,IACd,KAACyC,CAAA,CAjBiB,CAAQ1C,GAoB5B,IAgBauD,EAAI,SAAAC,GAAAvE,EAAAsE,EAAAC,GAAA,IAAAC,EAAAvE,EAAAqE,GACf,SAAAA,EAAYtD,EAAcC,GAAiB,IAAAwD,EAEzC,GAFyCvE,EAAA,KAAAoE,GAErC,GADJG,EAAAD,EAAA1B,KAAA,KAAM9B,EAAMC,IACCD,KACX,MAAM,IAAIO,WAAW,gCACtB,OAAAkD,CACH,CAWC,OATDtE,EAAAmE,EAAA,EAAAlD,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAGoE,UAAUpD,EAAQ,KAAKN,KACtD,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAGqE,WAAWzB,EAAK5B,EAAQ,KAAKN,MAC5C,KAAKA,IACd,KAACsD,CAAA,CAjBc,CAAQvD,GAoBzB,IAgBa6D,EAAM,SAAAC,GAAA7E,EAAA4E,EAAAC,GAAA,IAAAC,EAAA7E,EAAA2E,GACjB,SAAAA,EAAY5D,EAAcC,GAAiB,IAAA8D,EAEzC,GAFyC7E,EAAA,KAAA0E,GAErC,GADJG,EAAAD,EAAAhC,KAAA,KAAM9B,EAAMC,IACCD,KACX,MAAM,IAAIO,WAAW,gCACtB,OAAAwD,CACH,CAWC,OATD5E,EAAAyE,EAAA,EAAAxD,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAG0E,UAAU1D,EAAQ,KAAKN,KACtD,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAG2E,WAAW/B,EAAK5B,EAAQ,KAAKN,MAC5C,KAAKA,IACd,KAAC4D,CAAA,CAjBgB,CAAQ7D,GAoB3B,IAAMmE,EAAQlC,KAAKmC,IAAI,EAAG,IAI1B,SAASC,EAAYlC,GACnB,IAAMmC,EAAOrC,KAAKC,MAAMC,EAAMgC,GAE9B,MAAO,CAACG,KAAAA,EAAMC,KADDpC,EAAOmC,EAAOH,EAE7B,CAEA,SAASK,EAAaF,EAAcC,GAClC,OAAOD,EAAOH,EAAQI,CACxB,CAEA,IAWaE,EAAW,SAAAC,GAAAzF,EAAAwF,EAAAC,GAAA,IAAAC,EAAAzF,EAAAuF,GACtB,SAAAA,EAAYvE,GAAiB,OAAAf,EAAA,KAAAsF,GAAAE,EAAA5C,KAAA,KACrB,EAAG7B,EACX,CAiBC,OAfDd,EAAAqF,EAAA,EAAApE,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvB1B,EAASH,EAAmBH,GAC5BgF,EAAO1E,EAAO+E,aAAarE,GAEjC,OAAOiE,EADM3E,EAAO+E,aAAarE,EAAS,GAChBgE,EAC5B,GAEA,CAAAlE,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACpCsD,EAAQR,EAAYlC,GACpBtC,EAASH,EAAmBH,GAGlC,OAFAM,EAAOiF,cAAcD,EAAMN,KAAMhE,GACjCV,EAAOiF,cAAcD,EAAMP,KAAM/D,EAAS,GACnC,CACT,KAACkE,CAAA,CApBqB,CAAQzE,GAuBhC,IAWa+E,EAAa,SAAAC,GAAA/F,EAAA8F,EAAAC,GAAA,IAAAC,EAAA/F,EAAA6F,GACxB,SAAAA,EAAY7E,GAAiB,OAAAf,EAAA,KAAA4F,GAAAE,EAAAlD,KAAA,KACrB,EAAG7B,EACX,CAiBC,OAfDd,EAAA2F,EAAA,EAAA1E,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvB1B,EAASH,EAAmBH,GAGlC,OAAOiF,EAFM3E,EAAOqF,aAAa3E,GACpBV,EAAOqF,aAAa3E,EAAS,GAE5C,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACpCsD,EAAQR,EAAYlC,GACpBtC,EAASH,EAAmBH,GAGlC,OAFAM,EAAOsF,cAAcN,EAAMP,KAAM/D,GACjCV,EAAOsF,cAAcN,EAAMN,KAAMhE,EAAS,GACnC,CACT,KAACwE,CAAA,CApBuB,CAAQ/E,GAuBlC,IAWaoF,EAAU,SAAAC,GAAApG,EAAAmG,EAAAC,GAAA,IAAAC,EAAApG,EAAAkG,GACrB,SAAAA,EAAYlF,GAAiB,OAAAf,EAAA,KAAAiG,GAAAE,EAAAvD,KAAA,KACrB,EAAG7B,EACX,CAiBC,OAfDd,EAAAgG,EAAA,EAAA/E,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvB1B,EAASH,EAAmBH,GAC5BgF,EAAO1E,EAAO+E,aAAarE,GAEjC,OAAOiE,EADM3E,EAAO0F,YAAYhF,EAAS,GACfgE,EAC5B,GAEA,CAAAlE,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACpCsD,EAAQR,EAAYlC,GACpBtC,EAASH,EAAmBH,GAGlC,OAFAM,EAAOiF,cAAcD,EAAMN,KAAMhE,GACjCV,EAAO2F,aAAaX,EAAMP,KAAM/D,EAAS,GAClC,CACT,KAAC6E,CAAA,CApBoB,CAAQpF,GAuB/B,IAWayF,EAAY,SAAAC,GAAAzG,EAAAwG,EAAAC,GAAA,IAAAC,EAAAzG,EAAAuG,GACvB,SAAAA,EAAYvF,GAAiB,OAAAf,EAAA,KAAAsG,GAAAE,EAAA5D,KAAA,KACrB,EAAG7B,EACX,CAiBC,OAfDd,EAAAqG,EAAA,EAAApF,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvB1B,EAASH,EAAmBH,GAGlC,OAAOiF,EAFM3E,EAAO+F,YAAYrF,GACnBV,EAAOqF,aAAa3E,EAAS,GAE5C,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACpCsD,EAAQR,EAAYlC,GACpBtC,EAASH,EAAmBH,GAGlC,OAFAM,EAAOgG,aAAahB,EAAMP,KAAM/D,GAChCV,EAAOsF,cAAcN,EAAMN,KAAMhE,EAAS,GACnC,CACT,KAACkF,CAAA,CApBsB,CAAQzF,GAuBjC,IAUa8F,EAAM,SAAAC,GAAA9G,EAAA6G,EAAAC,GAAA,IAAAC,EAAA9G,EAAA4G,GACjB,SAAAA,EAAY5F,GAAiB,OAAAf,EAAA,KAAA2G,GAAAE,EAAAjE,KAAA,KACrB,EAAG7B,EACX,CAWC,OATDd,EAAA0G,EAAA,EAAAzF,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAG0G,YAAY1F,EAC3C,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAG2G,aAAa/D,EAAK5B,GACjC,CACT,KAACuF,CAAA,CAdgB,CAAQ9F,GAiB3B,IAUamG,EAAQ,SAAAC,GAAAnH,EAAAkH,EAAAC,GAAA,IAAAC,EAAAnH,EAAAiH,GACnB,SAAAA,EAAYjG,GAAiB,OAAAf,EAAA,KAAAgH,GAAAE,EAAAtE,KAAA,KACrB,EAAG7B,EACX,CAWC,OATDd,EAAA+G,EAAA,EAAA9F,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAG+G,YAAY/F,EAC3C,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAGgH,aAAapE,EAAK5B,GACjC,CACT,KAAC4F,CAAA,CAdkB,CAAQnG,GAiB7B,IAUawG,EAAO,SAAAC,GAAAxH,EAAAuH,EAAAC,GAAA,IAAAC,EAAAxH,EAAAsH,GAClB,SAAAA,EAAYtG,GAAiB,OAAAf,EAAA,KAAAqH,GAAAE,EAAA3E,KAAA,KACrB,EAAG7B,EACX,CAWC,OATDd,EAAAoH,EAAA,EAAAnG,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAGoH,aAAapG,EAC5C,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAGqH,cAAczE,EAAK5B,GAClC,CACT,KAACiG,CAAA,CAdiB,CAAQxG,GAiB5B,IAUa6G,EAAS,SAAAC,GAAA7H,EAAA4H,EAAAC,GAAA,IAAAC,EAAA7H,EAAA2H,GACpB,SAAAA,EAAY3G,GAAiB,OAAAf,EAAA,KAAA0H,GAAAE,EAAAhF,KAAA,KACrB,EAAG7B,EACX,CAWC,OATDd,EAAAyH,EAAA,EAAAxG,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7B,OAAO7B,EAAmBH,GAAGyH,aAAazG,EAC5C,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE1C,OADA7B,EAAmBH,GAAG0H,cAAc9E,EAAK5B,GAClC,CACT,KAACsG,CAAA,CAdmB,CAAQ7G,GAiB9B,IAiBakH,EAAY,SAAAC,GAAAlI,EAAAiI,EAAAC,GAAA,IAAAC,EAAAlI,EAAAgI,GAIvB,SAAAA,EAAYG,EAA0BC,EAAgCpH,GAAiB,IAAAqH,EACrF,GADqFpI,EAAA,KAAA+H,KAC/EG,aAAyBrH,GAC7B,MAAM,IAAIP,UAAU,kCAEtB,KAAQ6H,aAAiBnG,GAAmBmG,EAAME,WACxCrH,OAAOC,UAAUkH,IAAW,GAAKA,GACzC,MAAM,IAAI7H,UAAU,4EAGtB,IAAIQ,GAAQ,EAgBO,QAfZqH,aAAiBnG,IAChB,EAAIkG,EAAcpH,OACxBA,EAAOqH,EAAQD,EAAcpH,OAG/BsH,EAAAH,EAAArF,KAAA,KAAM9B,EAAMC,IAGPmH,cAAgBA,EAOrBE,EAAKD,MAAQA,EAAMC,CACrB,CA2DC,OAzDDnI,EAAA8H,EAAA,EAAA7G,IAAA,UAAAC,MACA,SAAQf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKtB,KACZ,OAAO,KAAKA,KAEd,IAAIA,EAAO,EACPqH,EAAQ,KAAKA,MAIjB,GAHIA,aAAiBnG,IACnBmG,EAAQA,EAAM3E,OAAOpD,EAAGgB,IAEtB,EAAI,KAAK8G,cAAcpH,KACzBA,EAAOqH,EAAQ,KAAKD,cAAcpH,UAGlC,IADA,IAAIwH,EAAM,EACHA,EAAMH,GACXrH,GAAQ,KAAKoH,cAAcK,QAAQnI,EAAGgB,EAASN,KAC7CwH,EAGN,OAAOxH,CACT,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvBd,EAAU,GACZkH,EAAI,EACJL,EAAQ,KAAKA,MAIjB,IAHIA,aAAiBnG,IACnBmG,EAAQA,EAAM3E,OAAOpD,EAAGgB,IAEnBoH,EAAIL,GACT7G,EAAGmH,KAAK,KAAKP,cAAc1E,OAAOpD,EAAGgB,IACrCA,GAAU,KAAK8G,cAAcK,QAAQnI,EAAGgB,GACxCoH,GAAK,EAEP,OAAOlH,CACT,GAEA,CAAAJ,IAAA,SAAAC,MAUA,SAAO6B,EAAU5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACjCsG,EAAM,KAAKR,cACXpH,EAAekC,EAAI2F,QAAO,SAAC7H,EAAM8H,GACrC,OAAO9H,EAAO4H,EAAIjF,OAAOmF,EAAGxI,EAAGgB,EAASN,EAC1C,GAAG,GAIH,OAHI,KAAKqH,iBAAiBnG,GACxB,KAAKmG,MAAM1E,OAAOT,EAAIpC,OAAQR,EAAGgB,GAE5BN,CACT,KAACiH,CAAA,CAzFsB,CAAQlH,GA4FjC,IAgCagI,EAAa,SAAAC,GAAAhJ,EAAA+I,EAAAC,GAAA,IAAAC,EAAAhJ,EAAA8I,GAIxB,SAAAA,EAAYG,EAA8BjI,EAAmBkI,GAAwB,IAAAC,EACnF,GADmFlJ,EAAA,KAAA6I,IAC7EM,MAAMC,QAAQJ,KACXA,EAAOL,QAAO,SAACU,EAAKT,GAAC,OAAKS,GAAQT,aAAa/H,CAAO,IAAE,GAC/D,MAAM,IAAIP,UAAU,4CAEjB,mBAAqBS,QAClB4B,IAAcsG,IACpBA,EAAiBlI,EACjBA,OAAW4B,GAGb,IACuB2G,EADvBC,EAAA1J,EACiBmJ,GAAM,IAAvB,IAAAO,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAAyB,KAAdC,EAAEL,EAAAnI,MACX,GAAK,EAAIwI,EAAG7I,WACJ6B,IAAcgH,EAAG5I,SACvB,MAAM,IAAIsB,MAAM,wDAEnB,OAAAuH,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CAED,IAAIhJ,GAAQ,EACZ,IACEA,EAAOkI,EAAOL,QAAO,SAAC7H,EAAM6I,GAAE,OAAK7I,EAAO6I,EAAGpB,SAAS,GAAE,GACxD,MAAOsB,GACP,CAyBqC,OAvBvCX,EAAAH,EAAAnG,KAAA,KAAM9B,EAAMC,IAYPiI,OAASA,EAWdE,EAAKD,iBAAmBA,EAAeC,CACzC,CAiIC,OA/HDjJ,EAAA4I,EAAA,EAAA3H,IAAA,UAAAC,MACA,SAAQf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKtB,KACZ,OAAO,KAAKA,KAEd,IAAIA,EAAO,EACX,IACEA,EAAO,KAAKkI,OAAOL,QAAO,SAAC7H,EAAM6I,GAC/B,IAAMI,EAAMJ,EAAGpB,QAAQnI,EAAGgB,GAE1B,OADAA,GAAU2I,EACHjJ,EAAOiJ,CAChB,GAAG,GACH,MAAOF,GACP,MAAM,IAAIxI,WAAW,sBAEvB,OAAOP,CACT,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC7BjC,EAAgBC,GAChB,IAC4B4J,EADtBC,EAAO,KAAKC,wBAA6BC,EAAAtK,EAC9B,KAAKmJ,QAAM,IAA5B,IAAAmB,EAAAX,MAAAQ,EAAAG,EAAAV,KAAAC,MAA8B,KAAnBC,EAAEK,EAAA7I,MAKX,QAJIwB,IAAcgH,EAAG5I,WACnBkJ,EAAKN,EAAG5I,UAAuB4I,EAAGnG,OAAOpD,EAAGgB,IAE9CA,GAAUuI,EAAGpB,QAAQnI,EAAGgB,GACpB,KAAK6H,gBACD7I,EAAEQ,SAAWQ,EACnB,MAEH,OAAAwI,GAAAO,EAAAN,EAAAD,EAAA,SAAAO,EAAAL,GAAA,CACD,OAAOG,CACT,GAEA,CAAA/I,IAAA,SAAAC,MAKA,SAAO6B,EAAQ5C,GAAyB,IAIVgK,EAJAhJ,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC/BiI,EAAcjJ,EAChBkJ,EAAa,EACbC,EAAY,EAAEC,EAAA3K,EACD,KAAKmJ,QAAM,IAA5B,IAAAwB,EAAAhB,MAAAY,EAAAI,EAAAf,KAAAC,MAA8B,KAAnBC,EAAES,EAAAjJ,MACPL,EAAO6I,EAAG7I,KAEd,GADAyJ,EAAa,EAAIzJ,EAAQA,EAAO,OAC5B6B,IAAcgH,EAAG5I,SAAU,CAC7B,IAAM0J,EAAKzH,EAAI2G,EAAG5I,eACd4B,IAAc8H,IAChBF,EAAYZ,EAAGlG,OAAOgH,EAAIrK,EAAGgB,GACzB,EAAIN,IAGNA,EAAO6I,EAAGpB,QAAQnI,EAAGgB,KAI3BkJ,EAAalJ,EACbA,GAAUN,EAEZ,OAAA8I,GAAAY,EAAAX,EAAAD,EAAA,SAAAY,EAAAV,GAAA,CAIA,OAAQQ,EAAaC,EAAaF,CACpC,GAEA,CAAAnJ,IAAA,YAAAC,MACA,SAAUS,GACR,IAC4B8I,EADtBT,EAAO,KAAKC,wBAAwBS,EAAA9K,EACzB,KAAKmJ,QAAM,IAA5B,IAAA2B,EAAAnB,MAAAkB,EAAAC,EAAAlB,KAAAC,MAA8B,KAAnBC,EAAEe,EAAAvJ,WACNwB,IAAcgH,EAAG5I,UACd,EAAIa,EAAOhB,SACjBqJ,EAAKN,EAAG5I,UAAYa,EAAOgJ,SAE9B,OAAAhB,GAAAe,EAAAd,EAAAD,EAAA,SAAAe,EAAAb,GAAA,CACD,OAAOG,CACT,GAEA,CAAA/I,IAAA,YAAAC,MAQA,SAAUJ,GACR,GAAI,kBAAoBA,EACtB,MAAM,IAAIT,UAAU,2BACrB,IAC2BuK,EAD3BC,EAAAjL,EACgB,KAAKmJ,QAAM,IAA5B,IAAA8B,EAAAtB,MAAAqB,EAAAC,EAAArB,KAAAC,MAA8B,KAAnBC,EAAEkB,EAAA1J,MACX,GAAIwI,EAAG5I,WAAaA,EAClB,OAAO4I,EAEV,OAAAC,GAAAkB,EAAAjB,EAAAD,EAAA,SAAAkB,EAAAhB,GAAA,CAEH,GAEA,CAAA5I,IAAA,WAAAC,MAWA,SAASJ,GACP,GAAI,kBAAoBA,EACtB,MAAM,IAAIT,UAAU,2BAEtB,IAC4ByK,EADxB3J,EAAS,EAAE4J,EAAAnL,EACE,KAAKmJ,QAAM,IAA5B,IAAAgC,EAAAxB,MAAAuB,EAAAC,EAAAvB,KAAAC,MAA8B,KAAnBC,EAAEoB,EAAA5J,MACX,GAAIwI,EAAG5I,WAAaA,EAClB,OAAOK,EAEL,EAAIuI,EAAG7I,KACTM,GAAU,EACD,GAAKA,IACdA,GAAUuI,EAAG7I,MAEhB,OAAA8I,GAAAoB,EAAAnB,EAAAD,EAAA,SAAAoB,EAAAlB,GAAA,CAEH,KAACjB,CAAA,CAtLuB,CAAQhI,GAyLlC,IAcaoK,EAAkB,WAE7B,SAAAA,EAAYlK,GAAgBf,EAAA,KAAAiL,GAK1B,KAAKlK,SAAWA,CAClB,CAgBC,OAdDd,EAAAgL,EAAA,EAAA/J,IAAA,SAAAC,MAIA,SAAOf,EAAgBgB,GACrB,MAAM,IAAIiB,MAAM,iCAClB,GAEA,CAAAnB,IAAA,SAAAC,MAIA,SAAO6B,EAAQ5C,EAAegB,GAC5B,MAAM,IAAIiB,MAAM,iCAClB,KAAC4I,CAAA,CAxB4B,GA2B/B,IAiBaC,EAAyB,SAAAC,GAAArL,EAAAoL,EAAAC,GAAA,IAAAC,EAAArL,EAAAmL,GAEpC,SAAAA,EAAY9H,EAAwBrC,GAAiB,IAAAsK,EACnD,GADmDrL,EAAA,KAAAkL,KAC5C9H,aAAkBpB,GAChBoB,EAAOiF,WACd,MAAM,IAAI/H,UAAU,qDAOD,OAJrB+K,EAAAD,EAAAxI,KAAA,KAAM7B,GAAYqC,EAAOrC,UAAY,YAIhCqC,OAASA,EAAOiI,CACvB,CAUC,OARDpL,EAAAiL,EAAA,EAAAhK,IAAA,SAAAC,MACA,SAAOf,EAAegB,GACpB,OAAO,KAAKgC,OAAOI,OAAOpD,EAAGgB,EAC/B,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,EAAegB,GACjC,OAAO,KAAKgC,OAAOK,OAAOT,EAAK5C,EAAGgB,EACpC,KAAC8J,CAAA,CAvBmC,CAAQD,GA0B9C,IA2DaK,EAAM,SAAAC,GAAAzL,EAAAwL,EAAAC,GAAA,IAAAC,EAAAzL,EAAAuL,GAYjB,SAAAA,EACIG,EACAC,EACA3K,GAAiB,IAAA4K,EAEfC,EACJ,GAHmB5L,EAAA,KAAAsL,GAGdG,aAAiBnI,GACdmI,aAAiBlI,EACvBqI,EAAgB,IAAIV,EAAyB,IAAIjI,EAAawI,SACzD,GAAKA,aAAiBzJ,GACfyJ,EAAMpD,UAClBuD,EAAgB,IAAIV,EAAyBO,OACxC,MAAMA,aAAiBR,GAC5B,MAAM,IAAI3K,UAAU,oEAGpBsL,EAAgBH,EAKlB,QAHI9I,IAAc+I,IAChBA,EAAgB,QAEX,OAASA,GACNA,aAAyB7K,GACjC,MAAM,IAAIP,UAAU,0CAEtB,GAAI,OAASoL,EAAe,CAC1B,GAAI,EAAIA,EAAc5K,KACpB,MAAM,IAAIuB,MAAM,8CAEdM,IAAc+I,EAAc3K,WAC9B2K,EAAgBA,EAAcG,UAAU,YAQ5C,IAAI/K,GAAQ,EACR4K,GAEG,IADL5K,EAAO4K,EAAc5K,QACA2K,aAAiBnI,GAC9BmI,aAAiBlI,KACvBzC,GAAS8K,EAA2CxI,OAAOtC,OAG/D6K,EAAAH,EAAA5I,KAAA,KAAM9B,EAAMC,IAUP6K,cAAgBA,EAOrBD,EAAKG,wBAA2BL,aAAiBnI,GACzCmI,aAAiBlI,EASzBoI,EAAKD,cAAgBA,EAYrBC,EAAKI,SAAW,GAGhB,IAAIC,EAAwBL,EAAKM,wBAAwBC,KAAItM,EAAA+L,IAkC3D,OAnBFA,EAAKQ,iBAAmB,SAASnJ,GAC/B,OAAOgJ,EAAsBhJ,EAC/B,EAeA2I,EAAKS,uBAAyB,SAASC,GACrCL,EAAwBK,EAAIH,KAAK,KACnC,EAAEP,CACJ,CAmKC,OAjKD1L,EAAAqL,EAAA,EAAApK,IAAA,UAAAC,MACA,SAAQf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKtB,KACZ,OAAO,KAAKA,KAKd,IAAMwL,EAAM,KAAKC,WAAWnM,EAAGgB,GAC/B,IAAKkL,EACH,MAAM,IAAIjK,MAAM,qDAElB,OAAOiK,EAAI/D,QAAQnI,EAAGgB,EACxB,GAEA,CAAAF,IAAA,0BAAAC,MA6BA,SAAwB6B,GACtB,GAAIzB,OAAOG,UAAU8K,eAAe5J,KAAKI,EAAK,KAAK4I,cAAc7K,UAAW,CAC1E,GAAI,KAAK2K,eAAiB,KAAKA,cAAc3K,UACtCQ,OAAOG,UAAU8K,eAAe5J,KAAKI,EAAK,KAAK0I,cAAc3K,UAClE,OAEF,IAAMuL,EAAM,KAAKP,SAAS/I,EAAI,KAAK4I,cAAc7K,WACjD,GAAIuL,KACMA,EAAIlJ,QACFkJ,EAAIvL,UAAYQ,OAAOG,UAAU8K,eAAe5J,KAAKI,EAAKsJ,EAAIvL,WACxE,OAAOuL,OAGT,IAAK,IAAMG,KAAO,KAAKV,SAAU,CAC/B,IAAMO,EAAM,KAAKP,SAASU,GAC1B,GAAIH,EAAIvL,UAAYQ,OAAOG,UAAU8K,eAAe5J,KAAKI,EAAKsJ,EAAIvL,UAChE,OAAOuL,EAIb,MAAM,IAAIjK,MAAM,8BAClB,GAEA,CAAAnB,IAAA,SAAAC,MAMA,SAAOf,GAAyB,IAC1B6J,EADgB7I,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAEvBsK,EAAM,KAAKd,cACXH,EAAQiB,EAAIlJ,OAAOpD,EAAGgB,GACtBuL,EAAM,KAAKZ,SAASN,GAC1B,QAAI9I,IAAcgK,EAAK,CACrB,IAAMjB,EAAgB,KAAKA,cACvBkB,EAAgB,EAChB,KAAKd,0BACPc,EAAiBF,EAAiCtJ,OAAOtC,OAE3DmJ,EAAO,KAAKC,yBACPwC,EAAI3L,UAAY0K,EAGrBxB,EAAKyB,EAAe3K,UAAa2K,EAAelI,OAAOpD,EAAGgB,EAASwL,QAEnE3C,EAAO0C,EAAInJ,OAAOpD,EAAGgB,GAEvB,OAAO6I,CACT,GAEA,CAAA/I,IAAA,SAAAC,MAMA,SAAO6B,EAAmB5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC1CkK,EAAM,KAAKH,iBAAiBnJ,GAClC,QAAIL,IAAc2J,EAAK,CACrB,IAAMI,EAAM,KAAKd,cAGXe,EAAM,KAAKjB,cACbkB,EAAgB,EAOpB,OANI,KAAKd,0BACPc,EAAiBF,EAAiCtJ,OAAOtC,MAE3D4L,EAAIjJ,OAAOT,EAAI0J,EAAI3L,UAAWX,EAAGgB,GAG1BwL,EAAgBD,EAAIlJ,OAAOT,EAAI2J,EAAI5L,UAAYX,EAAGgB,EAASwL,GAEpE,OAAON,EAAI7I,OAAOT,EAAK5C,EAAGgB,EAC5B,GAEA,CAAAF,IAAA,aAAAC,MAaA,SAAW0L,EAAiBzJ,EAA8BrC,GACxD,IAAMO,EAAK,IAAIwL,EAAc,KAAMD,EAASzJ,EAAQrC,GAEpD,OADA,KAAKgL,SAASc,GAAWvL,EAClBA,CACT,GAEA,CAAAJ,IAAA,aAAAC,MAcA,SAAW4L,GAAmC,IACxCF,EAD8BzL,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAO3C,OAJEyK,EADEE,aAAc1M,WACN,KAAKuL,cAAcpI,OAAOuJ,EAAI3L,GAE9B2L,EAEL,KAAKhB,SAASc,EACvB,KAACvB,CAAA,CA1SgB,CAAQzK,GA6S3B,IA6BaiM,EAAc,SAAAE,GAAAlN,EAAAgN,EAAAE,GAAA,IAAAC,EAAAlN,EAAA+M,GAOzB,SAAAA,EAAYI,EAAcL,EAAiBzJ,EAAqCrC,GAAgB,IAAAoM,EAC9F,GAD8FnN,EAAA,KAAA8M,KACxFI,aAAiB5B,GACrB,MAAM,IAAIhL,UAAU,yBAEtB,IAAMU,OAAOC,UAAU4L,IAAc,EAAIA,EACvC,MAAM,IAAIvM,UAAU,4CAOtB,GALK,kBAAoB8C,QACjBT,IAAc5B,IACpBA,EAAWqC,EACXA,EAAS,MAEPA,EAAQ,CACV,KAAMA,aAAkBvC,GACtB,MAAM,IAAIP,UAAU,2BAEtB,GAAK,OAAS4M,EAAMxB,eACZ,GAAKtI,EAAOtC,MACZsC,EAAOtC,KAAOoM,EAAMxB,cAAc5K,KACxC,MAAM,IAAIuB,MAAM,iDAElB,GAAI,kBAAoBtB,EACtB,MAAM,IAAIT,UAAU,uCAGxB,IAAIQ,EAAOoM,EAAMpM,KAqBY,OApBzB,EAAIoM,EAAMpM,MAEP,IADLA,EAAOsC,EAASA,EAAOtC,KAAO,IACXoM,EAAMpB,0BACvBhL,GAASoM,EAAMtB,cAA2CxI,OAAOtC,OAGrEqM,EAAAF,EAAArK,KAAA,KAAM9B,EAAMC,IAGPmM,MAAQA,EAKbC,EAAKN,QAAUA,EAMfM,EAAK/J,OAASA,GAAU,KAAK+J,CAC/B,CAuEC,OArEDlN,EAAA6M,EAAA,EAAA5L,IAAA,UAAAC,MACA,SAAQf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC9B,GAAI,GAAK,KAAKtB,KAGZ,OAAO,KAAKA,KAEd,IAAI8L,EAAgB,EAChB,KAAKM,MAAMpB,0BACbc,EAAiB,KAAKM,MAAMtB,cAA2CxI,OAAOtC,MAGhF,IAAIA,EAAO,EAIX,OAHI,KAAKsC,SACPtC,EAAO,KAAKsC,OAAOmF,QAAQnI,EAAGgB,EAASwL,IAElCA,EAAgB9L,CACzB,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvB6H,EAAO,KAAKC,wBAClB,GAAI,OAAS,KAAKgD,MAAMX,WAAWnM,EAAGgB,GACpC,MAAM,IAAIiB,MAAM,oBAElB,IAAIuK,EAAgB,EAWpB,OAVI,KAAKM,MAAMpB,0BACbc,EAAiB,KAAKM,MAAMtB,cAA2CxI,OAAOtC,MAE5E,KAAKsC,OACP6G,EAAK,KAAKlJ,UAAY,KAAKqC,OAAOI,OAAOpD,EAAGgB,EAASwL,GAC5C,KAAK7L,SACdkJ,EAAK,KAAKlJ,WAAY,EACb,KAAKmM,MAAMpB,0BACpB7B,EAAK,KAAKiD,MAAMtB,cAAc7K,UAAY,KAAK8L,SAE1C5C,CACT,GAEA,CAAA/I,IAAA,SAAAC,MACA,SAAO6B,EAAmB5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC5CwK,EAAgB,EAIpB,GAHI,KAAKM,MAAMpB,0BACbc,EAAiB,KAAKM,MAAMtB,cAA2CxI,OAAOtC,MAE5E,KAAKsC,SACA7B,OAAOG,UAAU8K,eAAe5J,KAAKI,EAAK,KAAKjC,UACtD,MAAM,IAAIT,UAAU,0BAA4B,KAAKS,UAEvD,KAAKmM,MAAMtB,cAAcnI,OAAO,KAAKoJ,QAASzM,EAAGgB,GACjD,IAAIN,EAAO8L,EACX,GAAI,KAAKxJ,SACP,KAAKA,OAAOK,OAAOT,EAAI,KAAKjC,UAAWX,EAAGgB,EAASwL,GACnD9L,GAAQ,KAAKsC,OAAOmF,QAAQnI,EAAGgB,EAASwL,GACnC,GAAK,KAAKM,MAAMpM,MACbA,EAAO,KAAKoM,MAAMpM,MACxB,MAAM,IAAIuB,MAAM,6CAGpB,OAAOvB,CACT,GAEA,CAAAI,IAAA,YAAAC,MAEA,SAAUS,GACR,GAAI,KAAKwB,OACP,OAAO,KAAKA,OAAOgK,UAAUxL,EAGjC,KAACkL,CAAA,CA7HwB,CAAQjM,GAsInC,SAASwM,EAAiBzE,GAIxB,OAHI,EAAIA,IACNA,GAAK,YAEAA,CACT,CAEA,IA+Ba0E,EAAa,SAAAC,GAAAzN,EAAAwN,EAAAC,GAAA,IAAAC,EAAAzN,EAAAuN,GAQxB,SAAAA,EAAYG,EAAqBC,EAAuB3M,GAAiB,IAAA4M,EACvE,GADuE3N,EAAA,KAAAsN,KAChEG,aAAgBnK,GACbmK,aAAgBlK,GACxB,MAAM,IAAIjD,UAAU,wCAOtB,GALK,kBAAoBoN,QACjB/K,IAAc5B,IACpBA,EAAW2M,EACXA,GAAM,GAEJ,EAAID,EAAK3M,KACX,MAAM,IAAIO,WAAW,+BAEvBsM,EAAAH,EAAA5K,KAAA,KAAM6K,EAAK3M,KAAMC,IAKZ0M,KAAOA,EASZE,EAAKD,MAAQA,EAQbC,EAAK3E,OAAS,GAKd,IAAI7H,EAAQ,EAOV,OANFwM,EAAKC,gBAAkB,SAAShF,GAE9B,OADAzH,EAAQkM,EAAiBzE,GAClB,IACT,EACA+E,EAAKE,gBAAkB,WACrB,OAAO1M,CACT,EAAEwM,CACJ,CAmFC,OAjFD1N,EAAAqN,EAAA,EAAApM,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvB6H,EAAO,KAAKC,wBACZ/I,EAAQ,KAAKsM,KAAKjK,OAAOpD,EAAGgB,GAClC,KAAKwM,gBAAgBzM,GAAO,IACA2M,EADAC,EAAAlO,EACX,KAAKmJ,QAAM,IAA5B,IAAA+E,EAAAvE,MAAAsE,EAAAC,EAAAtE,KAAAC,MAA8B,KAAnBC,EAAEmE,EAAA3M,WACPwB,IAAcgH,EAAG5I,WACnBkJ,EAAKN,EAAG5I,UAAY4I,EAAGnG,OAAOpD,IAEjC,OAAAwJ,GAAAmE,EAAAlE,EAAAD,EAAA,SAAAmE,EAAAjE,GAAA,CACD,OAAOG,CACT,GAEA,CAAA/I,IAAA,SAAAC,MAKA,SAAO6B,EAAmB5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC1CjB,EAAQ,KAAKsM,KAAKjK,OAAOpD,EAAGgB,GAClC,KAAKwM,gBAAgBzM,GAAO,IACA6M,EADAC,EAAApO,EACX,KAAKmJ,QAAM,IAA5B,IAAAiF,EAAAzE,MAAAwE,EAAAC,EAAAxE,KAAAC,MAA8B,KAAnBC,EAAEqE,EAAA7M,MACX,QAAIwB,IAAcgH,EAAG5I,SAAU,CAC7B,IAAM0J,EAAKzH,EAAI2G,EAAG5I,eACd4B,IAAc8H,GAChBd,EAAGlG,OAAOgH,IAGf,OAAAb,GAAAqE,EAAApE,EAAAD,EAAA,SAAAqE,EAAAnE,GAAA,CACD,OAAO,KAAK2D,KAAKhK,OAAO,KAAKoK,kBAAmBzN,EAAGgB,EACrD,GAEA,CAAAF,IAAA,WAAAC,MASA,SAAS+M,EAAcnN,GACrB,IAAMoN,EAAK,IAAIC,EAAS,KAAMF,EAAMnN,GAEpC,OADA,KAAKiI,OAAOP,KAAK0F,GACVA,CACT,GAUA,CAAAjN,IAAA,aAAAC,MACA,SAAWJ,GAET,IAAMoN,EAAK,IAAIE,EAAQ,KAAMtN,GAE7B,OADA,KAAKiI,OAAOP,KAAK0F,GACVA,CACT,GAEA,CAAAjN,IAAA,WAAAC,MAQA,SAASJ,GACP,GAAI,kBAAoBA,EACtB,MAAM,IAAIT,UAAU,2BACrB,IAC2BgO,EAD3BC,EAAA1O,EACgB,KAAKmJ,QAAM,IAA5B,IAAAuF,EAAA/E,MAAA8E,EAAAC,EAAA9E,KAAAC,MAA8B,KAAnBC,EAAE2E,EAAAnN,MACX,GAAIwI,EAAG5I,WAAaA,EAClB,OAAO4I,EAEV,OAAAC,GAAA2E,EAAA1E,EAAAD,EAAA,SAAA2E,EAAAzE,GAAA,CAEH,KAACwD,CAAA,CA3IuB,CAAQzM,GA8IlC,IAoBauN,EAAQ,WAOnB,SAAAA,EAAYI,EAAyBN,EAAcnN,GACjD,GADiEf,EAAA,KAAAoO,KAC3DI,aAAqBlB,GACzB,MAAM,IAAIhN,UAAU,oCAEtB,IAAMU,OAAOC,UAAUiN,IAAW,GAAKA,EACrC,MAAM,IAAI5N,UAAU,iCAEtB,IAAMmO,EAAY,EAAID,EAAU1N,KAC1B4N,EAAWF,EAAUxF,OAAOL,QAAO,SAACgG,EAAKhF,GAAE,OAAKgF,EAAMhF,EAAGuE,IAAI,GAAE,GACrE,GAAKA,EAAOQ,EAAYD,EACtB,MAAM,IAAIpM,MAAM,sCACGoM,EAAYC,GAAY,OACzBD,EAAY,YAKhC,KAAKD,UAAYA,EAGjB,KAAKN,KAAOA,EAOZ,KAAKU,WAAa,GAAKV,GAAQ,EAC3B,KAAOA,IACT,KAAKU,UAAY,YAMnB,KAAKC,MAAQH,EACT,KAAKF,UAAUd,MACjB,KAAKmB,MAAQJ,EAAYC,EAAWR,GAKtC,KAAKY,SAAWzB,EAAiB,KAAKuB,WAAa,KAAKC,OAYxD,KAAK9N,SAAWA,CAClB,CA2BC,OAzBDd,EAAAmO,EAAA,EAAAlN,IAAA,SAAAC,MAEA,SAAOf,EAAgBgB,GAIrB,OAFkBiM,EADL,KAAKmB,UAAUX,kBACc,KAAKiB,YACnB,KAAKD,KAEnC,GAEA,CAAA3N,IAAA,SAAAC,MAKA,SAAOA,GACL,GAAI,kBAAoBA,IAChBH,OAAOC,UAAUE,IACjBA,IAAUkM,EAAiBlM,EAAQ,KAAKyN,WAC9C,MAAM,IAAItO,UAAUuB,EAAiB,kBAAmB,MAClC,wCAA0C,KAAK+M,WAEvE,IAAMnB,EAAO,KAAKe,UAAUX,kBACtBkB,EAAY1B,EAAiBlM,GAAS,KAAK0N,OACjD,KAAKL,UAAUZ,gBAAgBP,EAAiBI,GAAQ,KAAKqB,UAC5BC,EACnC,KAACX,CAAA,CAzFkB,GA4GrB,IACaC,EAAQ,SAAAW,GAAAlP,EAAAuO,EAAAW,GAAA,IAAAC,EAAAlP,EAAAsO,GACnB,SAAAA,EAAYG,EAAyBzN,GAAgB,OAAAf,EAAA,KAAAqO,GAAAY,EAAArM,KAAA,KAC7C4L,EAAW,EAAGzN,EACtB,CAgBC,OAdDd,EAAAoO,EAAA,EAAAnN,IAAA,SAAAC,MAGA,SAAOf,EAAgBgB,GACrB,QAAQ3B,EAAAE,EAAA0O,EAAA3M,WAAA,eAAAkB,KAAA,KAAcxC,EAAGgB,EAC3B,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAOA,GACD,mBAAqBA,IAEvBA,GAASA,GAEX1B,EAAAE,EAAA0O,EAAA3M,WAAA,eAAAkB,KAAA,KAAazB,EACf,KAACkN,CAAA,CAnBkB,CAAQD,GAuB7B,IAcac,EAAK,SAAAC,GAAArP,EAAAoP,EAAAC,GAAA,IAAAC,EAAArP,EAAAmP,GAEhB,SAAAA,EAAYtO,EAAiCG,GAAiB,IAAAsO,EAC5D,GAD4DrP,EAAA,KAAAkP,KACpDtO,aAAkBoB,GAAmBpB,EAAOyH,WAC1CrH,OAAOC,UAAUL,IAAY,GAAKA,GAC1C,MAAM,IAAIN,UAAU,yEAItB,IAAIQ,GAAQ,EAWS,OAVfF,aAAkBoB,IACtBlB,EAAOF,IAETyO,EAAAD,EAAAxM,KAAA,KAAM9B,EAAMC,IAOPH,OAASA,EAAOyO,CACvB,CA2CC,OAzCDpP,EAAAiP,EAAA,EAAAhO,IAAA,UAAAC,MACA,SAAQf,EAAegB,GACrB,IAAIN,EAAO,KAAKA,KAIhB,OAHI,EAAIA,IACNA,EAAQ,KAAKF,OAA0B4C,OAAOpD,EAAGgB,IAE5CN,CACT,GAEA,CAAAI,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACzBtB,EAAO,KAAKA,KAIhB,OAHI,EAAIA,IACNA,EAAQ,KAAKF,OAA0B4C,OAAOpD,EAAGgB,IAE5Cb,EAAmBH,GAAGkP,MAAMlO,EAAQA,EAASN,EACtD,GAEA,CAAAI,IAAA,SAAAC,MAKA,SAAO6B,EAAiB5C,EAAegB,GACrC,IAAIN,EAAO,KAAKF,OAIhB,GAHI,KAAKA,kBAAkBoB,IACzBlB,EAAOkC,EAAIpC,UAEPoC,aAAe3C,YAAcS,IAASkC,EAAIpC,QAC9C,MAAM,IAAIN,UAAUuB,EAAiB,cAAe,MAC9B,qBAAuBf,EAAO,uBAEtD,GAAKM,EAASN,EAAQV,EAAEQ,OACtB,MAAM,IAAIS,WAAW,gCAEvB,IAAMkO,EAAYhP,EAAmByC,GAKrC,OAJAzC,EAAmBH,GAAGoP,MAAMD,EAAUE,SAAS,OAAQrO,EAAQN,EAAM,OACjE,KAAKF,kBAAkBoB,GACzB,KAAKpB,OAAO6C,OAAO3C,EAAMV,EAAGgB,GAEvBN,CACT,KAACoO,CAAA,CAhEe,CAAQrO,GAmE1B,IAaa6O,EAAQ,SAAAC,GAAA7P,EAAA4P,EAAAC,GAAA,IAAAC,EAAA7P,EAAA2P,GACnB,SAAAA,EAAY3O,GAAiB,OAAAf,EAAA,KAAA0P,GAAAE,EAAAhN,KAAA,MACpB,EAAG7B,EACZ,CAmCC,OAjCDd,EAAAyP,EAAA,EAAAxO,IAAA,UAAAC,MACA,SAAQf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAC9BjC,EAAgBC,GAEhB,IADA,IAAIkI,EAAMlH,EACFkH,EAAMlI,EAAEQ,QAAY,IAAMR,EAAEkI,IAClCA,GAAO,EAET,OAAO,EAAIA,EAAMlH,CACnB,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvBtB,EAAO,KAAKyH,QAAQnI,EAAGgB,GAC7B,OAAOb,EAAmBH,GAAGkP,MAAMlO,EAAQA,EAASN,EAAO,GAAG2O,SAAS,QACzE,GAEA,CAAAvO,IAAA,SAAAC,MACA,SAAO6B,EAAa5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAItC,kBAAoBY,IACtBA,EAAM6M,OAAO7M,IAEf,IAAM8M,EAAO5P,EAAAM,OAAOC,KAAKuC,EAAK,QACxBlC,EAAOgP,EAAKlP,OAClB,GAAKQ,EAASN,EAAQV,EAAEQ,OACtB,MAAM,IAAIS,WAAW,4BAEvB,IAAMX,EAASH,EAAmBH,GAGlC,OAFA0P,EAAKC,KAAKrP,EAAQU,GAClBV,EAAOU,EAASN,GAAQ,EACjBA,EAAO,CAChB,KAAC4O,CAAA,CAtCkB,CAAQ7O,GAyC7B,IAmBamP,EAAK,SAAAC,GAAAnQ,EAAAkQ,EAAAC,GAAA,IAAAC,EAAAnQ,EAAAiQ,GAEhB,SAAAA,EAAYG,EAA2BpP,GAAiB,IAAAqP,EAKtD,GALsDpQ,EAAA,KAAAgQ,GACjD,kBAAoBG,QAAaxN,IAAc5B,IAClDA,EAAWoP,EACXA,OAAUxN,QAERA,IAAcwN,EAChBA,GAAW,OACN,IAAKnP,OAAOC,UAAUkP,GAC3B,MAAM,IAAI7P,UAAU,8BAaW,OAVjC8P,EAAAF,EAAAtN,KAAA,MAAO,EAAG7B,IAULoP,QAAUA,EAAkBC,CACnC,CAqCC,OAnCDnQ,EAAA+P,EAAA,EAAA9O,IAAA,UAAAC,MACA,SAAQf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE9B,OADAjC,EAAgBC,GACTA,EAAEQ,OAASQ,CACpB,GAEA,CAAAF,IAAA,SAAAC,MACA,SAAOf,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EACvBtB,EAAO,KAAKyH,QAAQnI,EAAGgB,GAC7B,GAAK,GAAK,KAAK+O,SACP,KAAKA,QAAUrP,EACrB,MAAM,IAAIO,WAAW,+BAEvB,OAAOd,EAAmBH,GAAGkP,MAAMlO,EAAQA,EAASN,GAAM2O,SAAS,QACrE,GAEA,CAAAvO,IAAA,SAAAC,MACA,SAAO6B,EAA4B5C,GAAyB,IAAVgB,EAAMgB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAIrD,kBAAoBY,IACtBA,EAAM6M,OAAO7M,IAEf,IAAM8M,EAAO5P,EAAAM,OAAOC,KAAKuC,EAAK,QACxBlC,EAAOgP,EAAKlP,OAClB,GAAK,GAAK,KAAKuP,SACP,KAAKA,QAAUrP,EACrB,MAAM,IAAIO,WAAW,+BAEvB,GAAKD,EAASN,EAAQV,EAAEQ,OACtB,MAAM,IAAIS,WAAW,4BAGvB,OADAyO,EAAKC,KAAKxP,EAAmBH,GAAIgB,GAC1BN,CACT,KAACkP,CAAA,CA7De,CAAQnP,GAgE1B,IAmBawP,EAAY,SAAAC,GAAAxQ,EAAAuQ,EAAAC,GAAA,IAAAC,EAAAxQ,EAAAsQ,GAEvB,SAAAA,EAAYlP,EAAUJ,GAAiB,IAAAyP,EAYlB,OAZkBxQ,EAAA,KAAAqQ,IACrCG,EAAAD,EAAA3N,KAAA,KAAM,EAAG7B,IAWJI,MAAQA,EAAMqP,CACrB,CAWC,OATDvQ,EAAAoQ,EAAA,EAAAnP,IAAA,SAAAC,MACA,SAAOf,EAAgBgB,GACrB,OAAO,KAAKD,KACd,GAEA,CAAAD,IAAA,SAAAC,MACA,SAAO6B,EAAQ5C,EAAgBgB,GAE7B,OAAO,CACT,KAACiP,CAAA,CA1BsB,CAAQxP,GAiCpB4P,EAAAA,GAAU,SAACrN,EAAwBhC,EAAiBL,GAAiB,OAC9E,IAAIkC,EAAaG,EAAQhC,EAAQL,EAAS,EAIjC0P,EAAAA,GAAM,SAAC1P,GAAiB,OAAW,IAAIuC,EAAK,EAAGvC,EAAS,EAIxD0P,EAAAA,GAAO,SAAC1P,GAAiB,OAAW,IAAIuC,EAAK,EAAGvC,EAAS,EAQzD0P,EAAAA,GAAO,SAAC1P,GAAiB,OAAW,IAAIuC,EAAK,EAAGvC,EAAS,EAYzD0P,EAAAA,GAAQ,SAAC1P,GAAiB,OAAiB,IAAIuE,EAAWvE,EAAS,EAoDnE0P,EAAAA,GAAQ,SAAC1P,GAAiB,OAAgB,IAAIkF,EAAUlF,EAAS,EAuCjE0P,EAAAA,GAAU,SAAIzH,EAA8BjI,EAAmBkI,GAAwB,OAChG,IAAIJ,EAAaG,EAAQjI,EAAUkI,EAAe,EAOzCwH,EAAAA,GAAO,SAAIvI,EAA0BC,EAAgCpH,GAAiB,OAC/F,IAAIgH,EAAYG,EAAeC,EAAOpH,EAAS,EAYtC0P,EAAAA,GAAQ,SAAC7P,EAAiCG,GAAiB,OAAW,IAAImO,EAAKtO,EAAQG,EAAS,y5BC1kF7G,SAAS2P,EAAOjH,GACd,IAAKzI,OAAO2P,cAAclH,IAAMA,EAAI,EAAG,MAAM,IAAIpH,MAAM,2BAADuO,OAA4BnH,GACpF,CAMA,SAASoH,EAAMzQ,GACb,KAAMA,aAAaC,YAAa,MAAM,IAAIgC,MAAM,uBAAuB,QAAAyO,EAAA1O,UAAAxB,OAD5BmQ,EAAiB,IAAA5H,MAAA2H,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAjBD,EAAiBC,EAAA,GAAA5O,UAAA4O,GAE5D,GAAID,EAAQnQ,OAAS,IAAMmQ,EAAQE,SAAS7Q,EAAEQ,QAC5C,MAAM,IAAIyB,MAAM,iCAADuO,OAAkCG,EAAO,oBAAAH,OAAmBxQ,EAAEQ,QACjF,CAQA,SAASsQ,EAAKA,GACZ,GAAoB,oBAATA,GAA8C,oBAAhBA,EAAK1P,OAC5C,MAAM,IAAIa,MAAM,mDAClBqO,EAAOQ,EAAKC,WACZT,EAAOQ,EAAKE,SACd,CAEA,SAASC,EAAOC,GAAmC,IAApBC,IAAanP,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,KAAAA,UAAA,GAC1C,GAAIkP,EAASE,UAAW,MAAM,IAAInP,MAAM,oCACxC,GAAIkP,GAAiBD,EAASG,SAAU,MAAM,IAAIpP,MAAM,wCAC1D,CACA,SAASqP,EAAOC,EAAUL,GACxBT,EAAMc,GACN,IAAMC,EAAMN,EAASH,UACrB,GAAIQ,EAAI/Q,OAASgR,EACf,MAAM,IAAIvP,MAAM,yDAADuO,OAA0DgB,GAE7E,CAIA,ICtCaC,EACW,kBAAfC,YAA2B,WAAYA,WAAaA,WAAWD,YAASlP,ECU3EoP,EAAM,SAACC,GAAM,OAAsBA,aAAa3R,UAAU,EAOnD4R,EAAa,SAACC,GAAe,OACxC,IAAIC,SAASD,EAAIxR,OAAQwR,EAAIvR,WAAYuR,EAAIE,WAAW,EAG7CC,EAAO,SAAC5E,EAAc7C,GAAa,OAAM6C,GAAS,GAAK7C,EAAW6C,IAAS7C,CAAM,EAK9F,KADgF,KAA5D,IAAIvK,WAAW,IAAIiS,YAAY,CAAC,YAAa5R,QAAQ,IAC9D,MAAM,IAAI2B,MAAM,+CA6DrB,SAAUkQ,EAAYC,GAC1B,GAAmB,kBAARA,EAAkB,MAAM,IAAInQ,MAAM,oCAADuO,cAA4C4B,IACxF,OAAO,IAAInS,YAAW,IAAIoS,aAAchP,OAAO+O,GACjD,CAQM,SAAUE,EAAQC,GAEtB,GADoB,kBAATA,IAAmBA,EAAOJ,EAAYI,KAC5CZ,EAAIY,GAAO,MAAM,IAAItQ,MAAM,4BAADuO,cAAoC+B,IACnE,OAAOA,CACT,CAKM,SAAUC,IAAmC,QAAA9B,EAAA1O,UAAAxB,OAApBiS,EAAoB,IAAA1J,MAAA2H,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAApB6B,EAAoB7B,GAAA5O,UAAA4O,GACjD,IAAM8B,EAAI,IAAIzS,WAAWwS,EAAOlK,QAAO,SAACgG,EAAKqD,GAAC,OAAKrD,EAAMqD,EAAEpR,MAAM,GAAE,IAC/DmS,EAAM,EAMV,OALAF,EAAOG,SAAQ,SAAChB,GACd,IAAKD,EAAIC,GAAI,MAAM,IAAI3P,MAAM,uBAC7ByQ,EAAEG,IAAIjB,EAAGe,GACTA,GAAOf,EAAEpR,MACX,IACOkS,CACT,CAGO,IAAeI,EAAI,oBAAAA,KAAAlT,EAAAA,EAAAA,GAAA,KAAAkT,EAAA,CAwBvB,OAxBuBjT,EAAAA,EAAAA,GAAAiT,EAAA,EAAAhS,IAAA,QAAAC,MAsBxB,WACE,OAAOgS,KAAKC,YACd,KAACF,CAAA,CAxBuB,GAoDpB,SAAUG,EAAmCC,GACjD,IAAMC,EAAQ,SAACC,GAAU,OAAiBF,IAAWG,OAAOf,EAAQc,IAAME,QAAQ,EAC5EC,EAAML,IAIZ,OAHAC,EAAMpC,UAAYwC,EAAIxC,UACtBoC,EAAMnC,SAAWuC,EAAIvC,SACrBmC,EAAM/R,OAAS,kBAAM8R,GAAU,EACxBC,CACT,CA2BM,SAAUK,IAA4B,IAAhBC,EAAWzR,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,GACxC,GAAIyP,GAA4C,oBAA3BA,EAAOiC,gBAC1B,OAAOjC,EAAOiC,gBAAgB,IAAIzT,WAAWwT,IAE/C,MAAM,IAAIxR,MAAM,yCAClB,CCrMO,IAAe0R,EAAwB,SAAAC,IAAAlU,EAAAA,EAAAA,GAAAiU,EAAAC,GAAA,IAAA9R,GAAAnC,EAAAA,EAAAA,GAAAgU,GAc5C,SAAAA,EACW3C,EACFD,EACE8C,EACAC,GAAa,IAAAzR,EAIc,OAJdzC,EAAAA,EAAAA,GAAA,KAAA+T,IAEtBtR,EAAAP,EAAAU,KAAA,OALSwO,SAAAA,EACF3O,EAAA0O,UAAAA,EACE1O,EAAAwR,UAAAA,EACAxR,EAAAyR,KAAAA,EATDzR,EAAAgP,UAAW,EACXhP,EAAA7B,OAAS,EACT6B,EAAA0R,IAAM,EACN1R,EAAA+O,WAAY,EASpB/O,EAAK/B,OAAS,IAAIL,WAAW+Q,GAC7B3O,EAAK2R,KAAOnC,EAAWxP,EAAK/B,QAAQ+B,CACtC,CA4EC,OA5EAxC,EAAAA,EAAAA,GAAA8T,EAAA,EAAA7S,IAAA,SAAAC,MACD,SAAOwR,GACLtB,EAAO8B,MAIP,IAHA,IAAQiB,EAA2BjB,KAA3BiB,KAAM1T,EAAqByS,KAArBzS,OAAQ0Q,EAAa+B,KAAb/B,SAEhBiD,GADN1B,EAAOD,EAAQC,IACE/R,OACRuT,EAAM,EAAGA,EAAME,GAAO,CAC7B,IAAMC,EAAOxR,KAAK8O,IAAIR,EAAW+B,KAAKgB,IAAKE,EAAMF,GAEjD,GAAIG,IAASlD,EAKb1Q,EAAOuS,IAAIN,EAAK4B,SAASJ,EAAKA,EAAMG,GAAOnB,KAAKgB,KAChDhB,KAAKgB,KAAOG,EACZH,GAAOG,EACHnB,KAAKgB,MAAQ/C,IACf+B,KAAKqB,QAAQJ,EAAM,GACnBjB,KAAKgB,IAAM,QARX,IADA,IAAMM,EAAWxC,EAAWU,GACrBvB,GAAYiD,EAAMF,EAAKA,GAAO/C,EAAU+B,KAAKqB,QAAQC,EAAUN,GAa1E,OAFAhB,KAAKvS,QAAU+R,EAAK/R,OACpBuS,KAAKuB,aACEvB,IACT,GAAC,CAAAjS,IAAA,aAAAC,MACD,SAAWwQ,GACTN,EAAO8B,MACPzB,EAAOC,EAAKwB,MACZA,KAAK1B,UAAW,EAIhB,IAAQ/Q,EAAiCyS,KAAjCzS,OAAQ0T,EAAyBjB,KAAzBiB,KAAMhD,EAAmB+B,KAAnB/B,SAAU8C,EAASf,KAATe,KAC1BC,EAAQhB,KAARgB,IAENzT,EAAOyT,KAAS,IAChBhB,KAAKzS,OAAO6T,SAASJ,GAAKQ,KAAK,GAE3BxB,KAAKc,UAAY7C,EAAW+C,IAC9BhB,KAAKqB,QAAQJ,EAAM,GACnBD,EAAM,GAGR,IAAK,IAAI3L,EAAI2L,EAAK3L,EAAI4I,EAAU5I,IAAK9H,EAAO8H,GAAK,GAhFrD,SAAsB4L,EAAgBzT,EAAoBQ,EAAe+S,GACvE,GAAiC,oBAAtBE,EAAKQ,aAA6B,OAAOR,EAAKQ,aAAajU,EAAYQ,EAAO+S,GACzF,IAAMW,EAAOC,OAAO,IACdC,EAAWD,OAAO,YAClBE,EAAKhU,OAAQG,GAAS0T,EAAQE,GAC9BE,EAAKjU,OAAOG,EAAQ4T,GACpBG,EAAIhB,EAAO,EAAI,EACfiB,EAAIjB,EAAO,EAAI,EACrBE,EAAKgB,UAAUzU,EAAauU,EAAGF,EAAId,GACnCE,EAAKgB,UAAUzU,EAAawU,EAAGF,EAAIf,EACrC,CA0EIU,CAAaR,EAAMhD,EAAW,EAAG0D,OAAqB,EAAd3B,KAAKvS,QAAasT,GAC1Df,KAAKqB,QAAQJ,EAAM,GACnB,IAAMiB,EAAQpD,EAAWN,GACnB0C,EAAMlB,KAAKhC,UAEjB,GAAIkD,EAAM,EAAG,MAAM,IAAIhS,MAAM,+CAC7B,IAAMiT,EAASjB,EAAM,EACfkB,EAAQpC,KAAKqC,MACnB,GAAIF,EAASC,EAAM3U,OAAQ,MAAM,IAAIyB,MAAM,sCAC3C,IAAK,IAAImG,EAAI,EAAGA,EAAI8M,EAAQ9M,IAAK6M,EAAMD,UAAU,EAAI5M,EAAG+M,EAAM/M,GAAI0L,EACpE,GAAC,CAAAhT,IAAA,SAAAC,MACD,WACE,IAAQT,EAAsByS,KAAtBzS,OAAQyQ,EAAcgC,KAAdhC,UAChBgC,KAAKsC,WAAW/U,GAChB,IAAMgV,EAAMhV,EAAO4O,MAAM,EAAG6B,GAE5B,OADAgC,KAAKwC,UACED,CACT,GAAC,CAAAxU,IAAA,aAAAC,MACD,SAAWyU,GAAM,IAAAC,EACfD,IAAAA,EAAO,IAAKzC,KAAK1R,cACjBoU,EAAAD,GAAG3C,IAAG9Q,MAAA0T,GAAAC,EAAAA,EAAAA,GAAI3C,KAAKqC,QACf,IAAQpE,EAAuD+B,KAAvD/B,SAAU1Q,EAA6CyS,KAA7CzS,OAAQE,EAAqCuS,KAArCvS,OAAQ6Q,EAA6B0B,KAA7B1B,SAAUD,EAAmB2B,KAAnB3B,UAAW2C,EAAQhB,KAARgB,IAMvD,OALAyB,EAAGhV,OAASA,EACZgV,EAAGzB,IAAMA,EACTyB,EAAGnE,SAAWA,EACdmE,EAAGpE,UAAYA,EACX5Q,EAASwQ,GAAUwE,EAAGlV,OAAOuS,IAAIvS,GAC9BkV,CACT,KAAC7B,CAAA,CAnG2C,CAAQb,GCjBhD6C,EAA6BjB,OAAOhS,KAAAmC,IAAA,EAAK,IAAK,GAC9C4P,EAAuBC,OAAO,IAGpC,SAASkB,EAAQvM,GACf,OAD4BrH,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,IAAAA,UAAA,GACb,CAAE8S,EAAGlU,OAAOyI,EAAIsM,GAAaZ,EAAGnU,OAAQyI,GAAKoL,EAAQkB,IAC7D,CAAEb,EAAsC,EAAnClU,OAAQyI,GAAKoL,EAAQkB,GAAiBZ,EAA4B,EAAzBnU,OAAOyI,EAAIsM,GAClE,CAEA,SAASrQ,EAAMuQ,GAGb,IAHsC,IAAVC,EAAE9T,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,IAAAA,UAAA,GAC1B+T,EAAK,IAAI7D,YAAY2D,EAAIrV,QACzBwV,EAAK,IAAI9D,YAAY2D,EAAIrV,QACpB4H,EAAI,EAAGA,EAAIyN,EAAIrV,OAAQ4H,IAAK,CACnC,IAAA6N,EAAiBL,EAAQC,EAAIzN,GAAI0N,GAAII,EACpB,CADRD,EAADnB,EAAImB,EAADlB,GACVgB,EAAG3N,GAAE8N,EAAA,GAAEF,EAAG5N,GAAE8N,EAAA,GAEf,MAAO,CAACH,EAAIC,EACd,CAEA,IAcMG,EAAS,SAACrB,EAAWC,EAAW3L,GAAS,OAAM0L,GAAK1L,EAAM2L,IAAO,GAAK3L,CAAG,EACzEgN,EAAS,SAACtB,EAAWC,EAAW3L,GAAS,OAAM2L,GAAK3L,EAAM0L,IAAO,GAAK1L,CAAG,EAEzEiN,EAAS,SAACvB,EAAWC,EAAW3L,GAAS,OAAM2L,GAAM3L,EAAI,GAAQ0L,IAAO,GAAK1L,CAAG,EAChFkN,EAAS,SAACxB,EAAWC,EAAW3L,GAAS,OAAM0L,GAAM1L,EAAI,GAAQ2L,IAAO,GAAK3L,CAAG,EAStF,IA8BA,EARY,CACVwM,QAAAA,EAAStQ,MAAAA,EAAOiR,MAlDJ,SAACzB,EAAWC,GAAS,OAAML,OAAOI,IAAM,IAAML,EAAQC,OAAOK,IAAM,EAAE,EAmDjFyB,MAjDY,SAAC1B,EAAW2B,EAAYrN,GAAS,OAAK0L,IAAM1L,CAAC,EAiDlDsN,MAhDK,SAAC5B,EAAWC,EAAW3L,GAAS,OAAM0L,GAAM,GAAK1L,EAAO2L,IAAM3L,CAAE,EAiD5EuN,OA/Ca,SAAC7B,EAAWC,EAAW3L,GAAS,OAAM0L,IAAM1L,EAAM2L,GAAM,GAAK3L,CAAG,EA+CrEwN,OA9CK,SAAC9B,EAAWC,EAAW3L,GAAS,OAAM0L,GAAM,GAAK1L,EAAO2L,IAAM3L,CAAE,EA8C7DyN,OA5CH,SAAC/B,EAAWC,EAAW3L,GAAS,OAAM0L,GAAM,GAAK1L,EAAO2L,IAAO3L,EAAI,EAAI,EA4C5D0N,OA3CX,SAAChC,EAAWC,EAAW3L,GAAS,OAAM0L,IAAO1L,EAAI,GAAQ2L,GAAM,GAAK3L,CAAG,EA4CpF2N,QA1Cc,SAACC,EAAYjC,GAAS,OAAKA,CAAC,EA0CjCkC,QAzCK,SAACnC,EAAW2B,GAAU,OAAK3B,CAAC,EA0C1CqB,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,EACxBY,IAjCF,SAAanB,EAAYC,EAAYmB,EAAYC,GAC/C,IAAMrC,GAAKiB,IAAO,IAAMoB,IAAO,GAC/B,MAAO,CAAEtC,EAAIiB,EAAKoB,GAAOpC,EAACrS,KAAAmC,IAAG,EAAK,IAAM,GAAM,EAAGkQ,EAAO,EAAJA,EACtD,EA8BOsC,MA5BO,SAACrB,EAAYoB,EAAYE,GAAU,OAAMtB,IAAO,IAAMoB,IAAO,IAAME,IAAO,EAAE,EA4B5EC,MA3BA,SAACC,EAAazB,EAAYoB,EAAYM,GAAU,OAC3D1B,EAAKoB,EAAKM,GAAOD,EAAG9U,KAAAmC,IAAG,EAAK,IAAM,GAAM,CAAC,EA0BvB6S,MAzBP,SAAC1B,EAAYoB,EAAYE,EAAYK,GAAU,OAC1D3B,IAAO,IAAMoB,IAAO,IAAME,IAAO,IAAMK,IAAO,EAAE,EAwBvBC,MAvBd,SAACJ,EAAazB,EAAYoB,EAAYM,EAAYI,GAAU,OACvE9B,EAAKoB,EAAKM,EAAKI,GAAOL,EAAG9U,KAAAmC,IAAG,EAAK,IAAM,GAAM,CAAC,EAsBdiT,MAnBrB,SAACN,EAAazB,EAAYoB,EAAYM,EAAYI,EAAYE,GAAU,OACnFhC,EAAKoB,EAAKM,EAAKI,EAAKE,GAAOP,EAAG9U,KAAAmC,IAAG,EAAK,IAAM,GAAM,CAAC,EAkBZmT,MArB5B,SAAChC,EAAYoB,EAAYE,EAAYK,EAAYM,GAAU,OACtEjC,IAAO,IAAMoB,IAAO,IAAME,IAAO,IAAMK,IAAO,IAAMM,IAAO,EAAE,GChDhE/B,EAAgD,kBAAMgC,EAAAA,MAAU,CAC9D,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,qBAClE,qBAAsB,qBAAsB,qBAAsB,sBAClEC,KAAI,SAAA9O,GAAC,OAAIqL,OAAOrL,EAAE,IAAE,CArB0B,GAqBvB+O,GAAAC,EAAAA,EAAAA,GAAAnC,EAAA,GArBlBoC,EAASF,EAAA,GAAEG,EAASH,EAAA,GAwBrBI,EAA6B,IAAItG,YAAY,IAC7CuG,EAA6B,IAAIvG,YAAY,IACtCwG,EAAO,SAAAC,IAAAjZ,EAAAA,EAAAA,GAAAgZ,EAAAC,GAAA,IAAA7W,GAAAnC,EAAAA,EAAAA,GAAA+Y,GAsBlB,SAAAA,IAAA,IAAArW,EAFoB,OAEpBzC,EAAAA,EAAAA,GAAA,KAAA8Y,IACErW,EAAAP,EAAAU,KAAA,KAAM,IAAK,GAAI,IAAI,IAlBrBuT,GAAK,WACL1T,EAAA2T,IAAK,UACL3T,EAAA8U,IAAK,WACL9U,EAAA+U,IAAK,WACL/U,EAAAoV,GAAK,WACLpV,EAAAiV,IAAK,SACLjV,EAAAwV,IAAK,WACLxV,EAAAsV,GAAK,WACLtV,EAAA0V,GAAK,WACL1V,EAAA4V,IAAK,WACL5V,EAAAuW,IAAK,WACLvW,EAAAwW,GAAK,UACLxW,EAAAyW,GAAK,UACLzW,EAAA0W,IAAK,SACL1W,EAAA2W,GAAK,WACL3W,EAAA4W,GAAK,UAAe5W,CAIpB,CA4GC,OA3GDxC,EAAAA,EAAAA,GAAA6Y,EAAA,EAAA5X,IAAA,MAAAC,MACU,WAKR,MAAO,CADoEgS,KAAnEgD,GAAmEhD,KAA/DiD,GAA+DjD,KAA3DoE,GAA2DpE,KAAvDqE,GAAuDrE,KAAnD0E,GAAmD1E,KAA/CuE,GAA+CvE,KAA3C8E,GAA2C9E,KAAvC4E,GAAuC5E,KAAnCgF,GAAmChF,KAA/BkF,GAA+BlF,KAA3B6F,GAA2B7F,KAAvB8F,GAAuB9F,KAAnB+F,GAAmB/F,KAAfgG,GAAehG,KAAXiG,GAAWjG,KAAPkG,GAEtE,GACA,CAAAnY,IAAA,MAAAC,MACU,SACRgV,EAAYC,EAAYmB,EAAYC,EAAYK,EAAYH,EAAYO,EAAYF,EACpFI,EAAYE,EAAYW,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,GAEpFlG,KAAKgD,GAAU,EAALA,EACVhD,KAAKiD,GAAU,EAALA,EACVjD,KAAKoE,GAAU,EAALA,EACVpE,KAAKqE,GAAU,EAALA,EACVrE,KAAK0E,GAAU,EAALA,EACV1E,KAAKuE,GAAU,EAALA,EACVvE,KAAK8E,GAAU,EAALA,EACV9E,KAAK4E,GAAU,EAALA,EACV5E,KAAKgF,GAAU,EAALA,EACVhF,KAAKkF,GAAU,EAALA,EACVlF,KAAK6F,GAAU,EAALA,EACV7F,KAAK8F,GAAU,EAALA,EACV9F,KAAK+F,GAAU,EAALA,EACV/F,KAAKgG,GAAU,EAALA,EACVhG,KAAKiG,GAAU,EAALA,EACVjG,KAAKkG,GAAU,EAALA,CACZ,GAAC,CAAAnY,IAAA,UAAAC,MACS,SAAQiT,EAAgBhT,GAEhC,IAAK,IAAIoH,EAAI,EAAGA,EAAI,GAAIA,IAAKpH,GAAU,EACrCwX,EAAWpQ,GAAK4L,EAAKkF,UAAUlY,GAC/ByX,EAAWrQ,GAAK4L,EAAKkF,UAAWlY,GAAU,GAE5C,IAAK,IAAIoH,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAE5B,IAAM+Q,EAA4B,EAArBX,EAAWpQ,EAAI,IACtBgR,EAA4B,EAArBX,EAAWrQ,EAAI,IACtBiR,EAAMnB,EAAAA,OAAWiB,EAAMC,EAAM,GAAKlB,EAAAA,OAAWiB,EAAMC,EAAM,GAAKlB,EAAAA,MAAUiB,EAAMC,EAAM,GACpFE,EAAMpB,EAAAA,OAAWiB,EAAMC,EAAM,GAAKlB,EAAAA,OAAWiB,EAAMC,EAAM,GAAKlB,EAAAA,MAAUiB,EAAMC,EAAM,GAEpFG,EAA0B,EAApBf,EAAWpQ,EAAI,GACrBoR,EAA0B,EAApBf,EAAWrQ,EAAI,GACrBqR,EAAMvB,EAAAA,OAAWqB,EAAKC,EAAK,IAAMtB,EAAAA,OAAWqB,EAAKC,EAAK,IAAMtB,EAAAA,MAAUqB,EAAKC,EAAK,GAChFE,EAAMxB,EAAAA,OAAWqB,EAAKC,EAAK,IAAMtB,EAAAA,OAAWqB,EAAKC,EAAK,IAAMtB,EAAAA,MAAUqB,EAAKC,EAAK,GAEhFG,EAAOzB,EAAAA,MAAUoB,EAAKI,EAAKjB,EAAWrQ,EAAI,GAAIqQ,EAAWrQ,EAAI,KAC7DwR,EAAO1B,EAAAA,MAAUyB,EAAMN,EAAKI,EAAKjB,EAAWpQ,EAAI,GAAIoQ,EAAWpQ,EAAI,KACzEoQ,EAAWpQ,GAAY,EAAPwR,EAChBnB,EAAWrQ,GAAY,EAAPuR,EAIlB,IAFA,IAAM5D,EAAmEhD,KAAnEgD,GAAIC,EAA+DjD,KAA/DiD,GAAImB,EAA2DpE,KAA3DoE,GAAIC,EAAuDrE,KAAvDqE,GAAIK,EAAmD1E,KAAnD0E,GAAIH,EAA+CvE,KAA/CuE,GAAIO,EAA2C9E,KAA3C8E,GAAIF,EAAuC5E,KAAvC4E,GAAII,EAAmChF,KAAnCgF,GAAIE,EAA+BlF,KAA/BkF,GAAIW,EAA2B7F,KAA3B6F,GAAIC,EAAuB9F,KAAvB8F,GAAIC,EAAmB/F,KAAnB+F,GAAIC,EAAehG,KAAfgG,GAAIC,EAAWjG,KAAXiG,GAAIC,EAAOlG,KAAPkG,GAEzD7Q,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,IAAMyR,EAAU3B,EAAAA,OAAWH,EAAIE,EAAI,IAAMC,EAAAA,OAAWH,EAAIE,EAAI,IAAMC,EAAAA,OAAWH,EAAIE,EAAI,IAC/E6B,EAAU5B,EAAAA,OAAWH,EAAIE,EAAI,IAAMC,EAAAA,OAAWH,EAAIE,EAAI,IAAMC,EAAAA,OAAWH,EAAIE,EAAI,IAE/E8B,EAAQhC,EAAKa,GAAQb,EAAKe,EAC1BkB,EAAQ/B,EAAKY,GAAQZ,EAAKc,EAG1BkB,EAAO/B,EAAAA,MAAUe,EAAIa,EAASE,EAAMzB,EAAUnQ,GAAIqQ,EAAWrQ,IAC7D8R,EAAMhC,EAAAA,MAAU+B,EAAMjB,EAAIa,EAASE,EAAMzB,EAAUlQ,GAAIoQ,EAAWpQ,IAClE+R,EAAa,EAAPF,EAENG,EAAUlC,EAAAA,OAAWnC,EAAIC,EAAI,IAAMkC,EAAAA,OAAWnC,EAAIC,EAAI,IAAMkC,EAAAA,OAAWnC,EAAIC,EAAI,IAC/EqE,EAAUnC,EAAAA,OAAWnC,EAAIC,EAAI,IAAMkC,EAAAA,OAAWnC,EAAIC,EAAI,IAAMkC,EAAAA,OAAWnC,EAAIC,EAAI,IAC/EsE,EAAQvE,EAAKoB,EAAOpB,EAAK0B,EAAON,EAAKM,EACrC8C,EAAQvE,EAAKoB,EAAOpB,EAAKsB,EAAOF,EAAKE,EAC3C0B,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALF,EACLG,EAAU,EAALF,EACLD,EAAU,EAALb,EACLc,EAAU,EAALZ,EAAO,IAAAuC,EACQtC,EAAAA,IAAa,EAALL,EAAa,EAALF,EAAc,EAANuC,EAAe,EAANC,GAA/CpC,EAAEyC,EAAL1F,EAAUmD,EAAEuC,EAALzF,EACV8C,EAAU,EAALJ,EACLE,EAAU,EAALL,EACLG,EAAU,EAALN,EACLG,EAAU,EAALF,EACLD,EAAU,EAALpB,EACLqB,EAAU,EAALpB,EACL,IAAMyE,EAAMvC,EAAAA,MAAUiC,EAAKE,EAASE,GACpCxE,EAAKmC,EAAAA,MAAUuC,EAAKP,EAAKE,EAASE,GAClCtE,EAAW,EAANyE,EAEP,IAAAC,EACoBxC,EAAAA,IAAkB,EAAVnF,KAAKgD,GAAkB,EAAVhD,KAAKiD,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAE2E,EAAL5F,EAAUkB,EAAE0E,EAAL3F,EAAC,IAAA4F,EACSzC,EAAAA,IAAkB,EAAVnF,KAAKoE,GAAkB,EAAVpE,KAAKqE,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAEwD,EAAL7F,EAAUsC,EAAEuD,EAAL5F,EAAC,IAAA6F,EACS1C,EAAAA,IAAkB,EAAVnF,KAAK0E,GAAkB,EAAV1E,KAAKuE,GAAa,EAALG,EAAa,EAALH,GAAxDG,EAAEmD,EAAL9F,EAAUwC,EAAEsD,EAAL7F,EAAC,IAAA8F,EACS3C,EAAAA,IAAkB,EAAVnF,KAAK8E,GAAkB,EAAV9E,KAAK4E,GAAa,EAALE,EAAa,EAALF,GAAxDE,EAAEgD,EAAL/F,EAAU6C,EAAEkD,EAAL9F,EAAC,IAAA+F,EACS5C,EAAAA,IAAkB,EAAVnF,KAAKgF,GAAkB,EAAVhF,KAAKkF,GAAa,EAALF,EAAa,EAALE,GAAxDF,EAAE+C,EAALhG,EAAUmD,EAAE6C,EAAL/F,EAAC,IAAAgG,GACS7C,EAAAA,IAAkB,EAAVnF,KAAK6F,GAAkB,EAAV7F,KAAK8F,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAEmC,GAALjG,EAAU+D,EAAEkC,GAALhG,EAAC,IAAAiG,GACS9C,EAAAA,IAAkB,EAAVnF,KAAK+F,GAAkB,EAAV/F,KAAKgG,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAEkC,GAALlG,EAAUiE,EAAEiC,GAALjG,EAAC,IAAAkG,GACS/C,EAAAA,IAAkB,EAAVnF,KAAKiG,GAAkB,EAAVjG,KAAKkG,GAAa,EAALD,EAAa,EAALC,GAAxDD,EAAEiC,GAALnG,EAAUmE,EAAEgC,GAALlG,EACVhC,KAAKF,IAAIkD,EAAIC,EAAImB,EAAIC,EAAIK,EAAIH,EAAIO,EAAIF,EAAII,EAAIE,EAAIW,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACvE,GAAC,CAAAnY,IAAA,aAAAC,MACS,WACRyX,EAAWjE,KAAK,GAChBkE,EAAWlE,KAAK,EAClB,GAAC,CAAAzT,IAAA,UAAAC,MACD,WACEgS,KAAKzS,OAAOiU,KAAK,GACjBxB,KAAKF,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACxD,KAAC6F,CAAA,CApIiB,CAAQ/E,GAkNfuH,EAAyBjI,GAAgB,kBAAM,IAAIyF,CAAQ,IC7OlEyC,EAAMzG,OAAO,GACb0G,EAAM1G,OAAO,GACb2G,EAAM3G,OAAO,GACb/C,EAAM,SAACC,GAAM,OAAsBA,aAAa3R,UAAU,EAW1Dqb,EAAwBvS,MAAM1I,KAAK,CAAEG,OAAQ,MAAO,SAAC+a,EAAGnT,GAAC,OAC7DA,EAAEiH,SAAS,IAAImM,SAAS,EAAG,IAAI,IAK3B,SAAUC,EAAWhL,GACzB,IAAKkB,EAAIlB,GAAQ,MAAM,IAAIxO,MAAM,uBAGjC,IADA,IAAIyZ,EAAM,GACDtT,EAAI,EAAGA,EAAIqI,EAAMjQ,OAAQ4H,IAChCsT,GAAOJ,EAAM7K,EAAMrI,IAErB,OAAOsT,CACT,CAEM,SAAUC,EAAoBC,GAClC,IAAMF,EAAME,EAAIvM,SAAS,IACzB,OAAoB,EAAbqM,EAAIlb,OAAa,IAAHgQ,OAAOkL,GAAQA,CACtC,CAEM,SAAUG,EAAYH,GAC1B,GAAmB,kBAARA,EAAkB,MAAM,IAAIzZ,MAAM,mCAAqCyZ,GAElF,OAAOhH,OAAe,KAARgH,EAAa,IAAM,KAAHlL,OAAQkL,GACxC,CAKM,SAAUI,EAAWJ,GACzB,GAAmB,kBAARA,EAAkB,MAAM,IAAIzZ,MAAM,mCAAqCyZ,GAClF,IAAMzH,EAAMyH,EAAIlb,OAChB,GAAIyT,EAAM,EAAG,MAAM,IAAIhS,MAAM,0DAA4DgS,GAEzF,IADA,IAAM8H,EAAQ,IAAI9b,WAAWgU,EAAM,GAC1B7L,EAAI,EAAGA,EAAI2T,EAAMvb,OAAQ4H,IAAK,CACrC,IAAM4T,EAAQ,EAAJ5T,EACJ6T,EAAUP,EAAIxM,MAAM8M,EAAGA,EAAI,GAC3BE,EAAOtb,OAAOub,SAASF,EAAS,IACtC,GAAIrb,OAAOwb,MAAMF,IAASA,EAAO,EAAG,MAAM,IAAIja,MAAM,yBACpD8Z,EAAM3T,GAAK8T,EAEb,OAAOH,CACT,CAGM,SAAUM,GAAgB5L,GAC9B,OAAOoL,EAAYJ,EAAWhL,GAChC,CACM,SAAU6L,GAAgB7L,GAC9B,IAAKkB,EAAIlB,GAAQ,MAAM,IAAIxO,MAAM,uBACjC,OAAO4Z,EAAYJ,EAAWxb,WAAWI,KAAKoQ,GAAO8L,WACvD,CAEM,SAAUC,GAAgBnT,EAAoB4K,GAClD,OAAO6H,EAAWzS,EAAEgG,SAAS,IAAImM,SAAe,EAANvH,EAAS,KACrD,CACM,SAAUwI,GAAgBpT,EAAoB4K,GAClD,OAAOuI,GAAgBnT,EAAG4K,GAAKsI,SACjC,CAEM,SAAUG,GAAmBrT,GACjC,OAAOyS,EAAWH,EAAoBtS,GACxC,CAWM,SAAUsT,GAAYC,EAAelB,EAAUmB,GACnD,IAAIvH,EACJ,GAAmB,kBAARoG,EACT,IACEpG,EAAMwG,EAAWJ,GACjB,MAAOjS,GACP,MAAM,IAAIxH,MAAM,GAADuO,OAAIoM,EAAK,oCAAApM,OAAmCkL,EAAG,cAAAlL,OAAa/G,QAExE,KAAIkI,EAAI+J,GAKb,MAAM,IAAIzZ,MAAM,GAADuO,OAAIoM,EAAK,sCAFxBtH,EAAMrV,WAAWI,KAAKqb,GAIxB,IAAMzH,EAAMqB,EAAI9U,OAChB,GAA8B,kBAAnBqc,GAA+B5I,IAAQ4I,EAChD,MAAM,IAAI5a,MAAM,GAADuO,OAAIoM,EAAK,cAAApM,OAAaqM,EAAc,gBAAArM,OAAeyD,IACpE,OAAOqB,CACT,CAKM,SAAU9C,KAAmC,QAAA9B,EAAA1O,UAAAxB,OAApBiS,EAAoB,IAAA1J,MAAA2H,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAApB6B,EAAoB7B,GAAA5O,UAAA4O,GACjD,IAAM8B,EAAI,IAAIzS,WAAWwS,EAAOlK,QAAO,SAACgG,EAAKqD,GAAC,OAAKrD,EAAMqD,EAAEpR,MAAM,GAAE,IAC/DmS,EAAM,EAMV,OALAF,EAAOG,SAAQ,SAAChB,GACd,IAAKD,EAAIC,GAAI,MAAM,IAAI3P,MAAM,uBAC7ByQ,EAAEG,IAAIjB,EAAGe,GACTA,GAAOf,EAAEpR,MACX,IACOkS,CACT,CAEM,SAAUoK,GAAWC,EAAgBC,GAEzC,GAAID,EAAGvc,SAAWwc,EAAGxc,OAAQ,OAAO,EACpC,IAAK,IAAI4H,EAAI,EAAGA,EAAI2U,EAAGvc,OAAQ4H,IAAK,GAAI2U,EAAG3U,KAAO4U,EAAG5U,GAAI,OAAO,EAChE,OAAO,CACT,CASM,SAAU+J,GAAYC,GAC1B,GAAmB,kBAARA,EAAkB,MAAM,IAAInQ,MAAM,oCAADuO,cAA4C4B,IACxF,OAAO,IAAInS,YAAW,IAAIoS,aAAchP,OAAO+O,GACjD,CAQM,SAAU6K,GAAO5T,GACrB,IAAI4K,EACJ,IAAKA,EAAM,EAAG5K,EAAI8R,EAAK9R,IAAM+R,EAAKnH,GAAO,GACzC,OAAOA,CACT,CAOM,SAAUiJ,GAAO7T,EAAW0K,GAChC,OAAQ1K,GAAKqL,OAAOX,GAAQqH,CAC9B,CAKO,IAAM+B,GAAS,SAAC9T,EAAW0K,EAAahT,GAC7C,OAAOsI,GAAMtI,EAAQqa,EAAMD,IAAQzG,OAAOX,EAC5C,EAMaqJ,GAAU,SAAC/T,GAAS,OAAMgS,GAAO3G,OAAOrL,EAAI,IAAM+R,CAAG,EAI5DiC,GAAM,SAAC9K,GAAU,OAAK,IAAItS,WAAWsS,EAAK,EAC1C+K,GAAO,SAACxL,GAAQ,OAAK7R,WAAWI,KAAKyR,EAAI,EASzC,SAAUyL,GACdC,EACAC,EACAC,GAEA,GAAuB,kBAAZF,GAAwBA,EAAU,EAAG,MAAM,IAAIvb,MAAM,4BAChE,GAAwB,kBAAbwb,GAAyBA,EAAW,EAAG,MAAM,IAAIxb,MAAM,6BAClE,GAAsB,oBAAXyb,EAAuB,MAAM,IAAIzb,MAAM,6BAElD,IAAIuG,EAAI6U,GAAIG,GACRG,EAAIN,GAAIG,GACRpV,EAAI,EACFwV,EAAQ,WACZpV,EAAE+L,KAAK,GACPoJ,EAAEpJ,KAAK,GACPnM,EAAI,CACN,EACM0M,EAAI,WAAH,QAAA+I,EAAA7b,UAAAxB,OAAOR,EAAe,IAAA+I,MAAA8U,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAf9d,EAAe8d,GAAA9b,UAAA8b,GAAA,OAAKJ,EAAM3b,WAAC,EAAD,CAAC4b,EAAGnV,GAACgI,OAAKxQ,GAAE,EAC9C+d,EAAS,WAAiB,IAAhBC,EAAIhc,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGqb,KAErBM,EAAI7I,EAAEwI,GAAK,CAAC,IAAQU,GACpBxV,EAAIsM,IACgB,IAAhBkJ,EAAKxd,SACTmd,EAAI7I,EAAEwI,GAAK,CAAC,IAAQU,GACpBxV,EAAIsM,IACN,EACMmJ,EAAM,WAEV,GAAI7V,KAAO,IAAM,MAAM,IAAInG,MAAM,2BAGjC,IAFA,IAAIgS,EAAM,EACJ1C,EAAoB,GACnB0C,EAAMwJ,GAAU,CAErB,IAAMS,GADN1V,EAAIsM,KACS5F,QACbqC,EAAIlJ,KAAK6V,GACTjK,GAAOzL,EAAEhI,OAEX,OAAOgS,GAAWzQ,WAAC,EAAGwP,EACxB,EASA,OARiB,SAACyM,EAAkBG,GAClCP,IACAG,EAAOC,GAEP,IADA,IAAI1I,OAAqB/S,IAChB+S,EAAM6I,EAAKF,OAASF,IAE7B,OADAH,IACOtI,CACT,CAEF,CAIA,IAAM8I,GAAe,CACnBC,OAAQ,SAACC,GAAQ,MAAoB,kBAARA,CAAgB,EAC7CC,SAAU,SAACD,GAAQ,MAAoB,oBAARA,CAAkB,EACjDE,QAAS,SAACF,GAAQ,MAAoB,mBAARA,CAAiB,EAC/CG,OAAQ,SAACH,GAAQ,MAAoB,kBAARA,CAAgB,EAC7CI,mBAAoB,SAACJ,GAAQ,MAAoB,kBAARA,GAAoBA,aAAere,UAAU,EACtFsQ,cAAe,SAAC+N,GAAQ,OAAK1d,OAAO2P,cAAc+N,EAAI,EACtDvC,MAAO,SAACuC,GAAQ,OAAKvV,MAAMC,QAAQsV,EAAI,EACvCK,MAAO,SAACL,EAAUM,GAAW,OAAMA,EAAeC,GAAGC,QAAQR,EAAI,EACjExN,KAAM,SAACwN,GAAQ,MAAoB,oBAARA,GAAsB1d,OAAO2P,cAAc+N,EAAIvN,UAAU,GAMhF,SAAUgO,GACdH,EACAI,GAgBA,IAf6B,IAA7BC,EAAAjd,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAA2B,CAAC,EAEtBkd,EAAa,SAACC,EAAoBC,EAAiBC,GACvD,IAAMC,EAAWlB,GAAagB,GAC9B,GAAwB,oBAAbE,EACT,MAAM,IAAIrd,MAAM,sBAADuO,OAAuB4O,EAAI,yBAE5C,IAAMd,EAAMM,EAAOO,GACnB,KAAIE,QAAsB9c,IAAR+b,KACbgB,EAAShB,EAAKM,GACjB,MAAM,IAAI3c,MAAM,iBAADuO,OACIf,OAAO0P,GAAU,KAAA3O,OAAI8N,EAAG,MAAA9N,cAAY8N,EAAG,gBAAA9N,OAAe4O,GAG7E,EACAG,EAAA,EAAAC,EAAgCre,OAAOse,QAAQT,GAAWO,EAAAC,EAAAhf,OAAA+e,IAAA,CAArD,IAAAG,GAAArH,EAAAA,EAAAA,GAAAmH,EAAAD,GAAA,GAAuDL,EAAvCQ,EAAA,GAAMA,EAAA,IAA8D,EAAO,CAChG,IAAK,IAALC,EAAA,EAAAC,EAAgCze,OAAOse,QAAQR,GAAcU,EAAAC,EAAApf,OAAAmf,IAAA,CAAxD,IAAAE,GAAAxH,EAAAA,EAAAA,GAAAuH,EAAAD,GAAA,GAA0DT,EAA1CW,EAAA,GAAMA,EAAA,IAAiE,EAAM,CAClG,OAAOjB,CACT,CC7QA,IAAMzD,GAAMzG,OAAO,GAAI0G,GAAM1G,OAAO,GAAI2G,GAAM3G,OAAO,GAAIoL,GAAMpL,OAAO,GAEhEqL,GAAMrL,OAAO,GAAIsL,GAAMtL,OAAO,GAAIuL,GAAMvL,OAAO,GAEzCA,OAAO,GAAWA,OAAO,IAG/B,SAAUwL,GAAItO,EAAW5R,GAC7B,IAAMmgB,EAASvO,EAAI5R,EACnB,OAAOmgB,GAAUhF,GAAMgF,EAASngB,EAAImgB,CACtC,CAQM,SAAUtb,GAAI+W,EAAawE,EAAeC,GAC9C,GAAIA,GAAUlF,IAAOiF,EAAQjF,GAAK,MAAM,IAAIlZ,MAAM,6BAClD,GAAIoe,IAAWjF,GAAK,OAAOD,GAE3B,IADA,IAAI7F,EAAM8F,GACHgF,EAAQjF,IACTiF,EAAQhF,KAAK9F,EAAOA,EAAMsG,EAAOyE,GACrCzE,EAAOA,EAAMA,EAAOyE,EACpBD,IAAUhF,GAEZ,OAAO9F,CACT,CAGM,SAAUgL,GAAKC,EAAWH,EAAeC,GAE7C,IADA,IAAI/K,EAAMiL,EACHH,KAAUjF,IACf7F,GAAOA,EACPA,GAAO+K,EAET,OAAO/K,CACT,CAGM,SAAUkL,GAAOlQ,EAAgB+P,GACrC,GAAI/P,IAAW6K,IAAOkF,GAAUlF,GAC9B,MAAM,IAAIlZ,MAAM,6CAADuO,OAA8CF,EAAM,SAAAE,OAAQ6P,IAQ7E,IAJA,IAAIzO,EAAIsO,GAAI5P,EAAQ+P,GAChBrgB,EAAIqgB,EAEJE,EAAIpF,GAAKsF,EAAIrF,GAAKsF,EAAItF,GAAK5S,EAAI2S,GAC5BvJ,IAAMuJ,IAAK,CAEhB,IAAMwF,EAAI3gB,EAAI4R,EACRc,EAAI1S,EAAI4R,EACRgP,EAAIL,EAAIG,EAAIC,EACZtX,EAAIoX,EAAIjY,EAAImY,EAElB3gB,EAAI4R,EAAGA,EAAIc,EAAG6N,EAAIG,EAAGD,EAAIjY,EAAGkY,EAAIE,EAAGpY,EAAIa,EAGzC,GADYrJ,IACAob,GAAK,MAAM,IAAInZ,MAAM,0BACjC,OAAOie,GAAIK,EAAGF,EAChB,CAkEM,SAAUQ,GAAOC,GAMrB,GAAIA,EAAIf,KAAQD,GAAK,CAKnB,IAAMiB,GAAUD,EAAI1F,IAAO2E,GAC3B,OAAO,SAAsBlB,EAAexV,GAC1C,IAAM2X,EAAOnC,EAAGha,IAAIwE,EAAG0X,GAEvB,IAAKlC,EAAGoC,IAAIpC,EAAGqC,IAAIF,GAAO3X,GAAI,MAAM,IAAIpH,MAAM,2BAC9C,OAAO+e,CACT,EAIF,GAAIF,EAAIb,KAAQD,GAAK,CACnB,IAAMmB,GAAML,EAAId,IAAOC,GACvB,OAAO,SAAsBpB,EAAexV,GAC1C,IAAM+X,EAAKvC,EAAGwC,IAAIhY,EAAGgS,IACf7S,EAAIqW,EAAGha,IAAIuc,EAAID,GACfG,EAAKzC,EAAGwC,IAAIhY,EAAGb,GACfJ,EAAIyW,EAAGwC,IAAIxC,EAAGwC,IAAIC,EAAIjG,IAAM7S,GAC5BwY,EAAOnC,EAAGwC,IAAIC,EAAIzC,EAAG0C,IAAInZ,EAAGyW,EAAG2C,MACrC,IAAK3C,EAAGoC,IAAIpC,EAAGqC,IAAIF,GAAO3X,GAAI,MAAM,IAAIpH,MAAM,2BAC9C,OAAO+e,CACT,EA2BF,OAlHI,SAAwBF,GAM5B,IAEIW,EAAWC,EAAWC,EAFpBC,GAAad,EAAI1F,IAAOC,GAK9B,IAAKoG,EAAIX,EAAI1F,GAAKsG,EAAI,EAAGD,EAAIpG,KAAQF,GAAKsG,GAAKpG,GAAKqG,KAGpD,IAAKC,EAAItG,GAAKsG,EAAIb,GAAKjc,GAAI8c,EAAGC,EAAWd,KAAOA,EAAI1F,GAAKuG,KAGzD,GAAU,IAAND,EAAS,CACX,IAAMX,GAAUD,EAAI1F,IAAO2E,GAC3B,OAAO,SAAwBlB,EAAexV,GAC5C,IAAM2X,EAAOnC,EAAGha,IAAIwE,EAAG0X,GACvB,IAAKlC,EAAGoC,IAAIpC,EAAGqC,IAAIF,GAAO3X,GAAI,MAAM,IAAIpH,MAAM,2BAC9C,OAAO+e,CACT,EAIF,IAAMa,GAAUJ,EAAIrG,IAAOC,GAC3B,OAAO,SAAwBwD,EAAexV,GAE5C,GAAIwV,EAAGha,IAAIwE,EAAGuY,KAAe/C,EAAGiD,IAAIjD,EAAG2C,KAAM,MAAM,IAAIvf,MAAM,2BAO7D,IANA,IAAIyQ,EAAIgP,EAEJK,EAAIlD,EAAGha,IAAIga,EAAGwC,IAAIxC,EAAG2C,IAAKG,GAAIF,GAC9BlB,EAAI1B,EAAGha,IAAIwE,EAAGwY,GACd7hB,EAAI6e,EAAGha,IAAIwE,EAAGoY,IAEV5C,EAAGoC,IAAIjhB,EAAG6e,EAAG2C,MAAM,CACzB,GAAI3C,EAAGoC,IAAIjhB,EAAG6e,EAAGmD,MAAO,OAAOnD,EAAGmD,KAGlC,IADA,IAAIpB,EAAI,EACCqB,EAAKpD,EAAGqC,IAAIlhB,GAAI4gB,EAAIlO,IACvBmM,EAAGoC,IAAIgB,EAAIpD,EAAG2C,KADYZ,IAE9BqB,EAAKpD,EAAGqC,IAAIe,GAGd,IAAMC,EAAKrD,EAAGha,IAAIkd,EAAG3G,IAAO1G,OAAOhC,EAAIkO,EAAI,IAC3CmB,EAAIlD,EAAGqC,IAAIgB,GACX3B,EAAI1B,EAAGwC,IAAId,EAAG2B,GACdliB,EAAI6e,EAAGwC,IAAIrhB,EAAG+hB,GACdrP,EAAIkO,EAEN,OAAOL,CACT,CACF,CA4DS4B,CAAcrB,EACvB,CAGO,IAAMsB,GAAe,SAACxG,EAAayE,GAAc,OAAMH,GAAItE,EAAKyE,GAAUjF,MAASA,EAAG,EA6CvFiH,GAAe,CACnB,SAAU,UAAW,MAAO,MAAO,MAAO,OAAQ,MAClD,MAAO,MAAO,MAAO,MAAO,MAAO,MACnC,OAAQ,OAAQ,OAAQ,QA2EpB,SAAUC,GAAQjZ,EAAWkZ,GAEjC,IAAMC,OAA6BjgB,IAAfggB,EAA2BA,EAAalZ,EAAEgG,SAAS,GAAG7O,OAE1E,MAAO,CAAE+hB,WAAYC,EAAaC,YADd/f,KAAKggB,KAAKF,EAAc,GAE9C,CAeM,SAAUG,GACdC,EACA3F,GAEmC,IADnCnJ,EAAI9R,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,IAAAA,UAAA,GACJ6gB,EAAA7gB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAiC,CAAC,EAElC,GAAI4gB,GAASzH,GAAK,MAAM,IAAIlZ,MAAM,iCAADuO,OAAkCoS,IACnE,IAAAE,EAAiDR,GAAQM,EAAO3F,GAA5C8F,EAAID,EAAhBP,WAA+BS,EAAKF,EAAlBL,YAC1B,GAAIO,EAAQ,KAAM,MAAM,IAAI/gB,MAAM,mDAClC,IAAMghB,EAAQpC,GAAO+B,GACflZ,EAAuBvI,OAAO+hB,OAAO,CACzCN,MAAAA,EACAG,KAAAA,EACAC,MAAAA,EACAG,KAAM/F,GAAQ2F,GACdf,KAAM7G,GACNqG,IAAKpG,GACLha,OAAQ,SAACwa,GAAG,OAAKsE,GAAItE,EAAKgH,EAAM,EAChC9D,QAAS,SAAClD,GACR,GAAmB,kBAARA,EACT,MAAM,IAAI3Z,MAAM,+CAADuO,cAAuDoL,IACxE,OAAOT,IAAOS,GAAOA,EAAMgH,CAC7B,EACAQ,IAAK,SAACxH,GAAG,OAAKA,IAAQT,EAAG,EACzBkI,MAAO,SAACzH,GAAG,OAAMA,EAAMR,MAASA,EAAG,EACnC0G,IAAK,SAAClG,GAAG,OAAKsE,IAAKtE,EAAKgH,EAAM,EAC9B3B,IAAK,SAACqC,EAAKC,GAAG,OAAKD,IAAQC,CAAG,EAE9BrC,IAAK,SAACtF,GAAG,OAAKsE,GAAItE,EAAMA,EAAKgH,EAAM,EACnC1L,IAAK,SAACoM,EAAKC,GAAG,OAAKrD,GAAIoD,EAAMC,EAAKX,EAAM,EACxCrB,IAAK,SAAC+B,EAAKC,GAAG,OAAKrD,GAAIoD,EAAMC,EAAKX,EAAM,EACxCvB,IAAK,SAACiC,EAAKC,GAAG,OAAKrD,GAAIoD,EAAMC,EAAKX,EAAM,EACxC/d,IAAK,SAAC+W,EAAKwE,GAAK,OAzGd,SAAmB1W,EAAckS,EAAQwE,GAG7C,GAAIA,EAAQjF,GAAK,MAAM,IAAIlZ,MAAM,sBACjC,GAAIme,IAAUjF,GAAK,OAAOzR,EAAE8X,IAC5B,GAAIpB,IAAUhF,GAAK,OAAOQ,EAG1B,IAFA,IAAI4H,EAAI9Z,EAAE8X,IACNiC,EAAI7H,EACDwE,EAAQjF,IACTiF,EAAQhF,KAAKoI,EAAI9Z,EAAE2X,IAAImC,EAAGC,IAC9BA,EAAI/Z,EAAEwX,IAAIuC,GACVrD,IAAUhF,GAEZ,OAAOoI,CACT,CA2FyBE,CAAMha,EAAGkS,EAAKwE,EAAM,EACzCuD,IAAK,SAACL,EAAKC,GAAG,OAAKrD,GAAIoD,EAAM9C,GAAO+C,EAAKX,GAAQA,EAAM,EAGvDgB,KAAM,SAAChI,GAAG,OAAKA,EAAMA,CAAG,EACxBiI,KAAM,SAACP,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAC7BO,KAAM,SAACR,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAC7BQ,KAAM,SAACT,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAE7BS,IAAK,SAACpI,GAAG,OAAK4E,GAAO5E,EAAKgH,EAAM,EAChCqB,KAAMpB,EAAMoB,MAAS,SAAC5a,GAAC,OAAK4Z,EAAMvZ,EAAGL,EAAE,EACvC6a,YAAa,SAACrO,GAAG,OAhGf,SAA2BnM,EAAcya,GAC7C,IAAM5Q,EAAM,IAAIxK,MAAMob,EAAK3jB,QAErB4jB,EAAiBD,EAAK5b,QAAO,SAACU,EAAK2S,EAAKxT,GAC5C,OAAIsB,EAAE0Z,IAAIxH,GAAa3S,GACvBsK,EAAInL,GAAKa,EACFS,EAAE2X,IAAIpY,EAAK2S,GACpB,GAAGlS,EAAE8X,KAEC6C,EAAW3a,EAAEsa,IAAII,GAOvB,OALAD,EAAKG,aAAY,SAACrb,EAAK2S,EAAKxT,GAC1B,OAAIsB,EAAE0Z,IAAIxH,GAAa3S,GACvBsK,EAAInL,GAAKsB,EAAE2X,IAAIpY,EAAKsK,EAAInL,IACjBsB,EAAE2X,IAAIpY,EAAK2S,GACpB,GAAGyI,GACI9Q,CACT,CA+E0BgR,CAAc7a,EAAGmM,EAAI,EAG3C2O,KAAM,SAAC5S,EAAG5R,EAAGykB,GAAC,OAAMA,EAAIzkB,EAAI4R,CAAC,EAC7BU,QAAS,SAACsJ,GAAG,OAAM9H,EAAO2I,GAAgBb,EAAKoH,GAASxG,GAAgBZ,EAAKoH,EAAM,EACnF0B,UAAW,SAACjU,GACV,GAAIA,EAAMjQ,SAAWwiB,EACnB,MAAM,IAAI/gB,MAAM,0BAADuO,OAA2BwS,EAAK,UAAAxS,OAASC,EAAMjQ,SAChE,OAAOsT,EAAOwI,GAAgB7L,GAAS4L,GAAgB5L,EACzD,IAEF,OAAOtP,OAAO+hB,OAAOxZ,EACvB,CAwCM,SAAUib,GAAoBC,GAClC,GAA0B,kBAAfA,EAAyB,MAAM,IAAI3iB,MAAM,8BACpD,IAAM4iB,EAAYD,EAAWvV,SAAS,GAAG7O,OACzC,OAAOkC,KAAKggB,KAAKmC,EAAY,EAC/B,CASM,SAAUC,GAAiBF,GAC/B,IAAMpkB,EAASmkB,GAAoBC,GACnC,OAAOpkB,EAASkC,KAAKggB,KAAKliB,EAAS,EACrC,CCrcA,IAAM2a,GAAMzG,OAAO,GACb0G,GAAM1G,OAAO,GAiCb,SAAUqQ,GAAyBN,EAAwB3W,GAC/D,IAAMkX,EAAkB,SAACC,EAAoBC,GAC3C,IAAMpD,EAAMoD,EAAKC,SACjB,OAAOF,EAAYnD,EAAMoD,CAC3B,EACME,EAAO,SAACC,GAGZ,MAAO,CAAEC,QAFO5iB,KAAKggB,KAAK5U,EAAOuX,GAAK,EAEpBE,WADF7iB,KAAAmC,IAAG,EAAMwgB,EAAI,GAE/B,EACA,MAAO,CACLL,gBAAAA,EAEAQ,aAAY,SAACC,EAAQpc,GAGnB,IAFA,IAAIma,EAAIiB,EAAEzC,KACNyB,EAAOgC,EACJpc,EAAI8R,IACL9R,EAAI+R,KAAKoI,EAAIA,EAAEtM,IAAIuM,IACvBA,EAAIA,EAAEiC,SACNrc,IAAM+R,GAER,OAAOoI,CACT,EAYAmC,iBAAgB,SAACF,EAAQJ,GAKvB,IAJA,IAAAO,EAAgCR,EAAKC,GAA7BC,EAAOM,EAAPN,QAASC,EAAUK,EAAVL,WACXM,EAAc,GAChBrC,EAAOiC,EACPK,EAAOtC,EACFuC,EAAS,EAAGA,EAAST,EAASS,IAAU,CAC/CD,EAAOtC,EACPqC,EAAOxd,KAAKyd,GAEZ,IAAK,IAAI1d,EAAI,EAAGA,EAAImd,EAAYnd,IAC9B0d,EAAOA,EAAK5O,IAAIsM,GAChBqC,EAAOxd,KAAKyd,GAEdtC,EAAIsC,EAAKJ,SAEX,OAAOG,CACT,EASAd,KAAI,SAACM,EAAWW,EAAkB3c,GAYhC,IATA,IAAA4c,EAAgCb,EAAKC,GAA7BC,EAAOW,EAAPX,QAASC,EAAUU,EAAVV,WAEb/B,EAAIiB,EAAEzC,KACNtY,EAAI+a,EAAEyB,KAEJC,EAAOzR,OAAOhS,KAAAmC,IAAA,EAAKwgB,GAAI,GACvBe,EAAS1jB,KAAAmC,IAAG,EAAKwgB,GACjBgB,EAAU3R,OAAO2Q,GAEdU,EAAS,EAAGA,EAAST,EAASS,IAAU,CAC/C,IAAM/kB,EAAS+kB,EAASR,EAEpBe,EAAQ1lB,OAAOyI,EAAI8c,GAGvB9c,IAAMgd,EAIFC,EAAQf,IACVe,GAASF,EACT/c,GAAK+R,IAWP,IAAMmL,EAAUvlB,EACVwlB,EAAUxlB,EAAS0B,KAAK+jB,IAAIH,GAAS,EACrCI,EAAQX,EAAS,IAAM,EACvBY,EAAQL,EAAQ,EACR,IAAVA,EAEF5c,EAAIA,EAAEwN,IAAI8N,EAAgB0B,EAAOV,EAAYO,KAE7C/C,EAAIA,EAAEtM,IAAI8N,EAAgB2B,EAAOX,EAAYQ,KAQjD,MAAO,CAAEhD,EAAAA,EAAG9Z,EAAAA,EACd,EAEAkd,WAAU,SAAC9F,EAAM+F,EAA6Bxd,EAAWyd,GAEvD,IAAMzB,EAAYvE,EAAEiG,cAAgB,EAEhCC,EAAOH,EAAezR,IAAI0L,GAO9B,OANKkG,IACHA,EAAOjU,KAAK4S,iBAAiB7E,EAAGuE,GACtB,IAANA,GACFwB,EAAehU,IAAIiO,EAAGgG,EAAUE,KAG7BjU,KAAKgS,KAAKM,EAAG2B,EAAM3d,EAC5B,EAEJ,CAgBM,SAAU4d,GAAqBC,GAgBnC,ODwDI,SAA2BvI,GAC/B,IAMMyG,EAAO/C,GAAa9Z,QAAO,SAAC4P,EAAKmG,GAErC,OADAnG,EAAImG,GAAO,WACJnG,CACT,GATgB,CACdyK,MAAO,SACPO,KAAM,SACNH,MAAO,gBACPD,KAAM,kBAMDhE,GAAeJ,EAAOyG,EAC/B,CCnFE+B,CAAcD,EAAMrI,IACpBE,GACEmI,EACA,CACE7d,EAAG,SACHyL,EAAG,SACHsS,GAAI,QACJC,GAAI,SAEN,CACE9E,WAAY,gBACZE,YAAa,kBAIVthB,OAAO+hB,QAAMoE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACjBhF,GAAQ4E,EAAM7d,EAAG6d,EAAM3E,aACvB2E,GACA,CAAE1D,EAAG0D,EAAMrI,GAAG+D,QAErB,CCjMA,IAAMzH,GAAMzG,OAAO,GAAI0G,GAAM1G,OAAO,GAAI2G,GAAM3G,OAAO,GAAIuL,GAAMvL,OAAO,GAgBhE6S,GAAiB,CAAEC,QAAQ,GAyE3B,SAAUC,GAAeC,GAC7B,IAAMC,EAxER,SAAsBT,GACpB,IAAM9B,EAAO6B,GAAcC,GAiB3B,OAhBAU,GACEV,EACA,CACEpW,KAAM,WACNc,EAAG,SACH6R,EAAG,SACHjQ,YAAa,YAEf,CACEqU,kBAAmB,WACnBC,OAAQ,WACRC,QAAS,WACTC,WAAY,aAIT7mB,OAAO+hB,QAAMoE,EAAAA,EAAAA,GAAC,CAAC,EAAIlC,GAC5B,CAqDgB6C,CAAaP,GAEzB7I,EAOE8I,EAPF9I,GACGqJ,EAMDP,EANFte,EACS8e,EAKPR,EALFQ,QACMC,EAIJT,EAJF7W,KACA0C,EAGEmU,EAHFnU,YACAiP,EAEEkF,EAFFlF,YACG4F,EACDV,EADF7S,EAEIqO,EAAO9H,IAAQ3G,OAAqB,EAAd+N,GAAmBrH,GACzCkN,EAAOzJ,EAAGzd,OAGV2mB,EACJJ,EAAMI,SACL,SAACrH,EAAWlY,GACX,IACE,MAAO,CAAEsW,SAAS,EAAM/d,MAAO8d,EAAGoF,KAAKvD,EAAI7B,EAAGmF,IAAIxb,KAClD,MAAOiB,GACP,MAAO,CAAEqV,SAAS,EAAO/d,MAAOoa,IAEpC,EACI0M,EAAoBF,EAAME,mBAAsB,SAACpX,GAAiB,OAAKA,CAAK,EAC5EqX,EACJH,EAAMG,QACL,SAACvV,EAAkBgW,EAAiBC,GACnC,GAAID,EAAI/nB,QAAUgoB,EAAQ,MAAM,IAAIvmB,MAAM,uCAC1C,OAAOsQ,CACT,EACIkW,EAAQ,SAACpf,GAAS,MAAkB,kBAANA,GAAkB8R,GAAM9R,CAAC,EACvDqf,EAAU,SAACrf,EAAWsf,GAAW,OAAKF,EAAMpf,IAAMof,EAAME,IAAQtf,EAAIsf,CAAG,EACvEC,EAAe,SAACvf,GAAS,OAAKA,IAAM8R,IAAOuN,EAAQrf,EAAG8Z,EAAK,EACjE,SAAS0F,EAAcxf,EAAWsf,GAEhC,GAAID,EAAQrf,EAAGsf,GAAM,OAAOtf,EAC5B,MAAM,IAAIpH,MAAM,2BAADuO,OAA4BmY,EAAG,UAAAnY,cAAgBnH,EAAC,KAAAmH,OAAInH,GACrE,CACA,SAASyf,EAAUzf,GAEjB,OAAOA,IAAM8R,GAAM9R,EAAIwf,EAAcxf,EAAG6e,EAC1C,CACA,IAAMa,EAAmB,IAAIC,IAC7B,SAASC,EAAQC,GACf,KAAMA,aAAiBC,GAAQ,MAAM,IAAIlnB,MAAM,yBACjD,CAEA,IACMknB,EAAK,WAIT,SAAAA,EACWC,EACAC,EACAC,EACAC,GAET,IAFmB3pB,EAAAA,EAAAA,GAAA,KAAAupB,GAHV,KAAAC,GAAAA,EACA,KAAAC,GAAAA,EACA,KAAAC,GAAAA,EACA,KAAAC,GAAAA,GAEJX,EAAaQ,GAAK,MAAM,IAAInnB,MAAM,cACvC,IAAK2mB,EAAaS,GAAK,MAAM,IAAIpnB,MAAM,cACvC,IAAK2mB,EAAaU,GAAK,MAAM,IAAIrnB,MAAM,cACvC,IAAK2mB,EAAaW,GAAK,MAAM,IAAItnB,MAAM,aACzC,CA0OC,OA1OApC,EAAAA,EAAAA,GAAAspB,EAAA,EAAAroB,IAAA,IAAAsU,IAED,WACE,OAAOrC,KAAKyW,WAAWjJ,CACzB,GAAC,CAAAzf,IAAA,IAAAsU,IACD,WACE,OAAOrC,KAAKyW,WAAW/I,CACzB,GAAC,CAAA3f,IAAA,iBAAAC,MAmBD,SAAewkB,GACbxS,KAAKgU,aAAexB,EACpBwD,EAAiBU,OAAO1W,KAC1B,GAEA,CAAAjS,IAAA,iBAAAC,MACA,WACE,IAAQ6Q,EAAS+V,EAAT/V,EAAG6R,EAAMkE,EAANlE,EACX,GAAI1Q,KAAKqQ,MAAO,MAAM,IAAInhB,MAAM,mBAGhC,IAAYynB,EAA2B3W,KAA/BqW,GAAWO,EAAoB5W,KAAxBsW,GAAW1H,EAAa5O,KAAjBuW,GAAWM,EAAM7W,KAAVwW,GACvBM,EAAKvB,EAAKoB,EAAIA,GACdI,EAAKxB,EAAKqB,EAAIA,GACdI,EAAKzB,EAAK3G,EAAIA,GACdqI,EAAK1B,EAAKyB,EAAKA,GACfE,EAAM3B,EAAKuB,EAAKjY,GAGtB,GAFa0W,EAAKyB,EAAKzB,EAAK2B,EAAMH,MACpBxB,EAAK0B,EAAK1B,EAAK7E,EAAI6E,EAAKuB,EAAKC,KACvB,MAAM,IAAI7nB,MAAM,yCAIpC,GAFWqmB,EAAKoB,EAAIC,KACTrB,EAAK3G,EAAIiI,GACL,MAAM,IAAI3nB,MAAM,wCACjC,GAEA,CAAAnB,IAAA,SAAAC,MACA,SAAOmoB,GACLD,EAAQC,GACR,IAAYgB,EAAuBnX,KAA3BqW,GAAYe,EAAepX,KAAnBsW,GAAYe,EAAOrX,KAAXuW,GACZO,EAAuBX,EAA3BE,GAAYU,EAAeZ,EAAnBG,GAAYU,EAAOb,EAAXI,GAClBe,EAAO/B,EAAK4B,EAAKH,GACjBO,EAAOhC,EAAKuB,EAAKO,GACjBG,EAAOjC,EAAK6B,EAAKJ,GACjBS,EAAOlC,EAAKwB,EAAKM,GACvB,OAAOC,IAASC,GAAQC,IAASC,CACnC,GAAC,CAAA1pB,IAAA,MAAAC,MAES,WACR,OAAOgS,KAAK0X,OAAOtB,EAAMnH,KAC3B,GAAC,CAAAlhB,IAAA,SAAAC,MAED,WAEE,OAAO,IAAIooB,EAAMb,GAAMvV,KAAKqW,IAAKrW,KAAKsW,GAAItW,KAAKuW,GAAIhB,GAAMvV,KAAKwW,IAChE,GAIA,CAAAzoB,IAAA,SAAAC,MACA,WACE,IAAQ6Q,EAAM+V,EAAN/V,EACIsY,EAAuBnX,KAA3BqW,GAAYe,EAAepX,KAAnBsW,GAAYe,EAAOrX,KAAXuW,GAClBoB,EAAIpC,EAAK4B,EAAKA,GACdS,EAAIrC,EAAK6B,EAAKA,GACdS,EAAItC,EAAKjN,GAAMiN,EAAK8B,EAAKA,IACzBS,EAAIvC,EAAK1W,EAAI8Y,GACbI,EAAOZ,EAAKC,EACZY,EAAIzC,EAAKA,EAAKwC,EAAOA,GAAQJ,EAAIC,GACjCK,EAAIH,EAAIF,EACRM,EAAID,EAAIJ,EACRM,EAAIL,EAAIF,EACRQ,EAAK7C,EAAKyC,EAAIE,GACdG,EAAK9C,EAAK0C,EAAIE,GACdG,EAAK/C,EAAKyC,EAAIG,GAEpB,OAAO,IAAI/B,EAAMgC,EAAIC,EADV9C,EAAK2C,EAAID,GACSK,EAC/B,GAIA,CAAAvqB,IAAA,MAAAC,MACA,SAAImoB,GACFD,EAAQC,GACR,IAAQtX,EAAS+V,EAAT/V,EAAG6R,EAAMkE,EAANlE,EACCyG,EAA+BnX,KAAnCqW,GAAYe,EAAuBpX,KAA3BsW,GAAYe,EAAerX,KAAnBuW,GAAYgC,EAAOvY,KAAXwW,GACpBM,EAA+BX,EAAnCE,GAAYU,EAAuBZ,EAA3BG,GAAYU,EAAeb,EAAnBI,GAAYiC,EAAOrC,EAAXK,GAKhC,GAAI3X,IAAM8C,QAAQ,GAAI,CACpB,IAAMgW,EAAIpC,GAAM6B,EAAKD,IAAOJ,EAAKD,IAC3Bc,EAAIrC,GAAM6B,EAAKD,IAAOJ,EAAKD,IAC3BoB,EAAI3C,EAAKqC,EAAID,GACnB,GAAIO,IAAM9P,GAAK,OAAOpI,KAAK2S,SAC3B,IAAMkF,EAAItC,EAAK8B,EAAK/O,GAAMkQ,GACpBV,EAAIvC,EAAKgD,EAAKjQ,GAAM0O,GACpBgB,EAAIF,EAAID,EACRI,EAAIL,EAAID,EACRQ,EAAIL,EAAID,EACRO,EAAK7C,EAAKyC,EAAIE,GACdG,EAAK9C,EAAK0C,EAAIE,GACdG,EAAK/C,EAAKyC,EAAIG,GAEpB,OAAO,IAAI/B,EAAMgC,EAAIC,EADV9C,EAAK2C,EAAID,GACSK,GAE/B,IAAMX,EAAIpC,EAAK4B,EAAKL,GACdc,EAAIrC,EAAK6B,EAAKL,GACdc,EAAItC,EAAKgD,EAAK7H,EAAI8H,GAClBV,EAAIvC,EAAK8B,EAAKL,GACdgB,EAAIzC,GAAM4B,EAAKC,IAAON,EAAKC,GAAMY,EAAIC,GACrCM,EAAIJ,EAAID,EACRI,EAAIH,EAAID,EACRM,EAAI5C,EAAKqC,EAAI/Y,EAAI8Y,GACjBS,EAAK7C,EAAKyC,EAAIE,GACdG,EAAK9C,EAAK0C,EAAIE,GACdG,EAAK/C,EAAKyC,EAAIG,GAGpB,OAAO,IAAI/B,EAAMgC,EAAIC,EAFV9C,EAAK2C,EAAID,GAESK,EAC/B,GAAC,CAAAvqB,IAAA,WAAAC,MAED,SAASmoB,GACP,OAAOnW,KAAKmE,IAAIgS,EAAM/D,SACxB,GAAC,CAAArkB,IAAA,OAAAC,MAEO,SAAKsI,GACX,OAAOmiB,EAAK5E,WAAW7T,KAAMgW,EAAkB1f,EAAG8f,EAAMsC,WAC1D,GAEA,CAAA3qB,IAAA,WAAAC,MACA,SAAS2qB,GACP,IAAAC,EAAiB5Y,KAAKgS,KAAK8D,EAAc6C,EAAQxD,IAAzC1E,EAACmI,EAADnI,EAAG9Z,EAACiiB,EAADjiB,EACX,OAAOyf,EAAMsC,WAAW,CAACjI,EAAG9Z,IAAI,EAClC,GAKA,CAAA5I,IAAA,iBAAAC,MACA,SAAe2qB,GACb,IAAIriB,EAAIyf,EAAU4C,GAClB,OAAIriB,IAAM8R,GAAYyQ,EAClB7Y,KAAK0X,OAAOmB,IAAMviB,IAAM+R,GAAYrI,KACpCA,KAAK0X,OAAOO,GAAWjY,KAAKgS,KAAK1b,GAAGma,EACjCgI,EAAKhG,aAAazS,KAAM1J,EACjC,GAKA,CAAAvI,IAAA,eAAAC,MACA,WACE,OAAOgS,KAAK8Y,eAAexD,GAAUjF,KACvC,GAGA,CAAAtiB,IAAA,gBAAAC,MACA,WACE,OAAOyqB,EAAKhG,aAAazS,KAAMmV,GAAa9E,KAC9C,GAGA,CAAAtiB,IAAA,WAAAC,MACA,SAAS+qB,GACP,IAAYvL,EAAoBxN,KAAxBqW,GAAW3I,EAAa1N,KAAjBsW,GAAW0C,EAAMhZ,KAAVuW,GAChBlG,EAAMrQ,KAAKqQ,MACP,MAAN0I,IAAYA,EAAK1I,EAAMnD,GAAOpB,EAAGmF,IAAI+H,IACzC,IAAMC,EAAK1D,EAAK/H,EAAIuL,GACdG,EAAK3D,EAAK7H,EAAIqL,GACdI,EAAK5D,EAAKyD,EAAID,GACpB,GAAI1I,EAAK,MAAO,CAAE7C,EAAGpF,GAAKsF,EAAGrF,IAC7B,GAAI8Q,IAAO9Q,GAAK,MAAM,IAAInZ,MAAM,oBAChC,MAAO,CAAEse,EAAGyL,EAAIvL,EAAGwL,EACrB,GAAC,CAAAnrB,IAAA,gBAAAC,MAED,WACE,IAAWsnB,EAAaV,EAAhB7S,EACR,OAAIuT,IAAajN,GAAYrI,KACtBA,KAAK8Y,eAAexD,EAC7B,GAGA,CAAAvnB,IAAA,aAAAC,MAmCA,WACE,IAAAorB,EAAiBpZ,KAAKyW,WAAdjJ,EAAC4L,EAAD5L,EACF9P,EAAQmX,GADFuE,EAAD1L,EACyB5B,EAAGmE,OAEvC,OADAvS,EAAMA,EAAMjQ,OAAS,IAAM+f,EAAInF,GAAM,IAAO,EACrC3K,CACT,GAAC,CAAA3P,IAAA,QAAAC,MACD,WACE,OAAO6mB,EAAc7U,KAAKqZ,aAC5B,IAAC,EAAAtrB,IAAA,aAAAC,MA1OD,SAAkByiB,GAChB,GAAIA,aAAa2F,EAAO,MAAM,IAAIlnB,MAAM,8BACxC,IAAAiU,EAAiBsN,GAAK,CAAC,EAAfjD,EAACrK,EAADqK,EAAGE,EAACvK,EAADuK,EACX,IAAKmI,EAAarI,KAAOqI,EAAanI,GAAI,MAAM,IAAIxe,MAAM,wBAC1D,OAAO,IAAIknB,EAAM5I,EAAGE,EAAGrF,GAAKkN,EAAK/H,EAAIE,GACvC,GAAC,CAAA3f,IAAA,aAAAC,MACD,SAAkB8kB,GAChB,IAAMwG,EAAQxN,EAAGqF,YAAY2B,EAAO1N,KAAI,SAACqL,GAAC,OAAKA,EAAE8F,EAAE,KACnD,OAAOzD,EAAO1N,KAAI,SAACqL,EAAGpb,GAAC,OAAKob,EAAEgG,SAAS6C,EAAMjkB,GAAG,IAAE+P,IAAIgR,EAAMmD,WAC9D,GAAC,CAAAxrB,IAAA,UAAAC,MAuLD,SAAe2a,GAAwB,IAAd8L,EAAMxlB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,IAAAA,UAAA,GACrByhB,EAASkE,EAATlE,EAAG7R,EAAM+V,EAAN/V,EACLqC,EAAM4K,EAAGmE,MAETuJ,GADN7Q,EAAMiB,GAAY,WAAYjB,EAAKzH,IAChB/E,QACbsd,EAAW9Q,EAAIzH,EAAM,GAC3BsY,EAAOtY,EAAM,IAAgB,IAAXuY,EAClB,IAAM/L,EAAImH,GAAmB2E,GACzB9L,IAAMtF,IAII0N,EAAcpI,EAAtB+G,EAAyBrE,EACPtE,EAAG+D,OAK3B,IAAM6J,EAAKnE,EAAK7H,EAAIA,GACdC,EAAI4H,EAAKmE,EAAKrR,IACd5S,EAAI8f,EAAK7E,EAAIgJ,EAAK7a,GACxB8a,EAA4B3E,EAAQrH,EAAGlY,GAAjCsW,EAAO4N,EAAP5N,QAAgByB,EAACmM,EAAR3rB,MACf,IAAK+d,EAAS,MAAM,IAAI7c,MAAM,uCAC9B,IAAM0qB,GAAUpM,EAAInF,MAASA,GACvBwR,EAAsC,KAAV,IAAXJ,GACvB,IAAKhF,GAAUjH,IAAMpF,IAAOyR,EAE1B,MAAM,IAAI3qB,MAAM,gCAElB,OADI2qB,IAAkBD,IAAQpM,EAAI+H,GAAM/H,IACjC4I,EAAMmD,WAAW,CAAE/L,EAAAA,EAAGE,EAAAA,GAC/B,GAAC,CAAA3f,IAAA,iBAAAC,MACD,SAAsB8rB,GACpB,OAAOC,EAAqBD,GAASE,KACvC,KAAC5D,CAAA,CAxPQ,GACOA,EAAAjD,KAAO,IAAIiD,EAAMxB,EAAMP,GAAIO,EAAMN,GAAIjM,GAAKkN,EAAKX,EAAMP,GAAKO,EAAMN,KAChE8B,EAAAnH,KAAO,IAAImH,EAAMhO,GAAKC,GAAKA,GAAKD,IAiQlD,IAAc6P,EAAe7B,EAArBjD,KAAe0F,EAAMzC,EAAZnH,KACXwJ,EAAOzG,GAAKoE,EAAqB,EAAd1G,GAEzB,SAASuK,EAAKpb,GACZ,OAAOsO,GAAItO,EAAGsW,EAChB,CAEA,SAAS+E,EAAQnc,GACf,OAAOkc,EAAKpF,GAAmB9W,GACjC,CAGA,SAASgc,EAAqBhsB,GAC5B,IAAMmT,EAAMwO,EACZ3hB,EAAM6b,GAAY,cAAe7b,EAAKmT,GAGtC,IAAMiZ,EAASvQ,GAAY,qBAAsByL,EAAMtnB,GAAM,EAAImT,GAC3DkZ,EAAOtF,EAAkBqF,EAAOhe,MAAM,EAAG+E,IACzCmZ,EAASF,EAAOhe,MAAM+E,EAAK,EAAIA,GAC/ByX,EAASuB,EAAQE,GACjBJ,EAAQ/B,EAAEqC,SAAS3B,GACnB4B,EAAaP,EAAMX,aACzB,MAAO,CAAEe,KAAAA,EAAMC,OAAAA,EAAQ1B,OAAAA,EAAQqB,MAAAA,EAAOO,WAAAA,EACxC,CAQA,SAASC,IAAkD,IAAuB,IAAtDC,EAAAxrB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAe,IAAI/B,WAAYyQ,EAAA1O,UAAAxB,OAAKitB,EAAkB,IAAA1kB,MAAA2H,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAlB6c,EAAkB7c,EAAA,GAAA5O,UAAA4O,GAChF,IAAMwC,EAAMwU,GAAc7lB,MAAd6lB,EAAkB6F,GAC9B,OAAOR,EAAQ7E,EAAMN,EAAO1U,EAAKuJ,GAAY,UAAW6Q,KAAYrF,IACtE,CAgBA,IAAMuF,EAAkDnG,GA2BxDyD,EAAE2C,eAAe,GAEjB,IAAMC,EAAQ,CACZd,qBAAAA,EAEAe,iBAAkB,kBAAkBra,EAAYqL,EAAGmE,MAAM,EAQzD8K,WAAU,WAAmC,IAAlCvI,EAAUvjB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAG+qB,EAAK/qB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGmnB,EAAMjD,KAGvC,OAFA6G,EAAMY,eAAepI,GACrBwH,EAAMM,SAAS3Y,OAAO,IACfqY,CACT,GAGF,MAAO,CACLpF,MAAAA,EACAoG,aAzEF,SAAsBlB,GACpB,OAAOC,EAAqBD,GAASS,UACvC,EAwEEU,KA/DF,SAAc5a,EAAUyZ,GAA6C,IAA/BoB,EAAAjsB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAA6B,CAAC,EAClEoR,EAAMuJ,GAAY,UAAWvJ,GACzB+U,IAAS/U,EAAM+U,EAAQ/U,IAC3B,IAAA8a,EAAuCpB,EAAqBD,GAApDO,EAAMc,EAANd,OAAQ1B,EAAMwC,EAANxC,OAAQ4B,EAAUY,EAAVZ,WAClB5a,EAAI6a,EAAmBU,EAAQT,QAASJ,EAAQha,GAChD+a,EAAInD,EAAEqC,SAAS3a,GAAG0Z,aAElBhjB,EAAI4jB,EAAKta,EADL6a,EAAmBU,EAAQT,QAASW,EAAGb,EAAYla,GACtCsY,GAGvB,OAFA5C,EAAU1f,GAEHuT,GAAY,SADPiL,GAAeuG,EAAGvG,GAAmBxe,EAAGyV,EAAGmE,QACP,EAAdP,EACpC,EAqDE2L,OAlDF,SAAgBC,EAAUjb,EAAUkb,GAAoC,IAApBL,EAAOjsB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG0rB,EACpDF,EAAoBS,EAApBT,QAAShG,EAAWyG,EAAXzG,OACXvT,EAAM4K,EAAGmE,MACfqL,EAAM1R,GAAY,YAAa0R,EAAK,EAAIpa,GACxCb,EAAMuJ,GAAY,UAAWvJ,GACzB+U,IAAS/U,EAAM+U,EAAQ/U,IAE3B,IAGIsX,EAAGyD,EAAGI,EAHJnlB,EAAIwe,GAAmByG,EAAInf,MAAM+E,EAAK,EAAIA,IAIhD,IACEyW,EAAIvB,EAAMqF,QAAQF,EAAW9G,GAC7B2G,EAAIhF,EAAMqF,QAAQH,EAAInf,MAAM,EAAG+E,GAAMuT,GACrC+G,EAAKvD,EAAEa,eAAeziB,GACtB,MAAOqlB,GACP,OAAO,EAET,IAAKjH,GAAUkD,EAAEgE,eAAgB,OAAO,EAExC,IAAM/Q,EAAI4P,EAAmBC,EAASW,EAAE/B,aAAc1B,EAAE0B,aAAchZ,GAGtE,OAFY+a,EAAEjX,IAAIwT,EAAEmB,eAAelO,IAExBgR,SAASJ,GAAIK,gBAAgBnE,OAAOtB,EAAMnH,KACvD,EA2BE6M,cAAe1F,EACfyE,MAAAA,EAEJ,CCxeA,IAAMkB,GAAYpa,OAChB,iFAGIqa,GAAkBra,OACtB,iFAIqB0G,IAAX1G,OAAO,GAAUA,OAAO,IAAI2G,GAAM3G,OAAO,GAAIsL,GAAMtL,OAAO,GAEhEsa,GAAOta,OAAO,IAAKua,GAAOva,OAAO,IAAKwa,GAAOxa,OAAO,IAAKya,GAAOza,OAAO,IAE7E,SAAS0a,GAAoB7O,GAC3B,IAAMO,EAAIgO,GAEJ9R,EADMuD,EAAIA,EAAKO,EACJP,EAAKO,EAChBuO,EAAM/O,GAAKtD,EAAI3B,GAAKyF,GAAK9D,EAAM8D,EAC/BwO,EAAMhP,GAAK+O,EAAIjU,GAAK0F,GAAKP,EAAKO,EAC9ByO,EAAOjP,GAAKgP,EAAItP,GAAKc,GAAKwO,EAAMxO,EAChC0O,EAAOlP,GAAKiP,EAAKP,GAAMlO,GAAKyO,EAAOzO,EACnC2O,EAAOnP,GAAKkP,EAAKP,GAAMnO,GAAK0O,EAAO1O,EACnC4O,EAAOpP,GAAKmP,EAAKP,GAAMpO,GAAK2O,EAAO3O,EACnC6O,EAAQrP,GAAKoP,EAAKP,GAAMrO,GAAK4O,EAAO5O,EACpC8O,EAAQtP,GAAKqP,EAAMR,GAAMrO,GAAK4O,EAAO5O,EACrC+O,EAAQvP,GAAKsP,EAAMZ,GAAMlO,GAAKyO,EAAOzO,EAG3C,MAAO,CAAEgP,UAFUxP,GAAKuP,EAAMxU,GAAKyF,GAAKP,EAAKO,EAEzB9D,GAAAA,EACtB,CAEA,SAAS6K,GAAkBpX,GAQzB,OALAA,EAAM,IAAM,IAEZA,EAAM,KAAO,IAEbA,EAAM,KAAO,GACNA,CACT,CAGA,SAASsX,GAAQrH,EAAWlY,GAC1B,IAAMsY,EAAIgO,GACJiB,EAAK7P,GAAI1X,EAAIA,EAAIA,EAAGsY,GACpBkP,EAAK9P,GAAI6P,EAAKA,EAAKvnB,EAAGsY,GAGxBP,EAAIL,GAAIQ,EAAIqP,EADJX,GAAoB1O,EAAIsP,GAAIF,UACdhP,GACpBmP,EAAM/P,GAAI1X,EAAI+X,EAAIA,EAAGO,GACrBoP,EAAQ3P,EACR4P,EAAQjQ,GAAIK,EAAIwO,GAAiBjO,GACjCsP,EAAWH,IAAQvP,EACnB2P,EAAWJ,IAAQ/P,IAAKQ,EAAGI,GAC3BwP,EAASL,IAAQ/P,IAAKQ,EAAIqO,GAAiBjO,GAIjD,OAHIsP,IAAU7P,EAAI2P,IACdG,GAAYC,KAAQ/P,EAAI4P,GACxB/N,GAAa7B,EAAGO,KAAIP,EAAIL,IAAKK,EAAGO,IAC7B,CAAEhC,QAASsR,GAAYC,EAAUtvB,MAAOwf,EACjD,CAGO,IAWD1B,GAAK8D,GAAMmM,QAAWvsB,GAAW,GAEjCguB,GAAkB,CAEtB3e,EAAG8C,QAAQ,GAGX+O,EAAG/O,OAAO,iFAEVmK,GAAAA,GAGAxV,EAAGqL,OAAO,gFAEVI,EAAGJ,OAAO,GAEV0S,GAAI1S,OAAO,iFACX2S,GAAI3S,OAAO,iFACX5D,KAAMoK,EACN1H,YAAAA,EACAqU,kBAAAA,GAIAE,QAAAA,IAGWyI,GAA0B/I,GAAe8I,IAEtD,SAASE,GAAele,EAAkBgW,EAAiBC,GACzD,GAAID,EAAI/nB,OAAS,IAAK,MAAM,IAAIyB,MAAM,sBACtC,OAAOuQ,EACLL,EAAY,oCACZ,IAAIlS,WAAW,CAACuoB,EAAS,EAAI,EAAGD,EAAI/nB,SACpC+nB,EACAhW,EAEJ,EAEwD+U,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACrDiJ,IAAe,IAClBzI,OAAQ2I,MAE6CnJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACpDiJ,IAAe,IAClBzI,OAAQ2I,GACRtI,QAASjN,IAoDX,IAAMwV,IAAW7R,GAAG+D,MAAQlO,OAAO,IAAMA,OAAO,GAEhCmK,GAAGha,IAAIwW,GAAKqV,IACZ7R,GAAGoF,KAAKpF,GAAGiD,IAAIjD,GAAG2C,MACjB3C,GAAG+D,MAAQlO,OAAO,GAAMA,OAAO,GACjCA,OAAO,SHgNhB,SAAwBmK,EAAe4G,GAC3C,IAAK5G,EAAGwE,MAAO,MAAM,IAAIphB,MAAM,4BAC/B,IAAM+e,EAAOnC,EAAGoF,KAAKwB,GACd5G,EAAGwE,MAAMrC,IAAQnC,EAAGiD,IAAId,EACjC,CGvKwB2P,CAAW9R,GAAIA,GAAGiD,IAAIpN,OAAO,UA4C3BA,OACxB,iFAGwBA,OACxB,iFAGqBA,OACrB,gFAGqBA,OACrB,iFAKeA,OAAO,sEA8BxB,6GCzUMkc,GAAM,SAAChf,EAAW5R,EAAWykB,GAAS,OAAM7S,EAAI5R,EAAM4R,EAAI6S,EAAMzkB,EAAIykB,CAAE,EAKtEoM,GAA0B,IAAI3e,YAAY,CAC9C,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UACpF,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UACpF,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,aAKhF4e,GAAoB,IAAI5e,YAAY,CACxC,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,aAKhF6e,GAA2B,IAAI7e,YAAY,IAC3C8e,GAAO,SAAArY,IAAAjZ,EAAAA,EAAAA,GAAAsxB,EAAArY,GAAA,IAAA7W,GAAAnC,EAAAA,EAAAA,GAAAqxB,GAYX,SAAAA,IAAA,IAAA3uB,EAFc,OAEdzC,EAAAA,EAAAA,GAAA,KAAAoxB,IACE3uB,EAAAP,EAAAU,KAAA,KAAM,GAAI,GAAI,GAAG,IAVnBkoB,EAAY,EAARoG,GAAG,GACPzuB,EAAAsoB,EAAY,EAARmG,GAAG,GACPzuB,EAAAuoB,EAAY,EAARkG,GAAG,GACPzuB,EAAAwoB,EAAY,EAARiG,GAAG,GACPzuB,EAAA0oB,EAAY,EAAR+F,GAAG,GACPzuB,EAAA4oB,EAAY,EAAR6F,GAAG,GACPzuB,EAAA2oB,EAAY,EAAR8F,GAAG,GACPzuB,EAAA6oB,EAAY,EAAR4F,GAAG,GAAOzuB,CAId,CA6DC,OA7DAxC,EAAAA,EAAAA,GAAAmxB,EAAA,EAAAlwB,IAAA,MAAAC,MACS,WAER,MAAO,CAD4BgS,KAA3B2X,EAA2B3X,KAAxB4X,EAAwB5X,KAArB6X,EAAqB7X,KAAlB8X,EAAkB9X,KAAfgY,EAAehY,KAAZkY,EAAYlY,KAATiY,EAASjY,KAANmY,EAE/B,GACA,CAAApqB,IAAA,MAAAC,MACU,SACR2pB,EAAWC,EAAWC,EAAWC,EAAWE,EAAWE,EAAWD,EAAWE,GAE7EnY,KAAK2X,EAAQ,EAAJA,EACT3X,KAAK4X,EAAQ,EAAJA,EACT5X,KAAK6X,EAAQ,EAAJA,EACT7X,KAAK8X,EAAQ,EAAJA,EACT9X,KAAKgY,EAAQ,EAAJA,EACThY,KAAKkY,EAAQ,EAAJA,EACTlY,KAAKiY,EAAQ,EAAJA,EACTjY,KAAKmY,EAAQ,EAAJA,CACX,GAAC,CAAApqB,IAAA,UAAAC,MACS,SAAQiT,EAAgBhT,GAEhC,IAAK,IAAIoH,EAAI,EAAGA,EAAI,GAAIA,IAAKpH,GAAU,EAAG+vB,GAAS3oB,GAAK4L,EAAKkF,UAAUlY,GAAQ,GAC/E,IAAK,IAAIoH,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC5B,IAAM6oB,EAAMF,GAAS3oB,EAAI,IACnB8oB,EAAKH,GAAS3oB,EAAI,GAClB+oB,EAAKlf,EAAKgf,EAAK,GAAKhf,EAAKgf,EAAK,IAAOA,IAAQ,EAC7CG,EAAKnf,EAAKif,EAAI,IAAMjf,EAAKif,EAAI,IAAOA,IAAO,GACjDH,GAAS3oB,GAAMgpB,EAAKL,GAAS3oB,EAAI,GAAK+oB,EAAKJ,GAAS3oB,EAAI,IAAO,EAIjE,IADA,IAtESwJ,EAsEH8Y,EAA2B3X,KAA3B2X,EAAGC,EAAwB5X,KAAxB4X,EAAGC,EAAqB7X,KAArB6X,EAAGC,EAAkB9X,KAAlB8X,EAAGE,EAAehY,KAAfgY,EAAGE,EAAYlY,KAAZkY,EAAGD,EAASjY,KAATiY,EAAGE,EAAMnY,KAANmY,EAClB9iB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IACMkjB,EAAMJ,GADGjZ,EAAK8Y,EAAG,GAAK9Y,EAAK8Y,EAAG,IAAM9Y,EAAK8Y,EAAG,OAxE3CnZ,EAyEsBmZ,GAAGE,GAzEuBrZ,EAyEpBoZ,GAAK6F,GAASzoB,GAAK2oB,GAAS3oB,GAAM,EAE/DmjB,GADStZ,EAAKyY,EAAG,GAAKzY,EAAKyY,EAAG,IAAMzY,EAAKyY,EAAG,KAC7BkG,GAAIlG,EAAGC,EAAGC,GAAM,EACrCM,EAAIF,EACJA,EAAIC,EACJA,EAAIF,EACJA,EAAKF,EAAIS,EAAM,EACfT,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAKY,EAAKC,EAAM,EAGlBb,EAAKA,EAAI3X,KAAK2X,EAAK,EACnBC,EAAKA,EAAI5X,KAAK4X,EAAK,EACnBC,EAAKA,EAAI7X,KAAK6X,EAAK,EACnBC,EAAKA,EAAI9X,KAAK8X,EAAK,EACnBE,EAAKA,EAAIhY,KAAKgY,EAAK,EACnBE,EAAKA,EAAIlY,KAAKkY,EAAK,EACnBD,EAAKA,EAAIjY,KAAKiY,EAAK,EACnBE,EAAKA,EAAInY,KAAKmY,EAAK,EACnBnY,KAAKF,IAAI6X,EAAGC,EAAGC,EAAGC,EAAGE,EAAGE,EAAGD,EAAGE,EAChC,GAAC,CAAApqB,IAAA,aAAAC,MACS,WACRgwB,GAASxc,KAAK,EAChB,GAAC,CAAAzT,IAAA,UAAAC,MACD,WACEgS,KAAKF,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9BE,KAAKzS,OAAOiU,KAAK,EACnB,KAACyc,CAAA,CA3EU,CAAQrd,GAiGR0d,GAAyBpe,GAAgB,kBAAM,IAAI+d,EAAQ,sKCtCvDM,ICtEJC,GAAA,SAAAC,IAAA9xB,EAAAA,EAAAA,GAAA6xB,EAAAC,GAAA,IAAA1vB,GAAAnC,EAAAA,EAAAA,GAAA4xB,GAUX,SAAAA,EAAYE,EAAkBC,GAAA,IAAArvB,EACxBsvB,GADwB/xB,EAAAA,EAAAA,GAAA,KAAA2xB,GAE5B,IAAQK,EAAqBH,EAArBG,QAAYC,GAAAC,EAAAA,GAAAA,GAASL,EAA7BM,IACQC,EAASP,EAATO,KACF5e,EACY,IAAhB4e,EAAKxxB,OAAeoxB,EAApB,YAA0CI,EAAKC,KAAK,KAApD,OAA+DL,EAIjE,OAHAvvB,EAAAP,EAAAU,KAAA,KAAM4Q,GACNjS,OAAOI,QAAP/B,EAAAA,GAAAA,GAAA6C,GAAoBwvB,GACpBxvB,EAAKX,KAAOW,EAAKhB,YAAYK,KAC7BW,EAAKqvB,SAAW,iBACd,cAAAQ,EAAQP,GAARO,EAAQP,EAAR,CAAoBF,GAADjhB,QAAAkF,EAAAA,EAAAA,GAAagc,KACjC,EAFDrvB,CAGD,QAAAxC,EAAAA,EAAAA,GAAA0xB,EAAA,CAtBU,EAsBVY,EAAAA,GAAAA,GAtB8BjyB,YDhBjC,SAASkyB,GAAc7R,GACrB,OAAO8R,GAAS9R,IAAoC,oBAAvBA,EAAE+R,OAAOC,SACvC,UAMeF,GAAS9R,GACvB,MAAoB,kBAANA,GAAuB,MAALA,CACjC,UAmBeiS,GAAMzxB,GACpB,MAAwB,kBAAVA,EAAqB0xB,KAAKC,UAAU3xB,GAA3C,GAAuDA,CAC/D,UAgBe4xB,GACdxS,EACAqN,EACAoF,EACA7xB,GAEA,IAAe,IAAXof,EAAJ,EAEsB,IAAXA,EACTA,EAAS,CAAC,EACiB,kBAAXA,IAChBA,EAAS,CAAEyR,QAASzR,IAGtB,IAAQ6R,EAAiBxE,EAAjBwE,KAAMa,EAAWrF,EAAXqF,OACNzT,EAASwT,EAATxT,KACR0T,EAKI3S,EAJF4S,EADID,EACJC,WADIC,EAAAF,EAEJlB,QAAAA,OAAO,IAAAoB,EAAA,6BAAiC5T,EAAjC,KACL2T,EAAa,qBAAsBA,EAAzB,IAA0C,IAD/C,oBAEcP,GAAMzxB,GAFpB,IAAAiyB,EAKT,OAAA1L,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEvmB,MAAAA,EACAqe,KAAAA,EACA2T,WAAAA,EACAjyB,IAAKkxB,EAAKA,EAAKxxB,OAAS,GACxBwxB,KAAAA,EACAa,OAAAA,GACG1S,GAPE,IAQLyR,QAAAA,GAnBD,CAqBF,UAMgBN,GACfnR,EACAqN,EACAoF,EACA7xB,GAAA,IAAAoI,EAAAD,EAAAwJ,EAAA+e,EAAA,OAAAwB,EAAAA,GAAAA,KAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEKjB,GAAWjS,KACdA,EAAS,CAACA,IACXhX,GAAA1J,EAAAA,GAAAA,GAEe0gB,GAAhBgT,EAAAC,KAAA,EAAAjqB,EAAAC,IAAA,WAAAF,EAAAC,EAAAE,KAAAC,KAAA,CAAA6pB,EAAAE,KAAA,SACE,GADS3gB,EAAXxJ,EAAAnI,QACQ0wB,EAAUkB,GAAUjgB,EAAG8a,EAASoF,EAAQ7xB,IAE9C,CAAAoyB,EAAAE,KAAA,SACE,OADFF,EAAAE,KAAA,GACQ5B,EAAN,QAAA0B,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAG,GAAAH,EAAA,SAAAhqB,EAAAM,EAAA0pB,EAAAG,IAAA,eAAAH,EAAAC,KAAA,GAAAjqB,EAAAO,IAAAypB,EAAAI,OAAA,6BAAAJ,EAAAK,OAAA,GAAAC,GAAA,8BAUWC,GACf3yB,EACA6xB,GAAA,IACA3E,EAAAjsB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAKI,CAAC,EAAD,OAAAixB,EAAAA,GAAAA,KAAAU,MAAA,SAAAC,IAAA,IAAAC,EAAA7B,EAAA8B,EAAAjB,EAAAkB,EAAAC,EAAAC,EAAA9N,EAAAoC,EAAAznB,EAAAozB,EAAAnqB,EAAAH,EAAAuqB,EAAA/pB,EAAAJ,EAAAoqB,EAAAzW,EAAAnV,EAAAY,EAAAirB,EAAA3pB,EAAAD,EAAA6pB,EAAA/pB,EAAAD,EAAAmnB,EAAA,OAAAwB,EAAAA,GAAAA,KAAAC,MAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,OAKJ,GALIQ,EAEkE5F,EAA9D+D,KAAAA,OAAI,IAAA6B,EAAG,GAATA,EAAAC,EAAgE7F,EAAnD4E,OAAAA,OAAM,IAAAiB,EAAG,CAAC/yB,GAAvB+yB,EAAAC,EAAgE9F,EAAjC+F,OAAAA,OAAM,IAAAD,GAArCA,EAAAE,EAAgEhG,EAAjB9H,KAAAA,OAAI,IAAA8N,GAAGA,EACtD1L,EAAe,CAAEyJ,KAAAA,EAAMa,OAAAA,GAEzBmB,IACFjzB,EAAQ6xB,EAAO4B,QAAQzzB,EAAOwnB,GAG5BpC,GACgB,SAAhByM,EAAOxT,MACPiT,GAASO,EAAO6B,SAChBpC,GAAStxB,KACRgI,MAAMC,QAAQjI,IAEf,IAAWD,KAAOC,OACWwB,IAAvBqwB,EAAO6B,OAAO3zB,WACTC,EAAMD,GAMjBozB,GAAQ,EAAZnqB,GAAAtK,EAAAA,GAAAA,GAEsBmzB,EAAO8B,UAAU3zB,EAAOwnB,IAA9CgM,EAAAnB,KAAA,EAAArpB,EAAAX,IAAA,WAAAQ,EAAAG,EAAAV,KAAAC,KAAA,CAAAirB,EAAAlB,KAAA,SAEE,OAFS5B,EAAX7nB,EAAA7I,MACEmzB,GAAQ,EAARK,EAAAlB,KAAA,GACM,CAAC5B,OAASlvB,GAAhB,QAAAgyB,EAAAlB,KAAA,gBAAAkB,EAAAlB,KAAA,iBAAAkB,EAAAnB,KAAA,GAAAmB,EAAAjB,GAAAiB,EAAA,SAAAxqB,EAAAN,EAAA8qB,EAAAjB,IAAA,eAAAiB,EAAAnB,KAAA,GAAArpB,EAAAL,IAAA6qB,EAAAhB,OAAA,YAAAnpB,GAAA3K,EAAAA,GAAAA,GAGoBmzB,EAAOnT,QAAQ1e,EAAOwnB,IAA5CgM,EAAAnB,KAAA,GAAAhpB,EAAAhB,IAAA,YAAAY,EAAAI,EAAAf,KAAAC,KAAA,CAAAirB,EAAAlB,KAAA,SAAAe,GAAA/b,EAAAA,EAAAA,GAAArO,EAAAjJ,MAAA,GAAU4c,EAADyW,EAAC,GAAG5rB,EAAJ4rB,EAAC,GAAMhrB,EAAPgrB,EAAC,GACFC,EAAKX,GAAIlrB,EAAGY,EAAa,CAC7B4oB,UAAYzvB,IAANob,EAAkBqU,EAAlB,GAAAxhB,QAAAkF,EAAAA,EAAAA,GAA6Bsc,GAAJ,CAAUrU,IACzCkV,YAActwB,IAANob,EAAkBkV,EAAlB,GAAAriB,QAAAkF,EAAAA,EAAAA,GAA+Bmd,GAAJ,CAAYrqB,IAC/CwrB,OAAAA,EACA7N,KAAAA,IAJFzb,GAAAjL,EAAAA,GAAAA,GAOgB40B,GAAhBE,EAAAnB,KAAA,GAAA1oB,EAAAtB,IAAA,YAAAqB,EAAAC,EAAArB,KAAAC,KAAA,CAAAirB,EAAAlB,KAAA,cAAWiB,EAAX7pB,EAAA1J,OACQ,GAAN,CAAAwzB,EAAAlB,KAAA,SAEE,OADAa,GAAQ,EAARK,EAAAlB,KAAA,GACM,CAACiB,EAAE,QAAI/xB,GAAb,QAAAgyB,EAAAlB,KAAA,iBACSW,IACTxrB,EAAI8rB,EAAE,QAEI/xB,IAANob,EACF5c,EAAQyH,EACCzH,aAAiBioB,IAC1BjoB,EAAM8R,IAAI8K,EAAGnV,GACJzH,aAAiB4zB,IAC1B5zB,EAAMmW,IAAI1O,GACD6pB,GAAStxB,KAClBA,EAAM4c,GAAKnV,IAEd,QAAA+rB,EAAAlB,KAAA,iBAAAkB,EAAAlB,KAAA,iBAAAkB,EAAAnB,KAAA,GAAAmB,EAAAK,GAAAL,EAAA,UAAA7pB,EAAAjB,EAAA8qB,EAAAK,IAAA,eAAAL,EAAAnB,KAAA,GAAA1oB,EAAAhB,IAAA6qB,EAAAhB,OAAA,YAAAgB,EAAAlB,KAAA,iBAAAkB,EAAAlB,KAAA,iBAAAkB,EAAAnB,KAAA,GAAAmB,EAAAtS,GAAAsS,EAAA,UAAAnqB,EAAAX,EAAA8qB,EAAAtS,IAAA,eAAAsS,EAAAnB,KAAA,GAAAhpB,EAAAV,IAAA6qB,EAAAhB,OAAA,gBAIDW,EAAJ,CAAAK,EAAAlB,KAAA,SAAA9oB,GAAA9K,EAAAA,GAAAA,GACwBmzB,EAAOiC,QAAQ9zB,EAAYwnB,IAAjDgM,EAAAnB,KAAA,GAAA7oB,EAAAnB,IAAA,YAAAkB,EAAAC,EAAAlB,KAAAC,KAAA,CAAAirB,EAAAlB,KAAA,SAEE,OAFS5B,EAAXnnB,EAAAvJ,MACEmzB,GAAQ,EAARK,EAAAlB,KAAA,GACM,CAAC5B,OAASlvB,GAAhB,QAAAgyB,EAAAlB,KAAA,iBAAAkB,EAAAlB,KAAA,iBAAAkB,EAAAnB,KAAA,GAAAmB,EAAAO,GAAAP,EAAA,UAAAhqB,EAAAd,EAAA8qB,EAAAO,IAAA,eAAAP,EAAAnB,KAAA,GAAA7oB,EAAAb,IAAA6qB,EAAAhB,OAAA,gBAIAW,EAAJ,CAAAK,EAAAlB,KAAA,SACE,OADFkB,EAAAlB,KAAA,GACQ,MAAC9wB,EAAWxB,GAAlB,yBAAAwzB,EAAAf,OAAA,GAAAI,EAAA,iEAlEEX,EAkEF,CE5LJ,IAMa8B,GAAA,WAYX,SAAAA,EAAYC,GAAA,IAAA/xB,EAAA,MAAArD,EAAAA,EAAAA,GAAA,KAAAm1B,GAQV,IACE3V,EAME4V,EANF5V,KACAqV,EAKEO,EALFP,OACAC,EAIEM,EAJFN,UACAG,EAGEG,EAHFH,QAJII,EAOFD,EAFFR,QAAAA,OAAO,IAAAS,EAAI,SAAAl0B,GAAD,OAAoBA,CAL1B,EAAAk0B,EAAAC,EAOFF,EADFvV,QAAAA,OAAO,IAAAyV,GAAAjC,EAAAA,GAAAA,KAAAU,MAAG,SAAAwB,IAAA,OAAAlC,EAAAA,GAAAA,KAAAC,MAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,wBAAA+B,EAAA5B,OAAA,GAAA2B,EAAA,IAAAD,EAGZniB,KAAKqM,KAAOA,EACZrM,KAAK0hB,OAASA,EACd1hB,KAAK0M,QAAUA,EACf1M,KAAKyhB,QAAUA,EAGbzhB,KAAK2hB,UADHA,EACe,SAAC3zB,EAAOysB,GAEvB,OAAO8D,GADQoD,EAAU3zB,EAAOysB,GACNA,EAASvqB,EAAMlC,EAC1C,EAEgB,iBAAM,EAAvB,EAIAgS,KAAK8hB,QADHA,EACa,SAAC9zB,EAAOysB,GAErB,OAAO8D,GADQuD,EAAQ9zB,EAAOysB,GACJA,EAASvqB,EAAMlC,EAC1C,EAEc,iBAAM,EAArB,CAEH,CAmDA,OAjDDlB,EAAAA,EAAAA,GAAAk1B,EAAA,EAAAj0B,IAAA,SAAAC,MAIA,SAAOA,GACL,gBAoDFA,EACA6xB,GAEA,IAAMzS,EAASkV,GAASt0B,EAAO6xB,GAE/B,GAAIzS,EAAO,GACT,MAAMA,EAAO,EAEhB,CA5DUmV,CAAOv0B,EAAOgS,KACtB,GAED,CAAAjS,IAAA,SAAAC,MAIA,SAAOA,GACL,OAAOK,GAAOL,EAAOgS,KACtB,GAED,CAAAjS,IAAA,KAAAC,MAIA,SAAGA,GACD,OAAOw0B,GAAGx0B,EAAOgS,KAClB,GAED,CAAAjS,IAAA,OAAAC,MAKA,SAAKA,GACH,gBAuDuBA,EAAgB6xB,GACzC,IAAMzS,EAASkV,GAASt0B,EAAO6xB,EAAQ,CAAEoB,QAAQ,EAAM7N,MAAM,IAE7D,GAAIhG,EAAO,GACT,MAAMA,EAAO,GAEb,OAAOA,EAAO,EAEjB,CA/DUgG,CAAKplB,EAAOgS,KACpB,GAED,CAAAjS,IAAA,WAAAC,MASA,SACEA,GAKA,OAAOs0B,GAASt0B,EAAOgS,KAJvB/Q,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAEI,CAAC,EAGN,KAAA+yB,CAAA,CAtGU,YA4HG3zB,GAAaL,EAAgB6xB,GAC3C,IAAMzS,EAASkV,GAASt0B,EAAO6xB,EAAQ,CAAEoB,QAAQ,IAEjD,GAAI7T,EAAO,GACT,MAAMA,EAAO,GAEb,OAAOA,EAAO,EAEjB,UAoBeoV,GAASx0B,EAAgB6xB,GAEvC,OADeyC,GAASt0B,EAAO6xB,GAChB,EAChB,UAOeyC,GACdt0B,EACA6xB,GAII,IAEE4C,EAAS9B,GAAI3yB,EAAO6xB,EAL1B5wB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAGI,CAAC,GAGCyzB,WFvIyBC,GAC/B,IAAAC,EAAwBD,EAAMrC,OAAtB/pB,EAAFqsB,EAAErsB,KAAMvI,EAAA40B,EAAA50B,MACd,OAAOuI,OAAO/G,EAAYxB,CAC3B,CEoIe60B,CAAcJ,GAE5B,GAAIC,EAAM,GAAI,CACZ,IAAMhH,EAAQ,IAAI8C,GAAYkE,EAAM,IAAtBxC,EAAAA,GAAAA,KAAAU,MAA0B,SAAAkC,IAAA,IAAAjrB,EAAAD,EAAA2pB,EAAA,OAAArB,EAAAA,GAAAA,KAAAC,MAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,OAAAzoB,GAAAnL,EAAAA,GAAAA,GACtB+1B,GAAhBM,EAAA1C,KAAA,EAAAxoB,EAAAxB,IAAA,WAAAuB,EAAAC,EAAAvB,KAAAC,KAAA,CAAAwsB,EAAAzC,KAAA,cAAWiB,EAAX3pB,EAAA5J,OACQ,GAAN,CAAA+0B,EAAAzC,KAAA,QACE,OADFyC,EAAAzC,KAAA,EACQiB,EAAE,GAAR,OAAAwB,EAAAzC,KAAA,gBAAAyC,EAAAzC,KAAA,iBAAAyC,EAAA1C,KAAA,GAAA0C,EAAAxC,GAAAwC,EAAA,SAAAlrB,EAAAnB,EAAAqsB,EAAAxC,IAAA,eAAAwC,EAAA1C,KAAA,GAAAxoB,EAAAlB,IAAAosB,EAAAvC,OAAA,6BAAAuC,EAAAtC,OAAA,GAAAqC,EAAA,yBAKN,MAAO,CAACpH,OAAOlsB,EAChB,CAEC,MAAO,MAACA,EADEkzB,EAAM,GAGnB,UCpIeM,GAAUr0B,EAAcgzB,GACtC,OAAO,IAAIK,GAAO,CAAE3V,KAAM1d,EAAM+yB,OAAQ,KAAMC,UAAAA,GAC/C,UCrCe3Y,GAA6Bia,GAC3C,OAAO,IAAIjB,GAAO,CAChB3V,KAAM,QACNqV,OAAQuB,EACPvW,SAADwT,EAAAA,GAAAA,KAAAU,MAAA,SAAAlU,EAAS1e,GAAT,IAAAoN,EAAAD,EAAA+nB,EAAA7tB,EAAAI,EAAA,OAAAyqB,EAAAA,GAAAA,KAAAC,MAAA,SAAAgD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,WACM2C,IAAWjtB,MAAMC,QAAQjI,GAA7B,CAAAm1B,EAAA7C,KAAA,SAAAllB,GAAA1O,EAAAA,GAAAA,GACuBsB,EAAM0e,WAA3ByW,EAAA9C,KAAA,EAAAjlB,EAAA/E,IAAA,WAAA8E,EAAAC,EAAA9E,KAAAC,KAAA,CAAA4sB,EAAA7C,KAAA,SACE,OADF4C,GAAA5d,EAAAA,EAAAA,GAAAnK,EAAAnN,MAAA,GAAYqH,EAAD6tB,EAAC,GAAGztB,EAAJytB,EAAC,GAADC,EAAA7C,KAAA,EACH,CAACjrB,EAAGI,EAAGwtB,GAAb,OAAAE,EAAA7C,KAAA,gBAAA6C,EAAA7C,KAAA,iBAAA6C,EAAA9C,KAAA,GAAA8C,EAAA5C,GAAA4C,EAAA,SAAA/nB,EAAA1E,EAAAysB,EAAA5C,IAAA,eAAA4C,EAAA9C,KAAA,GAAAjlB,EAAAzE,IAAAwsB,EAAA3C,OAAA,6BAAA2C,EAAA1C,OAAA,GAAA/T,EAAA,wBAIN+U,QAAO,SAACzzB,GACN,OAAOgI,MAAMC,QAAQjI,GAASA,EAAMmO,QAAUnO,CAC/C,EACD2zB,UAAS,SAAC3zB,GACR,OACEgI,MAAMC,QAAQjI,IAAd,0CAC0CyxB,GAAMzxB,EAEnD,GAEJ,UAMeyd,KACd,OAAOuX,GAAO,WAAY,SAAAh1B,GACxB,MAAwB,mBAAVA,CACf,GACF,UAoEemQ,GACdilB,GAEA,OAAOJ,GAAO,YAAa,SAAAh1B,GACzB,OACEA,aAAiBo1B,GAAjB,eACgBA,EAAMz0B,KADtB,6BACwD8wB,GAAMzxB,EAEjE,GACF,UAqGeq1B,GAAWC,GACzB,IAAMC,EAAc9D,GAAM6D,GACpB/B,SAAW+B,EACjB,OAAO,IAAItB,GAAO,CAChB3V,KAAM,UACNqV,OACQ,WAANH,GAAwB,WAANA,GAAwB,YAANA,EAAkB+B,EAAW,KACnE3B,UAAS,SAAC3zB,GACR,OACEA,IAAUs1B,GAAV,yBAC0BC,EAD1B,oBAC0D9D,GAAMzxB,EAEnE,GAEJ,UAwCew1B,KACd,OAAOR,GAAO,SAAS,kBAAM,CAAhB,GACd,UAMeS,GAAe5D,GAC7B,OAAO,IAAImC,IAAJzN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFsL,GADa,IAEhB8B,UAAW,SAAC3zB,EAAOwnB,GAAR,OAA0B,OAAVxnB,GAAkB6xB,EAAO8B,UAAU3zB,EAAOwnB,EAFrD,EAGhBsM,QAAS,SAAC9zB,EAAOwnB,GAAR,OAA0B,OAAVxnB,GAAkB6xB,EAAOiC,QAAQ9zB,EAAOwnB,EAAtB,IAE9C,UAMejY,KACd,OAAOylB,GAAO,UAAW,SAAAh1B,GACvB,MACoB,kBAAVA,IAAuBqb,MAAMrb,IAArC,oCACoCyxB,GAAMzxB,EAE7C,GACF,UAgDe01B,GAAe7D,GAC7B,OAAO,IAAImC,IAAJzN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFsL,GADa,IAEhB8B,UAAW,SAAC3zB,EAAOwnB,GAAR,YACChmB,IAAVxB,GAAuB6xB,EAAO8B,UAAU3zB,EAAOwnB,EAHjC,EAIhBsM,QAAS,SAAC9zB,EAAOwnB,GAAR,YAA0BhmB,IAAVxB,GAAuB6xB,EAAOiC,QAAQ9zB,EAAOwnB,EAAtB,IAEnD,UASemO,GACdC,EACAC,GAEA,OAAO,IAAI7B,GAAO,CAChB3V,KAAM,SACNqV,OAAQ,KACPhV,SAADwT,EAAAA,GAAAA,KAAAU,MAAA,SAAAlU,EAAS1e,GAAT,IAAA4c,EAAAnV,EAAA,OAAAyqB,EAAAA,GAAAA,KAAAC,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,WACMhB,GAAStxB,GAAb,CAAA81B,EAAAxD,KAAA,SAAAwD,EAAAvD,IAAAL,EAAAA,GAAAA,KAAA6D,KACkB/1B,GAAhB,WAAA81B,EAAAjC,GAAAiC,EAAAvD,MAAAhqB,KAAA,CAAAutB,EAAAxD,KAAA,SAEE,OAFS1V,EAAXkZ,EAAAjC,GAAA7zB,MACQyH,EAAIzH,EAAM4c,GAAhBkZ,EAAAxD,KAAA,EACM,CAAC1V,EAAGA,EAAGgZ,GAAb,OACA,OADAE,EAAAxD,KAAA,EACM,CAAC1V,EAAGnV,EAAGouB,GAAb,OAAAC,EAAAxD,KAAA,iCAAAwD,EAAArD,OAAA,GAAA/T,EAAA,IAINiV,UAAS,SAAC3zB,GACR,OACEsxB,GAAStxB,IAAT,qCAAwDyxB,GAAMzxB,EAEjE,GAEJ,UAiDe0d,KACd,OAAOsX,GAAO,UAAW,SAAAh1B,GACvB,MACmB,kBAAVA,GAAP,oCACoCyxB,GAAMzxB,EAE7C,GACF,UAsDe00B,GAAMsB,GACpB,IAAMC,EAAQT,KAEd,OAAO,IAAIxB,GAAO,CAChB3V,KAAM,QACNqV,OAAQ,KACPhV,SAADwT,EAAAA,GAAAA,KAAAU,MAAA,SAAAlU,EAAS1e,GAAT,IAAAP,EAAA4H,EAAA,OAAA6qB,EAAAA,GAAAA,KAAAC,MAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,WACMtqB,MAAMC,QAAQjI,GAAlB,CAAAk2B,EAAA5D,KAAA,QACQ7yB,EAASkC,KAAKimB,IAAIoO,EAASv2B,OAAQO,EAAMP,QAEtC4H,EAAI,EAAb,YAAgBA,EAAI5H,GAApB,CAAAy2B,EAAA5D,KAAA,QACE,OADF4D,EAAA5D,KAAA,EACQ,CAACjrB,EAAGrH,EAAMqH,GAAI2uB,EAAS3uB,IAAM4uB,GAAnC,OAD0B5uB,IAA5B6uB,EAAA5D,KAAA,gCAAA4D,EAAAzD,OAAA,GAAA/T,EAAA,IAKJiV,UAAS,SAAC3zB,GACR,OACEgI,MAAMC,QAAQjI,IAAd,oCACoCyxB,GAAMzxB,EAE7C,GAEJ,UASeqe,GACdqV,GAEA,IAAMqC,EAAO31B,OAAO21B,KAAKrC,GACzB,OAAO,IAAIM,GAAO,CAChB3V,KAAM,OACNqV,OAAAA,EACChV,SAADwT,EAAAA,GAAAA,KAAAU,MAAA,SAAAlU,EAAS1e,GAAT,IAAAwe,EAAA2X,EAAAvZ,EAAA,OAAAsV,EAAAA,GAAAA,KAAAC,MAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,WACMhB,GAAStxB,GAAb,CAAAo2B,EAAA9D,KAAA,QAAA9T,EAAA,EAAA2X,EACkBJ,EAAhB,YAAAvX,EAAA2X,EAAA12B,QAAA,CAAA22B,EAAA9D,KAAA,QACE,OADS1V,EAAXuZ,EAAA3X,GAAA4X,EAAA9D,KAAA,EACQ,CAAC1V,EAAG5c,EAAM4c,GAAI8W,EAAO9W,IAA3B,OAAA4B,IAAA4X,EAAA9D,KAAA,gCAAA8D,EAAA3D,OAAA,GAAA/T,EAAA,IAINiV,UAAS,SAAC3zB,GACR,OACEsxB,GAAStxB,IAAT,qCAAwDyxB,GAAMzxB,EAEjE,GAEJ,UAwDe+L,GAAMsqB,GACpB,IAAMd,EAAcc,EAAQjf,KAAK,SAAA/O,GAAD,OAAOA,EAAEgW,IAArB,IAA2B6S,KAAK,OACpD,OAAO,IAAI8C,GAAO,CAChB3V,KAAM,QACNqV,OAAQ,KACRC,UAAS,SAAC3zB,EAAOwnB,GACf,IAEA8O,EAFM3F,EAAW,GAAjB4F,GAAA73B,EAAAA,GAAAA,GAEgB23B,GAAhB,QAAAE,EAAAluB,MAAAiuB,EAAAC,EAAAjuB,KAAAC,MAAyB,KACvBiuB,EAAoB7D,GAAI3yB,EAD1Bs2B,EAAAt2B,MACoCwnB,GAAxBiN,GAAVgC,EAAAA,GAAAA,GAAAD,GAAMroB,MAAA,GAGN,KAFAmJ,EAAAA,EAAAA,GAAgBmd,EAAhB,GAAO,GAEI,GACT,MAAO,GACF,IACLiC,EADKC,GAAAj4B,EAAAA,GAAAA,GACmB+1B,GAAxB,QAAAkC,EAAAtuB,MAAAquB,EAAAC,EAAAruB,KAAAC,MAAgC,KAApBmoB,GAAoBpZ,EAAAA,EAAAA,GAAAof,EAAA12B,MAAA,GAApB,GACN0wB,GACFC,EAASrpB,KAAKopB,EAEjB,QAAAjoB,GAAAkuB,EAAAjuB,EAAAD,EAAA,SAAAkuB,EAAAhuB,GAAA,CAEJ,QAAAF,GAAA8tB,EAAA7tB,EAAAD,EAAA,SAAA8tB,EAAA5tB,GAAA,CAED,MAAO,8CACyC4sB,EADzC,oBACyE9D,GAC5EzxB,IAFGyP,OAIFkhB,EAEN,GAEJ,UAMeiG,KACd,OAAO5B,GAAO,WAAW,kBAAM,CAAlB,GACd,UCtoBe/B,GACdpB,EACA3N,EACAuP,GAEA,OAAO,IAAIO,IAAJzN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFsL,GADa,IAEhB4B,QAAS,SAACzzB,EAAOwnB,GACf,OAAOgN,GAAGx0B,EAAOkkB,GACb2N,EAAO4B,QAAQA,EAAQzzB,EAAOwnB,GAAMA,GACpCqK,EAAO4B,QAAQzzB,EAAOwnB,EAC3B,IAEJ,CCLD,mEAPOqP,GAAmE,GAA1DC,GAA8D,GAAnDC,GAAuD,GAC5E3c,GAAsBzG,OAAO,GAC7B0G,GAAsB1G,OAAO,GAC7B2G,GAAsB3G,OAAO,GAC7BqjB,GAAsBrjB,OAAO,GAC7BsjB,GAAwBtjB,OAAO,KAC/BujB,GAAyBvjB,OAAO,KAC7BwjB,GAAQ,EAAG/J,GAAI/S,GAAKmF,GAAI,EAAGE,GAAI,EAAGyX,GAAQ,GAAIA,KAAS,CAC9D,IAAAhiB,GACS,CAACuK,IAAI,EAAIF,GAAI,EAAIE,IAAK,GAA9BF,GAACrK,GAAA,GAAEuK,GAACvK,GAAA,GACL0hB,GAAQvvB,KAAK,GAAK,EAAIoY,GAAIF,KAE1BsX,GAAUxvB,MAAQ6vB,GAAQ,IAAMA,GAAQ,GAAM,EAAK,IAGnD,IADA,IAAI5D,GAAInZ,GACCa,GAAI,EAAGA,GAAI,EAAGA,MACrBmS,IAAMA,IAAK/S,IAAS+S,IAAK4J,IAAOE,IAAWD,IACnC3c,KAAKiZ,IAAKlZ,KAASA,IAAuB1G,OAAOsH,KAAMZ,IAEjE0c,GAAWzvB,KAAKisB,IAElB,IAAA6D,GAAmD7yB,EAAMwyB,IAAY,GAAKM,IAAA/f,EAAAA,EAAAA,GAAA8f,GAAA,GAAnEE,GAAWD,GAAA,GAAEE,GAAWF,GAAA,GAGzBG,GAAQ,SAACzjB,EAAWC,EAAW3L,GAAS,OAAMA,EAAI,GAAKiN,EAAOvB,EAAGC,EAAG3L,GAAK+M,EAAOrB,EAAGC,EAAG3L,EAAE,EACxFovB,GAAQ,SAAC1jB,EAAWC,EAAW3L,GAAS,OAAMA,EAAI,GAAKkN,EAAOxB,EAAGC,EAAG3L,GAAKgN,EAAOtB,EAAGC,EAAG3L,EAAE,EA8CvF,IAAMqvB,GAAO,SAAA7kB,IAAAlU,EAAAA,EAAAA,GAAA+4B,EAAA7kB,GAAA,IAAA9R,GAAAnC,EAAAA,EAAAA,GAAA84B,GAQlB,SAAAA,EACSznB,EACA0nB,EACA3nB,GAEsB,IAAA1O,EhBnFbyP,EgBkFN6mB,EAAA32B,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,IAAAA,UAAA,GACA42B,EAAA52B,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAiB,GAM3B,IAN6BpC,EAAAA,EAAAA,GAAA,KAAA64B,IAE7Bp2B,EAAAP,EAAAU,KAAA,OANOwO,SAAAA,EACA3O,EAAAq2B,OAAAA,EACAr2B,EAAA0O,UAAAA,EACG1O,EAAAs2B,UAAAA,EACAt2B,EAAAu2B,OAAAA,EAXFv2B,EAAA0R,IAAM,EACN1R,EAAAw2B,OAAS,EACTx2B,EAAAgP,UAAW,EAEXhP,EAAA+O,WAAY,EAWpBd,EAAOS,GAEH,GAAK1O,EAAK2O,UAAY3O,EAAK2O,UAAY,IACzC,MAAM,IAAI/O,MAAM,4CAEa,OAD/BI,EAAK8S,MAAQ,IAAIlV,WAAW,KAC5BoC,EAAKy2B,ShB5FWhnB,EgB4FGzP,EAAK8S,MhB3F1B,IAAIjD,YAAYJ,EAAIxR,OAAQwR,EAAIvR,WAAYmC,KAAKC,MAAMmP,EAAIE,WAAa,KgB2FvC3P,CACjC,CAgFC,OAhFAxC,EAAAA,EAAAA,GAAA44B,EAAA,EAAA33B,IAAA,SAAAC,MACS,YAnEN,SAAkBqI,GAGtB,IAHyD,IAAnBwvB,EAAA52B,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAiB,GACjD2oB,EAAI,IAAIzY,YAAY,IAEjBgmB,EAAQ,GAAKU,EAAQV,EAAQ,GAAIA,IAAS,CAEjD,IAAK,IAAI3X,EAAI,EAAGA,EAAI,GAAIA,IAAKoK,EAAEpK,GAAKnX,EAAEmX,GAAKnX,EAAEmX,EAAI,IAAMnX,EAAEmX,EAAI,IAAMnX,EAAEmX,EAAI,IAAMnX,EAAEmX,EAAI,IACrF,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAO3B,IANA,IAAMwY,GAAQxY,EAAI,GAAK,GACjByY,GAAQzY,EAAI,GAAK,GACjB0Y,EAAKtO,EAAEqO,GACPE,EAAKvO,EAAEqO,EAAO,GACdG,EAAKZ,GAAMU,EAAIC,EAAI,GAAKvO,EAAEoO,GAC1BK,EAAKZ,GAAMS,EAAIC,EAAI,GAAKvO,EAAEoO,EAAO,GAC9BtY,EAAI,EAAGA,EAAI,GAAIA,GAAK,GAC3BrX,EAAEmX,EAAIE,IAAM0Y,EACZ/vB,EAAEmX,EAAIE,EAAI,IAAM2Y,EAMpB,IAFA,IAAIC,EAAOjwB,EAAE,GACTkwB,EAAOlwB,EAAE,GACJkrB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAM9pB,EAAQqtB,GAAUvD,GAClB6E,EAAKZ,GAAMc,EAAMC,EAAM9uB,GACvB4uB,EAAKZ,GAAMa,EAAMC,EAAM9uB,GACvB+uB,EAAK3B,GAAQtD,GACnB+E,EAAOjwB,EAAEmwB,GACTD,EAAOlwB,EAAEmwB,EAAK,GACdnwB,EAAEmwB,GAAMJ,EACR/vB,EAAEmwB,EAAK,GAAKH,EAGd,IAAK,IAAI3Y,EAAI,EAAGA,EAAI,GAAIA,GAAK,GAAI,CAC/B,IAAK,IAAIF,EAAI,EAAGA,EAAI,GAAIA,IAAKoK,EAAEpK,GAAKnX,EAAEqX,EAAIF,GAC1C,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAAKnX,EAAEqX,EAAIF,KAAOoK,GAAGpK,EAAI,GAAK,IAAMoK,GAAGpK,EAAI,GAAK,IAG1EnX,EAAE,IAAMivB,GAAYH,GACpB9uB,EAAE,IAAMkvB,GAAYJ,GAEtBvN,EAAEpW,KAAK,EACT,CA2BIilB,CAAQzmB,KAAK+lB,QAAS/lB,KAAK6lB,QAC3B7lB,KAAK8lB,OAAS,EACd9lB,KAAKgB,IAAM,CACb,GAAC,CAAAjT,IAAA,SAAAC,MACD,SAAOwR,GACLtB,EAAO8B,MAIP,IAHA,IAAQ/B,EAAoB+B,KAApB/B,SAAUmE,EAAUpC,KAAVoC,MAEZlB,GADN1B,EAAOD,EAAQC,IACE/R,OACRuT,EAAM,EAAGA,EAAME,GAAO,CAE7B,IADA,IAAMC,EAAOxR,KAAK8O,IAAIR,EAAW+B,KAAKgB,IAAKE,EAAMF,GACxC3L,EAAI,EAAGA,EAAI8L,EAAM9L,IAAK+M,EAAMpC,KAAKgB,QAAUxB,EAAKwB,KACrDhB,KAAKgB,MAAQ/C,GAAU+B,KAAK0mB,SAElC,OAAO1mB,IACT,GAAC,CAAAjS,IAAA,SAAAC,MACS,WACR,IAAIgS,KAAK1B,SAAT,CACA0B,KAAK1B,UAAW,EAChB,IAAQ8D,EAAiCpC,KAAjCoC,MAAOujB,EAA0B3lB,KAA1B2lB,OAAQ3kB,EAAkBhB,KAAlBgB,IAAK/C,EAAa+B,KAAb/B,SAE5BmE,EAAMpB,IAAQ2kB,EACU,KAAV,IAATA,IAAwB3kB,IAAQ/C,EAAW,GAAG+B,KAAK0mB,SACxDtkB,EAAMnE,EAAW,IAAM,IACvB+B,KAAK0mB,QAPoB,CAQ3B,GAAC,CAAA34B,IAAA,YAAAC,MACS,SAAUwQ,GAClBN,EAAO8B,MAAM,GACbtC,EAAMc,GACNwB,KAAKwgB,SAGL,IAFA,IAAMmG,EAAY3mB,KAAKoC,MACfnE,EAAa+B,KAAb/B,SACC+C,EAAM,EAAGE,EAAM1C,EAAI/Q,OAAQuT,EAAME,GAAO,CAC3ClB,KAAK8lB,QAAU7nB,GAAU+B,KAAK0mB,SAClC,IAAMvlB,EAAOxR,KAAK8O,IAAIR,EAAW+B,KAAK8lB,OAAQ5kB,EAAMF,GACpDxC,EAAIsB,IAAI6mB,EAAUvlB,SAASpB,KAAK8lB,OAAQ9lB,KAAK8lB,OAAS3kB,GAAOH,GAC7DhB,KAAK8lB,QAAU3kB,EACfH,GAAOG,EAET,OAAO3C,CACT,GAAC,CAAAzQ,IAAA,UAAAC,MACD,SAAQwQ,GAEN,IAAKwB,KAAK4lB,UAAW,MAAM,IAAI12B,MAAM,yCACrC,OAAO8Q,KAAK4mB,UAAUpoB,EACxB,GAAC,CAAAzQ,IAAA,MAAAC,MACD,SAAI0P,GAEF,OADAH,EAAOG,GACAsC,KAAK6mB,QAAQ,IAAI35B,WAAWwQ,GACrC,GAAC,CAAA3P,IAAA,aAAAC,MACD,SAAWwQ,GAET,GADAD,EAAOC,EAAKwB,MACRA,KAAK1B,SAAU,MAAM,IAAIpP,MAAM,+BAGnC,OAFA8Q,KAAK4mB,UAAUpoB,GACfwB,KAAKwC,UACEhE,CACT,GAAC,CAAAzQ,IAAA,SAAAC,MACD,WACE,OAAOgS,KAAKsC,WAAW,IAAIpV,WAAW8S,KAAKhC,WAC7C,GAAC,CAAAjQ,IAAA,UAAAC,MACD,WACEgS,KAAK3B,WAAY,EACjB2B,KAAKoC,MAAMZ,KAAK,EAClB,GAAC,CAAAzT,IAAA,aAAAC,MACD,SAAWyU,GACT,IAAQxE,EAAmD+B,KAAnD/B,SAAU0nB,EAAyC3lB,KAAzC2lB,OAAQ3nB,EAAiCgC,KAAjChC,UAAW6nB,EAAsB7lB,KAAtB6lB,OAAQD,EAAc5lB,KAAd4lB,UAY7C,OAXAnjB,IAAAA,EAAO,IAAIijB,EAAOznB,EAAU0nB,EAAQ3nB,EAAW4nB,EAAWC,IAC1DpjB,EAAGsjB,QAAQjmB,IAAIE,KAAK+lB,SACpBtjB,EAAGzB,IAAMhB,KAAKgB,IACdyB,EAAGqjB,OAAS9lB,KAAK8lB,OACjBrjB,EAAGnE,SAAW0B,KAAK1B,SACnBmE,EAAGojB,OAASA,EAEZpjB,EAAGkjB,OAASA,EACZljB,EAAGzE,UAAYA,EACfyE,EAAGmjB,UAAYA,EACfnjB,EAAGpE,UAAY2B,KAAK3B,UACboE,CACT,KAACijB,CAAA,CAvGiB,CAAQ3lB,GA0GtBmL,GAAM,SAACya,EAAgB1nB,EAAkBD,GAAiB,OAC9DkC,GAAgB,kBAAM,IAAIwlB,GAAOznB,EAAU0nB,EAAQ3nB,EAAU,GAAC,EAenD8oB,GAA6B5b,GAAI,EAAM,IAAK,IC9M5C6b,GAAwB,SAAAlmB,IAAAlU,EAAAA,EAAAA,GAAAo6B,EAAAlmB,GAAA,IAAA9R,GAAAnC,EAAAA,EAAAA,GAAAm6B,GAQnC,SAAAA,EAAYhpB,EAAaF,GAAW,IAAAvO,GAAAzC,EAAAA,EAAAA,GAAA,KAAAk6B,IAClCz3B,EAAAP,EAAAU,KAAA,OAJM6O,UAAW,EACXhP,EAAA+O,WAAY,EAIlB2oB,EAAWjpB,GACX,IAAMhQ,EAAMwR,EAAQ1B,GAEpB,GADAvO,EAAK23B,MAAQlpB,EAAK1P,SACe,oBAAtBiB,EAAK23B,MAAM3mB,OACpB,MAAM,IAAIpR,MAAM,uDAClBI,EAAK2O,SAAW3O,EAAK23B,MAAMhpB,SAC3B3O,EAAK0O,UAAY1O,EAAK23B,MAAMjpB,UAC5B,IAAMC,EAAW3O,EAAK2O,SAChB2B,EAAM,IAAI1S,WAAW+Q,GAE3B2B,EAAIE,IAAI/R,EAAIN,OAASwQ,EAAWF,EAAK1P,SAASiS,OAAOvS,GAAKwS,SAAWxS,GACrE,IAAK,IAAIsH,EAAI,EAAGA,EAAIuK,EAAInS,OAAQ4H,IAAKuK,EAAIvK,IAAM,GAC/C/F,EAAK23B,MAAM3mB,OAAOV,GAElBtQ,EAAK43B,MAAQnpB,EAAK1P,SAElB,IAAK,IAAIgH,EAAI,EAAGA,EAAIuK,EAAInS,OAAQ4H,IAAKuK,EAAIvK,IAAM,IAEnC,OADZ/F,EAAK43B,MAAM5mB,OAAOV,GAClBA,EAAI4B,KAAK,GAAGlS,CACd,CAqCC,OArCAxC,EAAAA,EAAAA,GAAAi6B,EAAA,EAAAh5B,IAAA,SAAAC,MACD,SAAOm5B,GAGL,OAFAC,EAAapnB,MACbA,KAAKinB,MAAM3mB,OAAO6mB,GACXnnB,IACT,GAAC,CAAAjS,IAAA,aAAAC,MACD,SAAWwQ,GACT4oB,EAAapnB,MACbqnB,EAAY7oB,EAAKwB,KAAKhC,WACtBgC,KAAK1B,UAAW,EAChB0B,KAAKinB,MAAM3kB,WAAW9D,GACtBwB,KAAKknB,MAAM5mB,OAAO9B,GAClBwB,KAAKknB,MAAM5kB,WAAW9D,GACtBwB,KAAKwC,SACP,GAAC,CAAAzU,IAAA,SAAAC,MACD,WACE,IAAMwQ,EAAM,IAAItR,WAAW8S,KAAKknB,MAAMlpB,WAEtC,OADAgC,KAAKsC,WAAW9D,GACTA,CACT,GAAC,CAAAzQ,IAAA,aAAAC,MACD,SAAWyU,GAETA,IAAAA,EAAOrU,OAAOC,OAAOD,OAAOk5B,eAAetnB,MAAO,CAAC,IACnD,IAAQknB,EAA2DlnB,KAA3DknB,MAAOD,EAAoDjnB,KAApDinB,MAAO3oB,EAA6C0B,KAA7C1B,SAAUD,EAAmC2B,KAAnC3B,UAAWJ,EAAwB+B,KAAxB/B,SAAUD,EAAcgC,KAAdhC,UAQrD,OANAyE,EAAGnE,SAAWA,EACdmE,EAAGpE,UAAYA,EACfoE,EAAGxE,SAAWA,EACdwE,EAAGzE,UAAYA,EACfyE,EAAGykB,MAAQA,EAAMjnB,WAAWwC,EAAGykB,OAC/BzkB,EAAGwkB,MAAQA,EAAMhnB,WAAWwC,EAAGwkB,OACxBxkB,CACT,GAAC,CAAA1U,IAAA,UAAAC,MACD,WACEgS,KAAK3B,WAAY,EACjB2B,KAAKknB,MAAM1kB,UACXxC,KAAKinB,MAAMzkB,SACb,KAACukB,CAAA,CAlEkC,CAAQhnB,GA2EhCwnB,GAAO,SAACxpB,EAAahQ,EAAY8wB,GAAc,OAC1D,IAAIkI,GAAUhpB,EAAMhQ,GAAKuS,OAAOue,GAASte,QAAQ,EACnDgnB,GAAKl5B,OAAS,SAAC0P,EAAahQ,GAAU,OAAK,IAAIg5B,GAAUhpB,EAAMhQ,EAAI,ECoDnE,IAAyBy5B,GAAyB3S,GAAR4S,GAAQ5S,EACrC6S,GAAM,CAEjBC,IAAG,SAAAC,IAAAj7B,EAAAA,EAAAA,GAAAk7B,EAAAD,GAAA,IAAA74B,GAAAnC,EAAAA,EAAAA,GAAAi7B,GACD,SAAAA,IAAkB,IAANha,EAAC5e,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,GAAE,OAAApC,EAAAA,EAAAA,GAAA,KAAAg7B,GAAA94B,EAAAU,KAAA,KACVoe,EACR,CAAC,OAAA/gB,EAAAA,EAAAA,GAAA+6B,EAAA,CAHA,EAGAzI,EAAAA,GAAAA,GAHuBlwB,QAK1B44B,UAAS,SAACtoB,GACR,IAAawY,EAAM0P,GAAXC,IACR,GAAInoB,EAAK/R,OAAS,GAAiB,IAAZ+R,EAAK,GAAa,MAAM,IAAIwY,EAAE,iCACrD,IAAM9W,EAAM1B,EAAK,GACX+C,EAAM/C,EAAK4B,SAAS,EAAGF,EAAM,GACnC,IAAKA,GAAOqB,EAAI9U,SAAWyT,EAAK,MAAM,IAAI8W,EAAE,2CAK5C,GAAa,IAATzV,EAAI,GAAiB,MAAM,IAAIyV,EAAE,uCACrC,GAAe,IAAXzV,EAAI,MAA0B,IAATA,EAAI,IAC3B,MAAM,IAAIyV,EAAE,uDACd,MAAO,CAAEtH,EAAG8W,GAAIjlB,GAAMP,EAAGxC,EAAK4B,SAASF,EAAM,GAC/C,EACA6mB,MAAK,SAACpf,GAEJ,IAAaqP,EAAM0P,GAAXC,IACFnoB,EAAsB,kBAARmJ,EAAmB8e,GAAI9e,GAAOA,EAClD,KAAMnJ,aAAgBtS,YAAa,MAAM,IAAIgC,MAAM,iBACnD,IAAI8S,EAAIxC,EAAK/R,OACb,GAAIuU,EAAI,GAAgB,IAAXxC,EAAK,GAAY,MAAM,IAAIwY,EAAE,yBAC1C,GAAIxY,EAAK,KAAOwC,EAAI,EAAG,MAAM,IAAIgW,EAAE,uCACnC,IAAAgQ,EAA4BN,GAAII,UAAUtoB,EAAK4B,SAAS,IAA7CzB,EAACqoB,EAAJtX,EAASuX,EAAMD,EAAThmB,EACdkmB,EAAgCR,GAAII,UAAUG,GAAnC5xB,EAAC6xB,EAAJxX,EACR,GAD2BwX,EAAblmB,EACCvU,OAAQ,MAAM,IAAIuqB,EAAE,+CACnC,MAAO,CAAErY,EAAAA,EAAGtJ,EAAAA,EACd,EACA8xB,WAAU,SAAC7M,GAET,IAAMnf,EAAQ,SAAC9F,GAAS,OAA0C,EAA5BxI,OAAOub,SAAS/S,EAAE,GAAI,IAAe,KAAOA,EAAIA,CAAC,EACjF0L,EAAI,SAAC8G,GACT,IAAMF,EAAME,EAAIvM,SAAS,IACzB,OAAoB,EAAbqM,EAAIlb,OAAa,IAAHgQ,OAAOkL,GAAQA,CACtC,EACMtS,EAAI8F,EAAM4F,EAAEuZ,EAAIjlB,IAChBsJ,EAAIxD,EAAM4F,EAAEuZ,EAAI3b,IAChByoB,EAAM/xB,EAAE5I,OAAS,EACjB46B,EAAM1oB,EAAElS,OAAS,EACjB0d,EAAKpJ,EAAEqmB,GACPE,EAAKvmB,EAAEsmB,GACb,MAAO,KAAP5qB,OAAYsE,EAAEsmB,EAAMD,EAAM,GAAE,MAAA3qB,OAAK6qB,GAAE7qB,OAAGkC,EAAC,MAAAlC,OAAK0N,GAAE1N,OAAGpH,EACnD,GAKI+R,GAAMzG,OAAO,GAAI0G,GAAM1G,OAAO,GAAqBoL,IAAXpL,OAAO,GAAUA,OAAO,IAAUA,OAAO,GAEjF,SAAU4mB,GAAqBlW,GACnC,IAAMuC,EApGR,SAA8BT,GAC5B,IAAM9B,EAAO6B,GAAcC,GAC3BU,GACExC,EACA,CACExT,EAAG,QACH5R,EAAG,SAEL,CACEu7B,yBAA0B,QAC1BC,eAAgB,UAChBC,cAAe,WACf7M,cAAe,WACf8M,mBAAoB,UACpBhX,UAAW,WACXpS,QAAS,aAGb,IAAQqpB,EAAgBvW,EAAhBuW,KAAM9c,EAAUuG,EAAVvG,GAAIjN,EAAMwT,EAANxT,EAClB,GAAI+pB,EAAM,CACR,IAAK9c,EAAGoC,IAAIrP,EAAGiN,EAAGmD,MAChB,MAAM,IAAI/f,MAAM,qEAElB,GACkB,kBAAT05B,GACc,kBAAdA,EAAKC,MACgB,oBAArBD,EAAKE,YAEZ,MAAM,IAAI55B,MAAM,qEAGpB,OAAOd,OAAO+hB,QAAMoE,EAAAA,EAAAA,GAAC,CAAC,EAAIlC,GAC5B,CAoEgB0W,CAAkB1W,GACxBvG,EAAO8I,EAAP9I,GAEFvM,EACJqV,EAAMrV,SACL,SAACypB,EAAwBhP,EAAyBiP,GACjD,IAAMpqB,EAAImb,EAAMvD,WAChB,OAAO5B,GAAe3nB,WAAWI,KAAK,CAAC,IAAQwe,EAAGvM,QAAQV,EAAE2O,GAAI1B,EAAGvM,QAAQV,EAAE6O,GAC/E,EACIiE,EACJiD,EAAMjD,WACL,SAACjU,GAEA,IAAMwrB,EAAOxrB,EAAM0D,SAAS,GAI5B,MAAO,CAAEoM,EAFC1B,EAAG6F,UAAUuX,EAAK9nB,SAAS,EAAG0K,EAAGmE,QAE/BvC,EADF5B,EAAG6F,UAAUuX,EAAK9nB,SAAS0K,EAAGmE,MAAO,EAAInE,EAAGmE,QAExD,EAMF,SAASkZ,EAAoB3b,GAC3B,IAAQ3O,EAAS+V,EAAT/V,EAAG5R,EAAM2nB,EAAN3nB,EACLm8B,EAAKtd,EAAGqC,IAAIX,GACZ6b,EAAKvd,EAAGwC,IAAI8a,EAAI5b,GACtB,OAAO1B,EAAG3H,IAAI2H,EAAG3H,IAAIklB,EAAIvd,EAAGwC,IAAId,EAAG3O,IAAK5R,EAC1C,CAKA,IAAK6e,EAAGoC,IAAIpC,EAAGqC,IAAIyG,EAAMN,IAAK6U,EAAoBvU,EAAMP,KACtD,MAAM,IAAInlB,MAAM,+CAGlB,SAASo6B,EAAmBzgB,GAC1B,MAAsB,kBAARA,GAAoBT,GAAMS,GAAOA,EAAM+L,EAAMte,CAC7D,CACA,SAASizB,EAAS1gB,GAChB,IAAKygB,EAAmBzgB,GAAM,MAAM,IAAI3Z,MAAM,8CAChD,CAGA,SAASs6B,EAAuBz7B,GAC9B,IAOI8a,EAP8BjL,EAA4CgX,EAAtE4T,yBAAmC9Y,EAAmCkF,EAAnClF,YAAa+Y,EAAsB7T,EAAtB6T,eAAgBnyB,EAAMse,EAANte,EACxE,GAAIsH,GAA0B,kBAAR7P,EAAkB,CAGtC,GAFIA,aAAeb,aAAYa,EAAM8mB,EAAc9mB,IAEhC,kBAARA,IAAqB6P,EAAQE,SAAS/P,EAAIN,QAAS,MAAM,IAAIyB,MAAM,eAC9EnB,EAAMA,EAAI0a,SAAuB,EAAdiH,EAAiB,KAGtC,IACE7G,EACiB,kBAAR9a,EACHA,EACA8mB,GAAmBjL,GAAY,cAAe7b,EAAK2hB,IACzD,MAAOgM,GACP,MAAM,IAAIxsB,MAAM,uBAADuO,OAAwBiS,EAAW,+BAAAjS,cAAqC1P,IAIzF,OAFI06B,IAAgB5f,EAAMsE,GAAQtE,EAAKvS,IACvCizB,EAAS1gB,GACFA,CACT,CAEA,IAAMmN,EAAmB,IAAIC,IAC7B,SAASwT,EAAetT,GACtB,KAAMA,aAAiBC,GAAQ,MAAM,IAAIlnB,MAAM,2BACjD,CACA,IAKMknB,EAAK,WAIT,SAAAA,EAAqBsT,EAAgBC,EAAgBC,GACnD,IADwD/8B,EAAAA,EAAAA,GAAA,KAAAupB,GAArC,KAAAsT,GAAAA,EAAgB,KAAAC,GAAAA,EAAgB,KAAAC,GAAAA,EACzC,MAANF,IAAe5d,EAAGC,QAAQ2d,GAAK,MAAM,IAAIx6B,MAAM,cACnD,GAAU,MAANy6B,IAAe7d,EAAGC,QAAQ4d,GAAK,MAAM,IAAIz6B,MAAM,cACnD,GAAU,MAAN06B,IAAe9d,EAAGC,QAAQ6d,GAAK,MAAM,IAAI16B,MAAM,aACrD,CA6CC,OA1CDpC,EAAAA,EAAAA,GAAAspB,EAAA,EAAAroB,IAAA,IAAAsU,IAWA,WACE,OAAOrC,KAAKyW,WAAWjJ,CACzB,GAAC,CAAAzf,IAAA,IAAAsU,IACD,WACE,OAAOrC,KAAKyW,WAAW/I,CACzB,GAEA,CAAA3f,IAAA,iBAAAC,MAgCA,SAAewkB,GACbxS,KAAKgU,aAAexB,EACpBwD,EAAiBU,OAAO1W,KAC1B,GAEA,CAAAjS,IAAA,iBAAAC,MACA,WACE,GAAIgS,KAAKqQ,MAAO,CAId,GAAIuE,EAAM+T,qBAAuB7c,EAAGuE,IAAIrQ,KAAK2pB,IAAK,OAClD,MAAM,IAAIz6B,MAAM,mBAGlB,IAAAkqB,EAAiBpZ,KAAKyW,WAAdjJ,EAAC4L,EAAD5L,EAAGE,EAAC0L,EAAD1L,EAEX,IAAK5B,EAAGC,QAAQyB,KAAO1B,EAAGC,QAAQ2B,GAAI,MAAM,IAAIxe,MAAM,4BACtD,IAAM26B,EAAO/d,EAAGqC,IAAIT,GACdoc,EAAQX,EAAoB3b,GAClC,IAAK1B,EAAGoC,IAAI2b,EAAMC,GAAQ,MAAM,IAAI56B,MAAM,qCAC1C,IAAK8Q,KAAK0oB,gBAAiB,MAAM,IAAIx5B,MAAM,yCAC7C,GAAC,CAAAnB,IAAA,WAAAC,MACD,WACE,IAAQ0f,EAAM1N,KAAKyW,WAAX/I,EACR,GAAI5B,EAAGwE,MAAO,OAAQxE,EAAGwE,MAAM5C,GAC/B,MAAM,IAAIxe,MAAM,8BAClB,GAEA,CAAAnB,IAAA,SAAAC,MAGA,SAAOmoB,GACLsT,EAAetT,GACf,IAAYgB,EAAuBnX,KAA3B0pB,GAAYtS,EAAepX,KAAnB2pB,GAAYtS,EAAOrX,KAAX4pB,GACZ9S,EAAuBX,EAA3BuT,GAAY3S,EAAeZ,EAAnBwT,GAAY3S,EAAOb,EAAXyT,GAClBG,EAAKje,EAAGoC,IAAIpC,EAAGwC,IAAI6I,EAAIH,GAAKlL,EAAGwC,IAAIwI,EAAIO,IACvC2S,EAAKle,EAAGoC,IAAIpC,EAAGwC,IAAI8I,EAAIJ,GAAKlL,EAAGwC,IAAIyI,EAAIM,IAC7C,OAAO0S,GAAMC,CACf,GAEA,CAAAj8B,IAAA,SAAAC,MAGA,WACE,OAAO,IAAIooB,EAAMpW,KAAK0pB,GAAI5d,EAAGiD,IAAI/O,KAAK2pB,IAAK3pB,KAAK4pB,GAClD,GAKA,CAAA77B,IAAA,SAAAC,MACA,WACE,IAAQ6Q,EAAS+V,EAAT/V,EAAG5R,EAAM2nB,EAAN3nB,EACLg9B,EAAKne,EAAGwC,IAAIrhB,EAAG8f,IACToK,EAAuBnX,KAA3B0pB,GAAYtS,EAAepX,KAAnB2pB,GAAYtS,EAAOrX,KAAX4pB,GACpBxR,EAAKtM,EAAGmD,KAAMoJ,EAAKvM,EAAGmD,KAAMib,EAAKpe,EAAGmD,KACpCsR,EAAKzU,EAAGwC,IAAI6I,EAAIA,GAChB0K,EAAK/V,EAAGwC,IAAI8I,EAAIA,GAChBlI,EAAKpD,EAAGwC,IAAI+I,EAAIA,GAChB0K,EAAKjW,EAAGwC,IAAI6I,EAAIC,GA4BpB,OA3BA2K,EAAKjW,EAAG3H,IAAI4d,EAAIA,GAChBmI,EAAKpe,EAAGwC,IAAI6I,EAAIE,GAChB6S,EAAKpe,EAAG3H,IAAI+lB,EAAIA,GAChB9R,EAAKtM,EAAGwC,IAAIzP,EAAGqrB,GACf7R,EAAKvM,EAAGwC,IAAI2b,EAAI/a,GAChBmJ,EAAKvM,EAAG3H,IAAIiU,EAAIC,GAChBD,EAAKtM,EAAG0C,IAAIqT,EAAIxJ,GAChBA,EAAKvM,EAAG3H,IAAI0d,EAAIxJ,GAChBA,EAAKvM,EAAGwC,IAAI8J,EAAIC,GAChBD,EAAKtM,EAAGwC,IAAIyT,EAAI3J,GAChB8R,EAAKpe,EAAGwC,IAAI2b,EAAIC,GAChBhb,EAAKpD,EAAGwC,IAAIzP,EAAGqQ,GACf6S,EAAKjW,EAAG0C,IAAI+R,EAAIrR,GAChB6S,EAAKjW,EAAGwC,IAAIzP,EAAGkjB,GACfA,EAAKjW,EAAG3H,IAAI4d,EAAImI,GAChBA,EAAKpe,EAAG3H,IAAIoc,EAAIA,GAChBA,EAAKzU,EAAG3H,IAAI+lB,EAAI3J,GAChBA,EAAKzU,EAAG3H,IAAIoc,EAAIrR,GAChBqR,EAAKzU,EAAGwC,IAAIiS,EAAIwB,GAChB1J,EAAKvM,EAAG3H,IAAIkU,EAAIkI,GAChBrR,EAAKpD,EAAGwC,IAAI8I,EAAIC,GAChBnI,EAAKpD,EAAG3H,IAAI+K,EAAIA,GAChBqR,EAAKzU,EAAGwC,IAAIY,EAAI6S,GAChB3J,EAAKtM,EAAG0C,IAAI4J,EAAImI,GAChB2J,EAAKpe,EAAGwC,IAAIY,EAAI2S,GAChBqI,EAAKpe,EAAG3H,IAAI+lB,EAAIA,GAET,IAAI9T,EAAMgC,EAAIC,EADrB6R,EAAKpe,EAAG3H,IAAI+lB,EAAIA,GAElB,GAKA,CAAAn8B,IAAA,MAAAC,MACA,SAAImoB,GACFsT,EAAetT,GACf,IAAYgB,EAAuBnX,KAA3B0pB,GAAYtS,EAAepX,KAAnB2pB,GAAYtS,EAAOrX,KAAX4pB,GACZ9S,EAAuBX,EAA3BuT,GAAY3S,EAAeZ,EAAnBwT,GAAY3S,EAAOb,EAAXyT,GACpBxR,EAAKtM,EAAGmD,KAAMoJ,EAAKvM,EAAGmD,KAAMib,EAAKpe,EAAGmD,KAClCpQ,EAAI+V,EAAM/V,EACVorB,EAAKne,EAAGwC,IAAIsG,EAAM3nB,EAAG8f,IACvBwT,EAAKzU,EAAGwC,IAAI6I,EAAIL,GAChB+K,EAAK/V,EAAGwC,IAAI8I,EAAIL,GAChB7H,EAAKpD,EAAGwC,IAAI+I,EAAIL,GAChB+K,EAAKjW,EAAG3H,IAAIgT,EAAIC,GAChB+S,EAAKre,EAAG3H,IAAI2S,EAAIC,GACpBgL,EAAKjW,EAAGwC,IAAIyT,EAAIoI,GAChBA,EAAKre,EAAG3H,IAAIoc,EAAIsB,GAChBE,EAAKjW,EAAG0C,IAAIuT,EAAIoI,GAChBA,EAAKre,EAAG3H,IAAIgT,EAAIE,GAChB,IAAI+S,EAAKte,EAAG3H,IAAI2S,EAAIE,GA+BpB,OA9BAmT,EAAKre,EAAGwC,IAAI6b,EAAIC,GAChBA,EAAKte,EAAG3H,IAAIoc,EAAIrR,GAChBib,EAAKre,EAAG0C,IAAI2b,EAAIC,GAChBA,EAAKte,EAAG3H,IAAIiT,EAAIC,GAChBe,EAAKtM,EAAG3H,IAAI4S,EAAIC,GAChBoT,EAAKte,EAAGwC,IAAI8b,EAAIhS,GAChBA,EAAKtM,EAAG3H,IAAI0d,EAAI3S,GAChBkb,EAAKte,EAAG0C,IAAI4b,EAAIhS,GAChB8R,EAAKpe,EAAGwC,IAAIzP,EAAGsrB,GACf/R,EAAKtM,EAAGwC,IAAI2b,EAAI/a,GAChBgb,EAAKpe,EAAG3H,IAAIiU,EAAI8R,GAChB9R,EAAKtM,EAAG0C,IAAIqT,EAAIqI,GAChBA,EAAKpe,EAAG3H,IAAI0d,EAAIqI,GAChB7R,EAAKvM,EAAGwC,IAAI8J,EAAI8R,GAChBrI,EAAK/V,EAAG3H,IAAIoc,EAAIA,GAChBsB,EAAK/V,EAAG3H,IAAI0d,EAAItB,GAChBrR,EAAKpD,EAAGwC,IAAIzP,EAAGqQ,GACfib,EAAKre,EAAGwC,IAAI2b,EAAIE,GAChBtI,EAAK/V,EAAG3H,IAAI0d,EAAI3S,GAChBA,EAAKpD,EAAG0C,IAAI+R,EAAIrR,GAChBA,EAAKpD,EAAGwC,IAAIzP,EAAGqQ,GACfib,EAAKre,EAAG3H,IAAIgmB,EAAIjb,GAChBqR,EAAKzU,EAAGwC,IAAIuT,EAAIsI,GAChB9R,EAAKvM,EAAG3H,IAAIkU,EAAIkI,GAChBA,EAAKzU,EAAGwC,IAAI8b,EAAID,GAChB/R,EAAKtM,EAAGwC,IAAIyT,EAAI3J,GAChBA,EAAKtM,EAAG0C,IAAI4J,EAAImI,GAChBA,EAAKzU,EAAGwC,IAAIyT,EAAIF,GAChBqI,EAAKpe,EAAGwC,IAAI8b,EAAIF,GAET,IAAI9T,EAAMgC,EAAIC,EADrB6R,EAAKpe,EAAG3H,IAAI+lB,EAAI3J,GAElB,GAAC,CAAAxyB,IAAA,WAAAC,MAED,SAASmoB,GACP,OAAOnW,KAAKmE,IAAIgS,EAAM/D,SACxB,GAAC,CAAArkB,IAAA,MAAAC,MAEO,WACN,OAAOgS,KAAK0X,OAAOtB,EAAMnH,KAC3B,GAAC,CAAAlhB,IAAA,OAAAC,MACO,SAAKsI,GACX,OAAOmiB,EAAK5E,WAAW7T,KAAMgW,EAAkB1f,GAAG,SAAC2d,GACjD,IAAMqF,EAAQxN,EAAGqF,YAAY8C,EAAK7O,KAAI,SAACqL,GAAC,OAAKA,EAAEmZ,EAAE,KACjD,OAAO3V,EAAK7O,KAAI,SAACqL,EAAGpb,GAAC,OAAKob,EAAEgG,SAAS6C,EAAMjkB,GAAG,IAAE+P,IAAIgR,EAAMmD,WAC5D,GACF,GAEA,CAAAxrB,IAAA,iBAAAC,MAKA,SAAesI,GACb,IAAMuiB,EAAIzC,EAAMnH,KAChB,GAAI3Y,IAAM8R,GAAK,OAAOyQ,EAEtB,GADA0Q,EAASjzB,GACLA,IAAM+R,GAAK,OAAOrI,KACtB,IAAQ4oB,EAAShU,EAATgU,KACR,IAAKA,EAAM,OAAOnQ,EAAKhG,aAAazS,KAAM1J,GAO1C,IAJA,IAAA+zB,EAA+BzB,EAAKE,YAAYxyB,GAA1Cg0B,EAAKD,EAALC,MAAOC,EAAEF,EAAFE,GAAIC,EAAKH,EAALG,MAAOC,EAAEJ,EAAFI,GACpBC,EAAM7R,EACN8R,EAAM9R,EACNnI,EAAW1Q,KACRuqB,EAAKniB,IAAOqiB,EAAKriB,IAClBmiB,EAAKliB,KAAKqiB,EAAMA,EAAIvmB,IAAIuM,IACxB+Z,EAAKpiB,KAAKsiB,EAAMA,EAAIxmB,IAAIuM,IAC5BA,EAAIA,EAAEiC,SACN4X,IAAOliB,GACPoiB,IAAOpiB,GAKT,OAHIiiB,IAAOI,EAAMA,EAAItY,UACjBoY,IAAOG,EAAMA,EAAIvY,UACrBuY,EAAM,IAAIvU,EAAMtK,EAAGwC,IAAIqc,EAAIjB,GAAId,EAAKC,MAAO8B,EAAIhB,GAAIgB,EAAIf,IAChDc,EAAIvmB,IAAIwmB,EACjB,GAEA,CAAA58B,IAAA,WAAAC,MASA,SAAS2qB,GACP4Q,EAAS5Q,GACT,IACIqB,EAAc4Q,EADdt0B,EAAIqiB,EAEAiQ,EAAShU,EAATgU,KACR,GAAIA,EAAM,CACR,IAAAiC,EAAiCjC,EAAKE,YAAYxyB,GAA1Cg0B,EAAKO,EAALP,MAAOC,EAAEM,EAAFN,GAAIC,EAAKK,EAALL,MAAOC,EAAEI,EAAFJ,GAC1B7R,EAAyB5Y,KAAKgS,KAAKuY,GAA1BG,EAAG9R,EAANnI,EAAWqa,EAAGlS,EAANjiB,EACdo0B,EAAyB/qB,KAAKgS,KAAKyY,GAA1BE,EAAGI,EAANta,EAAWua,EAAGD,EAANp0B,EACd+zB,EAAMjS,EAAKxG,gBAAgBqY,EAAOI,GAClCC,EAAMlS,EAAKxG,gBAAgBuY,EAAOG,GAClCA,EAAM,IAAIvU,EAAMtK,EAAGwC,IAAIqc,EAAIjB,GAAId,EAAKC,MAAO8B,EAAIhB,GAAIgB,EAAIf,IACvD5P,EAAQ0Q,EAAIvmB,IAAIwmB,GAChBC,EAAOE,EAAI3mB,IAAI6mB,OACV,CACL,IAAAC,EAAiBjrB,KAAKgS,KAAK1b,GAC3B0jB,EADSiR,EAADxa,EAERma,EAFYK,EAADt0B,EAKb,OAAOyf,EAAMsC,WAAW,CAACsB,EAAO4Q,IAAO,EACzC,GAEA,CAAA78B,IAAA,uBAAAC,MAMA,SAAqB0gB,EAAU7P,EAAW5R,GACxC,IAAMgrB,EAAI7B,EAAMjD,KACV7E,EAAM,SACVP,EACAlP,GAAU,OACNA,IAAMuJ,IAAOvJ,IAAMwJ,IAAQ0F,EAAE2J,OAAOO,GAA2BlK,EAAEuM,SAASzb,GAAjCkP,EAAE+K,eAAeja,EAAkB,EAC5ErD,EAAM8S,EAAItO,KAAMnB,GAAGsF,IAAImK,EAAII,EAAGzhB,IACpC,OAAOuO,EAAI6U,WAAQ7gB,EAAYgM,CACjC,GAIA,CAAAzN,IAAA,WAAAC,MACA,SAAS+qB,GACP,IAAYvL,EAAoBxN,KAAxB0pB,GAAWhc,EAAa1N,KAAjB2pB,GAAW3Q,EAAMhZ,KAAV4pB,GAChBvZ,EAAMrQ,KAAKqQ,MAGP,MAAN0I,IAAYA,EAAK1I,EAAMvE,EAAG2C,IAAM3C,EAAGmF,IAAI+H,IAC3C,IAAMC,EAAKnN,EAAGwC,IAAId,EAAGuL,GACfG,EAAKpN,EAAGwC,IAAIZ,EAAGqL,GACfI,EAAKrN,EAAGwC,IAAI0K,EAAGD,GACrB,GAAI1I,EAAK,MAAO,CAAE7C,EAAG1B,EAAGmD,KAAMvB,EAAG5B,EAAGmD,MACpC,IAAKnD,EAAGoC,IAAIiL,EAAIrN,EAAG2C,KAAM,MAAM,IAAIvf,MAAM,oBACzC,MAAO,CAAEse,EAAGyL,EAAIvL,EAAGwL,EACrB,GAAC,CAAAnrB,IAAA,gBAAAC,MACD,WACE,IAAWsnB,EAA4BV,EAA/B7S,EAAa2mB,EAAkB9T,EAAlB8T,cACrB,GAAIpT,IAAajN,GAAK,OAAO,EAC7B,GAAIqgB,EAAe,OAAOA,EAActS,EAAOpW,MAC/C,MAAM,IAAI9Q,MAAM,+DAClB,GAAC,CAAAnB,IAAA,gBAAAC,MACD,WACE,IAAWsnB,EAA4BV,EAA/B7S,EAAa8Z,EAAkBjH,EAAlBiH,cACrB,OAAIvG,IAAajN,GAAYrI,KACzB6b,EAAsBA,EAAczF,EAAOpW,MACxCA,KAAK8Y,eAAelE,EAAM7S,EACnC,GAAC,CAAAhU,IAAA,aAAAC,MAED,WAA8B,IAAnBk9B,IAAYj8B,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,KAAAA,UAAA,GAErB,OADA+Q,KAAKmrB,iBACE5rB,EAAQ6W,EAAOpW,KAAMkrB,EAC9B,GAAC,CAAAn9B,IAAA,QAAAC,MAED,WAAyB,IAAnBk9B,IAAYj8B,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,KAAAA,UAAA,GAChB,OAAO4lB,EAAc7U,KAAKqZ,WAAW6R,GACvC,IAAC,EAAAn9B,IAAA,aAAAC,MAnUD,SAAkByiB,GAChB,IAAAtN,EAAiBsN,GAAK,CAAC,EAAfjD,EAACrK,EAADqK,EAAGE,EAACvK,EAADuK,EACX,IAAK+C,IAAM3E,EAAGC,QAAQyB,KAAO1B,EAAGC,QAAQ2B,GAAI,MAAM,IAAIxe,MAAM,wBAC5D,GAAIuhB,aAAa2F,EAAO,MAAM,IAAIlnB,MAAM,gCACxC,IAAMmhB,EAAM,SAAChb,GAAI,OAAKyW,EAAGoC,IAAI7Y,EAAGyW,EAAGmD,KAAK,EAExC,OAAIoB,EAAI7C,IAAM6C,EAAI3C,GAAW0I,EAAMnH,KAC5B,IAAImH,EAAM5I,EAAGE,EAAG5B,EAAG2C,IAC5B,GAAC,CAAA1gB,IAAA,aAAAC,MAeD,SAAkB8kB,GAChB,IAAMwG,EAAQxN,EAAGqF,YAAY2B,EAAO1N,KAAI,SAACqL,GAAC,OAAKA,EAAEmZ,EAAE,KACnD,OAAO9W,EAAO1N,KAAI,SAACqL,EAAGpb,GAAC,OAAKob,EAAEgG,SAAS6C,EAAMjkB,GAAG,IAAE+P,IAAIgR,EAAMmD,WAC9D,GAEA,CAAAxrB,IAAA,UAAAC,MAIA,SAAe2a,GACb,IAAMoF,EAAIqI,EAAMmD,WAAW5H,EAAU/H,GAAY,WAAYjB,KAE7D,OADAoF,EAAEod,iBACKpd,CACT,GAEA,CAAAhgB,IAAA,iBAAAC,MACA,SAAsBo9B,GACpB,OAAOhV,EAAMjD,KAAKmH,SAASkP,EAAuB4B,GACpD,KAAChV,CAAA,CArDQ,GACOA,EAAAjD,KAAO,IAAIiD,EAAMxB,EAAMP,GAAIO,EAAMN,GAAIxI,EAAG2C,KACxC2H,EAAAnH,KAAO,IAAImH,EAAMtK,EAAGmD,KAAMnD,EAAG2C,IAAK3C,EAAGmD,MA+UvD,IAAMoc,EAAQzW,EAAMpF,WACdiJ,EAAOzG,GAAKoE,EAAOxB,EAAMgU,KAAOj5B,KAAKggB,KAAK0b,EAAQ,GAAKA,GAE7D,MAAO,CACLzW,MAAAA,EACA0W,gBAAiBlV,EACjBoT,uBAAAA,EACAL,oBAAAA,EACAG,mBAAAA,EAEJ,CA0EM,SAAUiC,GAAY5W,GAC1B,IAAMC,EAnCR,SAAsBT,GACpB,IAAM9B,EAAO6B,GAAcC,GAc3B,OAbAU,GACExC,EACA,CACEtU,KAAM,OACNwpB,KAAM,WACN9mB,YAAa,YAEf,CACE+qB,SAAU,WACVC,cAAe,WACfC,KAAM,YAGHt9B,OAAO+hB,QAAMoE,EAAAA,EAAAA,GAAC,CAAEmX,MAAM,GAASrZ,GACxC,CAmBgB6C,CAAaP,GACnB7I,EAAuB8I,EAAvB9I,GAAOqJ,EAAgBP,EAAnBte,EACNq1B,EAAgB7f,EAAGmE,MAAQ,EAC3B2b,EAAkB,EAAI9f,EAAGmE,MAAQ,EAKvC,SAASgK,EAAKpb,GACZ,OAAOsO,GAAQtO,EAAGsW,EACpB,CACA,SAAS0W,EAAKhtB,GACZ,OAAOsO,GAAWtO,EAAGsW,EACvB,CAEA,IAAA2W,EAKIvD,IAAiBhU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClBK,GAAK,IACRrV,QAAO,SAACypB,EAAIhP,EAAOkR,GACjB,IAAMrsB,EAAImb,EAAMvD,WACVjJ,EAAI1B,EAAGvM,QAAQV,EAAE2O,GACjBue,EAAMlX,GACZ,OAAIqW,EACKa,EAAI7+B,WAAWI,KAAK,CAAC0sB,EAAMgS,WAAa,EAAO,IAAQxe,GAEvDue,EAAI7+B,WAAWI,KAAK,CAAC,IAAQkgB,EAAG1B,EAAGvM,QAAQV,EAAE6O,GAExD,EACAiE,UAAS,SAACjU,GACR,IAAMwD,EAAMxD,EAAMjQ,OACZ2sB,EAAO1c,EAAM,GACbwrB,EAAOxrB,EAAM0D,SAAS,GAE5B,GAAIF,IAAQyqB,GAA2B,IAATvR,GAA0B,IAATA,EAUxC,IAAIlZ,IAAQ0qB,GAA4B,IAATxR,EAGpC,MAAO,CAAE5M,EAFC1B,EAAG6F,UAAUuX,EAAK9nB,SAAS,EAAG0K,EAAGmE,QAE/BvC,EADF5B,EAAG6F,UAAUuX,EAAK9nB,SAAS0K,EAAGmE,MAAO,EAAInE,EAAGmE,SAGtD,MAAM,IAAI/gB,MAAM,mBAADuO,OACMyD,EAAG,2BAAAzD,OAA0BkuB,EAAa,yBAAAluB,OAAwBmuB,EAAe,wBAftG,IAAMpe,EAAIqH,GAAmBqU,GAC7B,KAjCG9gB,IADoBS,EAkCE2E,IAjCT3E,EAAMiD,EAAG+D,OAiCI,MAAM,IAAI3gB,MAAM,yBAC7C,IAnCuB2Z,EAmCjB6Q,EAAKyP,EAAoB3b,GAC3BE,EAAI5B,EAAGoF,KAAKwI,GAKhB,OAFiC,KAAP,EAAPU,OAFH1M,EAAIrF,MAASA,MAGHqF,EAAI5B,EAAGiD,IAAIrB,IAC9B,CAAEF,EAAAA,EAAGE,EAAAA,EAUhB,KAxCiB0I,EAAK0V,EAAtBR,gBACA9B,EAAsBsC,EAAtBtC,uBACAL,EAAmB2C,EAAnB3C,oBACAG,EAAkBwC,EAAlBxC,mBAuCI2C,EAAgB,SAACpjB,GAAW,OAChCgM,EAAcA,GAAmBhM,EAAK+L,EAAMlF,aAAa,EAE3D,SAASwc,EAAsB3uB,GAE7B,OAAOA,EADM4X,GAAe9M,EAE9B,CAMA,IAAM8jB,EAAS,SAACl/B,EAAeK,EAAcmV,GAAU,OAAKoS,GAAmB5nB,EAAEkP,MAAM7O,EAAMmV,GAAI,EAK3F2pB,EAAS,WACb,SAAAA,EAAqBzsB,EAAoBtJ,EAAoBg2B,IAAiBx/B,EAAAA,EAAAA,GAAA,KAAAu/B,GAAzD,KAAAzsB,EAAAA,EAAoB,KAAAtJ,EAAAA,EAAoB,KAAAg2B,SAAAA,EAC3DrsB,KAAKmrB,gBACP,CAcC,OAZDr+B,EAAAA,EAAAA,GAAAs/B,EAAA,EAAAr+B,IAAA,iBAAAC,MAcA,WAEE,IAAKs7B,EAAmBtpB,KAAKL,GAAI,MAAM,IAAIzQ,MAAM,6BACjD,IAAKo6B,EAAmBtpB,KAAK3J,GAAI,MAAM,IAAInH,MAAM,4BACnD,GAAC,CAAAnB,IAAA,iBAAAC,MAED,SAAeq+B,GACb,OAAO,IAAID,EAAUpsB,KAAKL,EAAGK,KAAK3J,EAAGg2B,EACvC,GAAC,CAAAt+B,IAAA,mBAAAC,MAED,SAAiBs+B,GACf,IAAQ3sB,EAAwBK,KAAxBL,EAAGtJ,EAAqB2J,KAArB3J,EAAak2B,EAAQvsB,KAAlBqsB,SACRtqB,EAAI0pB,EAAc7hB,GAAY,UAAW0iB,IAC/C,GAAW,MAAPC,IAAgB,CAAC,EAAG,EAAG,EAAG,GAAGzuB,SAASyuB,GAAM,MAAM,IAAIr9B,MAAM,uBAChE,IAAMs9B,EAAe,IAARD,GAAqB,IAARA,EAAY5sB,EAAIiV,EAAMte,EAAIqJ,EACpD,GAAI6sB,GAAQ1gB,EAAG+D,MAAO,MAAM,IAAI3gB,MAAM,8BACtC,IAAMmrB,EAAuB,KAAP,EAANkS,GAAiB,KAAO,KAClCnR,EAAIhF,EAAMqF,QAAQpB,EAAS4R,EAAcO,IACzCC,EAAKZ,EAAKW,GACVE,EAAKzS,GAAMlY,EAAI0qB,GACfE,EAAK1S,EAAK5jB,EAAIo2B,GACd/d,EAAI0H,EAAMjD,KAAKyZ,qBAAqBxR,EAAGsR,EAAIC,GACjD,IAAKje,EAAG,MAAM,IAAIxf,MAAM,qBAExB,OADAwf,EAAEyc,iBACKzc,CACT,GAEA,CAAA3gB,IAAA,WAAAC,MACA,WACE,OAAOk+B,EAAsBlsB,KAAK3J,EACpC,GAAC,CAAAtI,IAAA,aAAAC,MAED,WACE,OAAOgS,KAAK6sB,WAAa,IAAIT,EAAUpsB,KAAKL,EAAGsa,GAAMja,KAAK3J,GAAI2J,KAAKqsB,UAAYrsB,IACjF,GAEA,CAAAjS,IAAA,gBAAAC,MACA,WACE,OAAO6mB,EAAc7U,KAAK8sB,WAC5B,GAAC,CAAA/+B,IAAA,WAAAC,MACD,WACE,OAAO05B,GAAIS,WAAW,CAAExoB,EAAGK,KAAKL,EAAGtJ,EAAG2J,KAAK3J,GAC7C,GAEA,CAAAtI,IAAA,oBAAAC,MACA,WACE,OAAO6mB,EAAc7U,KAAK+sB,eAC5B,GAAC,CAAAh/B,IAAA,eAAAC,MACD,WACE,OAAOi+B,EAAcjsB,KAAKL,GAAKssB,EAAcjsB,KAAK3J,EACpD,IAAC,EAAAtI,IAAA,cAAAC,MA/DD,SAAmB2a,GACjB,IAAM3G,EAAI4S,EAAMlF,YAEhB,OADA/G,EAAMiB,GAAY,mBAAoBjB,EAAS,EAAJ3G,GACpC,IAAIoqB,EAAUD,EAAOxjB,EAAK,EAAG3G,GAAImqB,EAAOxjB,EAAK3G,EAAG,EAAIA,GAC7D,GAGA,CAAAjU,IAAA,UAAAC,MACA,SAAe2a,GACb,IAAAqkB,EAAiBtF,GAAIK,MAAMne,GAAY,MAAOjB,IAC9C,OAAO,IAAIyjB,EADFY,EAADrtB,EAAIqtB,EAAD32B,EAEb,KAAC+1B,CAAA,CAjBY,GAyETvR,EAAQ,CACZoS,kBAAiB,SAAC7B,GAChB,IAEE,OADA5B,EAAuB4B,IAChB,EACP,MAAO1P,GACP,OAAO,EAEX,EACA8N,uBAAwBA,EAMxB1O,iBAAkB,WAChB,IAAMrtB,EAAS0f,GAAqByH,EAAMte,GAC1C,Ob9XA,SAAyBvI,EAAiB8jB,GAAgC,IAAZ9Q,EAAI9R,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,IAAAA,UAAA,GAChEiS,EAAMnT,EAAIN,OACVy/B,EAAWtb,GAAoBC,GAC/Bsb,EAASpb,GAAiBF,GAEhC,GAAI3Q,EAAM,IAAMA,EAAMisB,GAAUjsB,EAAM,KACpC,MAAM,IAAIhS,MAAM,YAADuO,OAAa0vB,EAAM,8BAAA1vB,OAA6ByD,IACjE,IAEMksB,EAAUjgB,GAFJpM,EAAOuI,GAAgBvb,GAAOwb,GAAgBxb,GAEjC8jB,EAAaxJ,IAAOA,GAC7C,OAAOtH,EAAO2I,GAAgB0jB,EAASF,GAAYzjB,GAAgB2jB,EAASF,EAC9E,CamXa/f,CAAmByH,EAAMnU,YAAYhT,GAASmnB,EAAMte,EAC7D,EAUAykB,WAAU,WAAmC,IAAlCvI,EAAUvjB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAG+qB,EAAK/qB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGmnB,EAAMjD,KAGvC,OAFA6G,EAAMY,eAAepI,GACrBwH,EAAMM,SAAS3Y,OAAO,IACfqY,CACT,GAgBF,SAASqT,EAAUlb,GACjB,IAAMpT,EAAMoT,aAAgBjlB,WACtBmS,EAAsB,kBAAT8S,EACbjR,GAAOnC,GAAOM,IAAS8S,EAAa1kB,OAC1C,OAAIsR,EAAYmC,IAAQyqB,GAAiBzqB,IAAQ0qB,EAC7CvsB,EAAY6B,IAAQ,EAAIyqB,GAAiBzqB,IAAQ,EAAI0qB,EACrDzZ,aAAgBiE,CAEtB,CAuBA,IAAMoV,EACJ5W,EAAM4W,UACN,SAAU9tB,GAGR,IAAMmL,EAAMgM,GAAmBnX,GACzB4vB,EAAuB,EAAf5vB,EAAMjQ,OAAamnB,EAAMpF,WACvC,OAAO8d,EAAQ,EAAIzkB,GAAOlH,OAAO2rB,GAASzkB,CAC5C,EACI4iB,EACJ7W,EAAM6W,eACN,SAAU/tB,GACR,OAAOuc,EAAKuR,EAAS9tB,GACvB,EAEI6vB,EAAa1Y,GAAWD,EAAMpF,YAIpC,SAASge,EAAW3kB,GAClB,GAAmB,kBAARA,EAAkB,MAAM,IAAI3Z,MAAM,mBAC7C,KAAMkZ,IAAOS,GAAOA,EAAM0kB,GACxB,MAAM,IAAIr+B,MAAM,uBAADuO,OAAwBmX,EAAMpF,aAE/C,OAAOqF,GAAmBhM,EAAK+L,EAAMlF,YACvC,CAOA,SAAS+d,EAAQnB,EAAclB,GAA0C,IAArB/Y,EAAIpjB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGy+B,EACzD,GAAI,CAAC,YAAa,aAAaC,MAAK,SAAC/iB,GAAC,OAAKA,KAAKyH,CAAI,IAClD,MAAM,IAAInjB,MAAM,uCAClB,IAAQ6O,EAAsB6W,EAAtB7W,KAAM0C,EAAgBmU,EAAhBnU,YACRirB,EAAqCrZ,EAArCqZ,KAAMtW,EAA+B/C,EAA/B+C,QAAuBwY,EAAQvb,EAAtBwb,aACT,MAARnC,IAAcA,GAAO,GACzBY,EAAU1iB,GAAY,UAAW0iB,GAC7BlX,IAASkX,EAAU1iB,GAAY,oBAAqB7L,EAAKuuB,KAK7D,IAAMwB,EAAQrC,EAAca,GACtB5b,EAAI8Y,EAAuB4B,GAC3B2C,EAAW,CAACP,EAAW9c,GAAI8c,EAAWM,IAE5C,GAAW,MAAPF,EAAa,CAEf,IAAMl3B,GAAY,IAARk3B,EAAentB,EAAYqL,EAAGmE,OAAS2d,EACjDG,EAASz4B,KAAKsU,GAAY,eAAgBlT,IAE5C,IAAMuU,EAAO4J,GAAc7lB,MAAd6lB,EAAkBkZ,GACzBlgB,EAAIigB,EAuBV,MAAO,CAAE7iB,KAAAA,EAAM+iB,MArBf,SAAeC,GAEb,IAAMrjB,EAAI4gB,EAASyC,GACnB,GAAK3E,EAAmB1e,GAAxB,CACA,IAAMsjB,EAAKrC,EAAKjhB,GACVgD,EAAIwI,EAAMjD,KAAKmH,SAAS1P,GAAG6L,WAC3B9W,EAAIsa,EAAKrM,EAAEJ,GACjB,GAAI7N,IAAMyI,GAAV,CAIA,IAAM/R,EAAI4jB,EAAKiU,EAAKjU,EAAKpM,EAAIlO,EAAI+Q,IACjC,GAAIra,IAAM+R,GAAV,CACA,IAAIikB,GAAYze,EAAEJ,IAAM7N,EAAI,EAAI,GAAK9R,OAAO+f,EAAEF,EAAIrF,IAC9C8lB,EAAQ93B,EAKZ,OAJIq1B,GAAQQ,EAAsB71B,KAChC83B,EAzON,SAAoB93B,GAClB,OAAO61B,EAAsB71B,GAAK4jB,GAAM5jB,GAAKA,CAC/C,CAuOc+3B,CAAW/3B,GACnBg2B,GAAY,GAEP,IAAID,EAAUzsB,EAAGwuB,EAAO9B,EAPV,CALA,CAJa,CAiBpC,EAEF,CACA,IAAMqB,EAA2B,CAAEhC,KAAM9W,EAAM8W,KAAMtW,SAAS,GACxDiZ,EAA0B,CAAE3C,KAAM9W,EAAM8W,KAAMtW,SAAS,GAuF7D,OAhEAgB,EAAMjD,KAAKyH,eAAe,GAgEnB,CACLhG,MAAAA,EACAoG,aA/MF,SAAsBoQ,GAAwC,IAAnBF,IAAYj8B,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,KAAAA,UAAA,GACrD,OAAOmnB,EAAMkY,eAAelD,GAAY/R,WAAW6R,EACrD,EA8MEqD,gBArLF,SAAyBC,EAAmBC,GAAiC,IAAnBvD,IAAYj8B,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,KAAAA,UAAA,GACpE,GAAIo+B,EAAUmB,GAAW,MAAM,IAAIt/B,MAAM,iCACzC,IAAKm+B,EAAUoB,GAAU,MAAM,IAAIv/B,MAAM,iCAEzC,OADUknB,EAAMqF,QAAQgT,GACfnU,SAASkP,EAAuBgF,IAAWnV,WAAW6R,EACjE,EAiLEjQ,KA5EF,SAAcqR,EAAcxS,GAAuC,IACjE4U,EAAwBjB,EAAQnB,EAASxS,EADO7qB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGy+B,GAC3CziB,EAAIyjB,EAAJzjB,KAAM+iB,EAAKU,EAALV,MACRnW,EAAIjD,EAEV,OADaC,GAAsCgD,EAAE9Z,KAAKC,UAAW6Z,EAAEnI,YAAamI,EAAE0P,KAC/EoH,CAAK1jB,EAAM+iB,EACpB,EAwEE3S,OArDF,SACEuT,EACAtC,EACA/Q,GACqB,IAAAsT,EAArBxc,EAAIpjB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGo/B,EAEDS,EAAKF,EAGX,GAFAtC,EAAU1iB,GAAY,UAAW0iB,GACjC/Q,EAAY3R,GAAY,YAAa2R,GACjC,WAAYlJ,EAAM,MAAM,IAAInjB,MAAM,sCACtC,IAGI6e,EAHI2d,EAAkBrZ,EAAlBqZ,KAAMtW,EAAY/C,EAAZ+C,QAEV2Z,OAA8Bv/B,EAElC,IACE,GAAkB,kBAAPs/B,GAAmBA,aAAc5hC,WAG1C,IACE6hC,EAAO3C,EAAU4C,QAAQF,GACzB,MAAOG,GACP,KAAMA,aAAoBvH,GAAIC,KAAM,MAAMsH,EAC1CF,EAAO3C,EAAU8C,YAAYJ,OAE1B,IAAkB,kBAAPA,GAAmC,kBAATA,EAAGnvB,GAAkC,kBAATmvB,EAAGz4B,EAIzE,MAAM,IAAInH,MAAM,SAHhB,IAAQyQ,EAASmvB,EAATnvB,EAAGtJ,EAAMy4B,EAANz4B,EACX04B,EAAO,IAAI3C,EAAUzsB,EAAGtJ,GAI1B0X,EAAIqI,EAAMqF,QAAQF,GAClB,MAAOG,GACP,GAAiC,UAA5BA,EAAgBmD,QACnB,MAAM,IAAI3vB,MAAM,kEAClB,OAAO,EAET,GAAIw8B,GAAQqD,EAAKlC,WAAY,OAAO,EAChCzX,IAASkX,EAAU1X,EAAM7W,KAAKuuB,IAClC,IAAA6C,EAAiBJ,EAATpvB,EAACwvB,EAADxvB,EAAGtJ,EAAC84B,EAAD94B,EACL0L,EAAI0pB,EAAca,GAClB9J,EAAKqJ,EAAKx1B,GACVq2B,EAAKzS,EAAKlY,EAAIygB,GACdmK,EAAK1S,EAAKta,EAAI6iB,GACdpH,EAA8C,QAA7CyT,EAAGzY,EAAMjD,KAAKyZ,qBAAqB7e,EAAG2e,EAAIC,UAAG,IAAAkC,OAAA,EAA1CA,EAA4CpY,WACtD,QAAK2E,GACKnB,EAAKmB,EAAE5N,KACJ7N,CACf,EAOE2rB,gBAAiBlV,EACjBgW,UAAAA,EACAvR,MAAAA,EAEJ,CC3jCA,IAAMuU,GAAaztB,OAAO,sEACpB0tB,GAAa1tB,OAAO,sEACpB0G,GAAM1G,OAAO,GACb2G,GAAM3G,OAAO,GACb2tB,GAAa,SAACzwB,EAAW5R,GAAS,OAAM4R,EAAI5R,EAAIqb,IAAOrb,CAAC,EAM9D,SAASsiC,GAAQ7hB,GACf,IAAMK,EAAIqhB,GAEJriB,EAAMpL,OAAO,GAAI6tB,EAAM7tB,OAAO,GAAI8tB,EAAO9tB,OAAO,IAAK+tB,EAAO/tB,OAAO,IAEnEguB,EAAOhuB,OAAO,IAAKiuB,EAAOjuB,OAAO,IAAKkuB,EAAOluB,OAAO,IACpDsI,EAAMyD,EAAIA,EAAIA,EAAKK,EACnBkc,EAAMhgB,EAAKA,EAAKyD,EAAKK,EACrB+hB,EAAMviB,GAAK0c,EAAIld,EAAKgB,GAAKkc,EAAMlc,EAC/BgiB,EAAMxiB,GAAKuiB,EAAI/iB,EAAKgB,GAAKkc,EAAMlc,EAC/BiiB,EAAOziB,GAAKwiB,EAAIznB,GAAKyF,GAAK9D,EAAM8D,EAChCkiB,EAAO1iB,GAAKyiB,EAAKP,EAAM1hB,GAAKiiB,EAAOjiB,EACnCmiB,EAAO3iB,GAAK0iB,EAAKP,EAAM3hB,GAAKkiB,EAAOliB,EACnCoiB,EAAO5iB,GAAK2iB,EAAKN,EAAM7hB,GAAKmiB,EAAOniB,EACnCqiB,EAAQ7iB,GAAK4iB,EAAKN,EAAM9hB,GAAKoiB,EAAOpiB,EACpCsiB,EAAQ9iB,GAAK6iB,EAAMR,EAAM7hB,GAAKmiB,EAAOniB,EACrCuiB,EAAQ/iB,GAAK8iB,EAAMtjB,EAAKgB,GAAKkc,EAAMlc,EACnC8T,EAAMtU,GAAK+iB,EAAMX,EAAM5hB,GAAKkiB,EAAOliB,EACnCmB,EAAM3B,GAAKsU,EAAI2N,EAAKzhB,GAAK9D,EAAM8D,EAC/BE,EAAOV,GAAK2B,EAAI5G,GAAKyF,GAC3B,IAAKjC,GAAGoC,IAAIpC,GAAGqC,IAAIF,GAAOP,GAAI,MAAM,IAAIxe,MAAM,2BAC9C,OAAO+e,CACT,CAEA,IAAMnC,GAAK8D,GAAMwf,QAAY5/B,OAAWA,EAAW,CAAE0hB,KAAMqe,KAE9CgB,GC9BP,SAAsB5b,EAAoB6b,GAC9C,IAAMniC,EAAS,SAAC0P,GAAW,OAAKwtB,IAAWhX,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAII,GAV7C,SAAkB5W,GACtB,MAAO,CACLA,KAAAA,EACAwpB,KAAM,SAACx5B,GAAe,QAAA4P,EAAA1O,UAAAxB,OAAKitB,EAAkB,IAAA1kB,MAAA2H,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAlB6c,EAAkB7c,EAAA,GAAA5O,UAAA4O,GAAA,OAAK0pB,GAAKxpB,EAAMhQ,EAAK0R,EAAWzQ,WAAC,EAAG0rB,GAAM,EACvFja,YAAAA,EAEJ,CAIgEgwB,CAAQ1yB,IAAQ,EAC9E,OAAO3P,OAAO+hB,QAAMoE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIlmB,EAAOmiC,IAAQ,IAAEniC,OAAAA,IAC7C,CD2ByBqiC,CACvB,CACE7xB,EAAG8C,OAAO,GACV1U,EAAG0U,OAAO,GACVmK,GAAAA,GACAxV,EAAG+4B,GAEHhb,GAAI1S,OAAO,iFACX2S,GAAI3S,OAAO,iFACXI,EAAGJ,OAAO,GACV+pB,MAAM,EAON9C,KAAM,CACJC,KAAMlnB,OAAO,sEACbmnB,YAAa,SAACle,GACZ,IAAMtU,EAAI+4B,GACJsB,EAAKhvB,OAAO,sCACZqI,GAAM3B,GAAM1G,OAAO,sCACnBivB,EAAKjvB,OAAO,uCACZsI,EAAK0mB,EACLE,EAAYlvB,OAAO,uCAEnByM,EAAKkhB,GAAWrlB,EAAKW,EAAGtU,GACxBw6B,EAAKxB,IAAYtlB,EAAKY,EAAGtU,GAC3Bi0B,EAAKpd,GAAIvC,EAAIwD,EAAKuiB,EAAKG,EAAKF,EAAIt6B,GAChCm0B,EAAKtd,IAAKiB,EAAKpE,EAAK8mB,EAAK7mB,EAAI3T,GAC3Bg0B,EAAQC,EAAKsG,EACbrG,EAAQC,EAAKoG,EAGnB,GAFIvG,IAAOC,EAAKj0B,EAAIi0B,GAChBC,IAAOC,EAAKn0B,EAAIm0B,GAChBF,EAAKsG,GAAapG,EAAKoG,EACzB,MAAM,IAAI3hC,MAAM,uCAAyC0b,GAE3D,MAAO,CAAE0f,MAAAA,EAAOC,GAAAA,EAAIC,MAAAA,EAAOC,GAAAA,EAC7B,IAGJnM,IAKU3c,OAAO,GAoBL4uB,GAAUjF,gBEhGU7N,GAAQ5C,MAAMC,iBFwLzC,IEvLMiW,GAAkB,WAC7B,IAAMC,EAAgBvT,GAAQ5C,MAAMC,mBAC9BS,EAAYP,GAAagW,GACzBC,EAAY,IAAI/jC,WAAW,IAGjC,OAFA+jC,EAAUnxB,IAAIkxB,GACdC,EAAUnxB,IAAIyb,EAAW,IAClB,CACLA,UAAAA,EACA0V,UAAAA,EAEJ,EACajW,GAAeyC,GAAQzC,aAC7B,SAASkW,GAAU3V,GACxB,IAEE,OADAkC,GAAQ3B,cAAcL,QAAQF,IACvB,EACP,MAAA4V,GACA,OAAO,CACT,CACF,CACO,IAAMlW,GAAO,SAClB4D,EACAoS,GAA2B,OACxBxT,GAAQxC,KAAK4D,EAASoS,EAAU90B,MAAM,EAAG,IAAI,EACrCkf,GAASoC,GAAQpC,OCxCjB+V,GAAW,SAACryB,GACvB,OAAI1R,EAAAA,OAAOgkC,SAAStyB,GACXA,EACEA,aAAe7R,WACjBG,EAAAA,OAAOC,KAAKyR,EAAIxR,OAAQwR,EAAIvR,WAAYuR,EAAIE,YAE5C5R,EAAAA,OAAOC,KAAKyR,EAEvB,ECNA,OAAaijB,GAAM,WACjB,SAAAA,EAAYsP,IAAiBzkC,EAAAA,EAAAA,GAAA,KAAAm1B,GAC3B5zB,OAAOI,OAAOwR,KAAMsxB,EACtB,CAYC,OAZAxkC,EAAAA,EAAAA,GAAAk1B,EAAA,EAAAj0B,IAAA,SAAAC,MAED,WACE,OAAOX,EAAAA,OAAOC,MAAKikC,EAAAA,GAAAA,WAAUC,GAAexxB,MAC9C,IAAC,EAAAjS,IAAA,SAAAC,MAED,SAAcwR,GACZ,OAAOiyB,EAAAA,GAAAA,aAAYD,GAAexxB,KAAMR,EAC1C,GAAC,CAAAzR,IAAA,kBAAAC,MAED,SAAuBwR,GACrB,OAAOkyB,EAAAA,GAAAA,sBAAqBF,GAAexxB,KAAMR,EACnD,KAACwiB,CAAA,CAfgB,GAiCNwP,GAAoC,IAAIvb,kcCzB9C,IAKM0b,GAAoB,GAyBjC,IAAIC,GAAyB,EAE7BC,GAwFOtS,OAAOuS,YArFD,IAAAC,GAAS,SAAAC,IAAArlC,EAAAA,EAAAA,GAAAolC,EAAAC,GAAA,IAAAjjC,EAAAkjC,GAAAF,GAQpB,SAAAA,EAAY/jC,GAA0B,IAAAsB,EAEpC,IAFoCzC,EAAAA,EAAAA,GAAA,KAAAklC,IACpCziC,EAAAP,EAAAU,KAAA,KAAM,CAAC,IAPTyiC,SAAG,EAZL,SAAyBlkC,GACvB,YAAwCwB,IAAhCxB,EAAwBkkC,GAClC,CAkBQC,CAAgBnkC,GAClBsB,EAAK4iC,IAAMlkC,EAAMkkC,QACZ,CACL,GAAqB,kBAAVlkC,EAAoB,CAE7B,IAAMokC,EAAUC,KAAAA,OAAYrkC,GAC5B,GAAIokC,EAAQ3kC,QAAUkkC,GACpB,MAAM,IAAIziC,MAAM,4BAElBI,EAAK4iC,IAAM,IAAII,KAAJ,CAAOF,EACpB,MACE9iC,EAAK4iC,IAAM,IAAII,KAAJ,CAAOtkC,GAGpB,GAAIsB,EAAK4iC,IAAIjzB,aAAe0yB,GAC1B,MAAM,IAAIziC,MAAM,2BAEpB,CAAC,OAAAI,CACH,CAiLC,OA/KDxC,EAAAA,EAAAA,GAAAilC,EAAA,EAAAhkC,IAAA,SAAAC,MAkBA,SAAOutB,GACL,OAAOvb,KAAKkyB,IAAIK,GAAGhX,EAAU2W,IAC/B,GAEA,CAAAnkC,IAAA,WAAAC,MAGA,WACE,OAAOqkC,KAAAA,OAAYryB,KAAKT,UAC1B,GAAC,CAAAxR,IAAA,SAAAC,MAED,WACE,OAAOgS,KAAKwyB,UACd,GAEA,CAAAzkC,IAAA,UAAAC,MAGA,WACE,IAAMm5B,EAAMnnB,KAAKoxB,WACjB,OAAO,IAAIlkC,WAAWi6B,EAAI55B,OAAQ45B,EAAI35B,WAAY25B,EAAIloB,WACxD,GAEA,CAAAlR,IAAA,WAAAC,MAGA,WACE,IAAMf,EAAI+S,KAAKkyB,IAAIO,YAAYplC,EAAAA,QAC/B,GAAIJ,EAAEQ,SAAWkkC,GACf,OAAO1kC,EAGT,IAAMylC,EAAUrlC,EAAAA,OAAOslC,MAAM,IAE7B,OADA1lC,EAAE2P,KAAK81B,EAAS,GAAKzlC,EAAEQ,QAChBilC,CACT,GAAC,CAAA3kC,IAAA8jC,GAAAxvB,IAED,WACE,MAAO,aAAP5E,OAAoBuC,KAAK1D,WAAU,IACrC,GAEA,CAAAvO,IAAA,WAAAC,MAGA,WACE,OAAOgS,KAAKwyB,UACd,IAOA,EAAAzkC,IAAA,SAAAC,MApEA,WACE,IAAMD,EAAM,IAAIgkC,EAAUH,IAE1B,OADAA,IAA0B,EACnB,IAAIG,EAAUhkC,EAAIqjC,WAC3B,GAEA,CAAArjC,IAAA,iBAAAC,MAAA,eAAA4kC,GAAAC,EAAAA,GAAAA,GAAA3S,KAAAA,MA+DA,SAAAW,EACEiS,EACA7nB,EACA8nB,GAAoB,IAAAxlC,EAAAylC,EAAA,OAAA9S,KAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAOiB,OAL/B/yB,EAASF,EAAAA,OAAOoQ,OAAO,CAC3Bq1B,EAAc1B,WACd/jC,EAAAA,OAAOC,KAAK2d,GACZ8nB,EAAU3B,aAEN4B,EAAiB1U,GAAO/wB,GAAO6yB,EAAA6S,OAAA,SAC9B,IAAIlB,EAAUiB,IAAe,wBAAA5S,EAAAK,OAAA,GAAAI,OACrC,gBAAAqS,EAAAC,EAAAC,GAAA,OAAAR,EAAA5jC,MAAA,KAAAC,UAAA,EA3ED,IAgFA,CAAAlB,IAAA,2BAAAC,MACA,SACEqlC,EACAN,GAEA,IAAIxlC,EAASF,EAAAA,OAAOslC,MAAM,GAC1BU,EAAMxzB,SAAQ,SAAUoL,GACtB,GAAIA,EAAKxd,OAjKgB,GAkKvB,MAAM,IAAIN,UAAU,4BAEtBI,EAASF,EAAAA,OAAOoQ,OAAO,CAAClQ,EAAQ6jC,GAASnmB,IAC3C,IACA1d,EAASF,EAAAA,OAAOoQ,OAAO,CACrBlQ,EACAwlC,EAAU3B,WACV/jC,EAAAA,OAAOC,KAAK,2BAEd,IAAM0lC,EAAiB1U,GAAO/wB,GAC9B,GAAI2jC,GAAU8B,GACZ,MAAM,IAAI9jC,MAAM,kDAElB,OAAO,IAAI6iC,EAAUiB,EACvB,GAQA,CAAAjlC,IAAA,uBAAAC,MAAA,eAAAslC,GAAAT,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAAkC,EACEiR,EACAN,GAAoB,OAAA7S,KAAAA,MAAA,SAAAsB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cAAAkB,EAAAyR,OAEb,SAAAjzB,KAAKuzB,yBAAyBF,EAAON,IAAU,wBAAAvR,EAAAf,OAAA,GAAA2B,EAAA,UACvD,gBAAAoR,EAAAC,GAAA,OAAAH,EAAAtkC,MAAA,KAAAC,UAAA,EAND,IAQA,CAAAlB,IAAA,yBAAAC,MAOA,SACEqlC,EACAN,GAIA,IAFA,IACIW,EADAC,EAAQ,IAEI,GAATA,GAAY,CACjB,IACE,IAAMC,EAAiBP,EAAM51B,OAAOpQ,EAAAA,OAAOC,KAAK,CAACqmC,KACjDD,EAAU1zB,KAAKuzB,yBAAyBK,EAAgBb,GACxD,MAAOt8B,GACP,GAAIA,aAAetJ,UACjB,MAAMsJ,EAERk9B,IACA,QACF,CACA,MAAO,CAACD,EAASC,EACnB,CACA,MAAM,IAAIzkC,MAAM,gDAClB,GAEA,CAAAnB,IAAA,qBAAAC,MAAA,eAAA6lC,GAAAhB,EAAAA,GAAAA,GAAA3S,KAAAA,MAMA,SAAA4C,EACEuQ,EACAN,GAAoB,OAAA7S,KAAAA,MAAA,SAAAmC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,cAAA+B,EAAA4Q,OAEb,SAAAjzB,KAAK8zB,uBAAuBT,EAAON,IAAU,wBAAA1Q,EAAA5B,OAAA,GAAAqC,EAAA,UACrD,gBAAAiR,EAAAC,GAAA,OAAAH,EAAA7kC,MAAA,KAAAC,UAAA,EAXD,IAaA,CAAAlB,IAAA,YAAAC,MAGA,SAAiBimC,GAEf,OAAO/C,GADQ,IAAIa,EAAUkC,GACL10B,UAC1B,KAACwyB,CAAA,CA7MmB,CAAS/P,IAAlB+P,GA2CiB,YAAIA,GAAU,oCAqK5CP,GAAc1xB,IAAIiyB,GAAW,CAC3BmC,KAAM,SACNr+B,OAAQ,CAAC,CAAC,MAAO,WC/P6B,IAAIk8B,GAClD,+CCQF,ICJaoC,GAAmB,mcCPnB,IAAAC,GAA0C,SAAAxM,IAAAj7B,EAAAA,EAAAA,GAAAynC,EAAAxM,GAAA,IAAA74B,EAAAslC,GAAAD,GAGrD,SAAAA,EAAYxF,GAAmB,IAAAt/B,EAEF,OAFEzC,EAAAA,EAAAA,GAAA,KAAAunC,IAC7B9kC,EAAAP,EAAAU,KAAA,kBAAAgO,OAAmBmxB,EAAS,0CAH9BA,eAAS,EAIPt/B,EAAKs/B,UAAYA,EAAUt/B,CAC7B,CAAC,OAAAxC,EAAAA,EAAAA,GAAAsnC,EAAA,CANoD,EAMpDhV,EAAAA,GAAAA,GAN6DlwB,QAShEd,OAAOkmC,eACLF,GAA2C7lC,UAC3C,OACA,CACEP,MAAO,+CAIE,IAAAumC,GAA8B,SAAAC,IAAA7nC,EAAAA,EAAAA,GAAA4nC,EAAAC,GAAA,IAAAnlC,EAAAglC,GAAAE,GAGzC,SAAAA,EAAY3F,EAAmB6F,GAAwB,IAAAvkC,EAQ1B,OAR0BrD,EAAAA,EAAAA,GAAA,KAAA0nC,IACrDrkC,EAAAb,EAAAI,KAAA,KACE,oCAAAgO,OAAoCg3B,EAAeC,QACjD,GAEA,0EAAqD,GAAAj3B,OAClDmxB,EAAmD,8CAR5DA,eAAS,EAUP1+B,EAAK0+B,UAAYA,EAAU1+B,CAC7B,CAAC,OAAApD,EAAAA,EAAAA,GAAAynC,EAAA,CAZwC,EAYxCnV,EAAAA,GAAAA,GAZiDlwB,QAepDd,OAAOkmC,eAAeC,GAA+BhmC,UAAW,OAAQ,CACtEP,MAAO,mCAGI,IAAA2mC,GAAmC,SAAAC,IAAAjoC,EAAAA,EAAAA,GAAAgoC,EAAAC,GAAA,IAAA5kC,EAAAqkC,GAAAM,GAG9C,SAAAA,EAAY/F,GAAmB,IAAAn+B,EAEF,OAFE5D,EAAAA,EAAAA,GAAA,KAAA8nC,IAC7BlkC,EAAAT,EAAAP,KAAA,kBAAAgO,OAAmBmxB,EAAS,iDAH9BA,eAAS,EAIPn+B,EAAKm+B,UAAYA,EAAUn+B,CAC7B,CAAC,OAAA3D,EAAAA,EAAAA,GAAA6nC,EAAA,CAN6C,EAM7CvV,EAAAA,GAAAA,GANsDlwB,miCASzDd,OAAOkmC,eAAeK,GAAoCpmC,UAAW,OAAQ,CAC3EP,MAAO,wCCvCT,IAAa6mC,GAAkB,WAI7B,SAAAA,EACEC,EACAC,IACAloC,EAAAA,EAAAA,GAAA,KAAAgoC,GAAA,KANFC,uBAAiB,OACjBC,4BAAsB,EAMpB/0B,KAAK80B,kBAAoBA,EACzB90B,KAAK+0B,uBAAyBA,CAChC,CA4DC,OA5DAjoC,EAAAA,EAAAA,GAAA+nC,EAAA,EAAA9mC,IAAA,cAAAC,MAED,WACE,IAAMgnC,EAAc,CAACh1B,KAAK80B,mBAK1B,OAJI90B,KAAK+0B,yBACPC,EAAY1/B,KAAK0K,KAAK+0B,uBAAuBE,UAC7CD,EAAY1/B,KAAK0K,KAAK+0B,uBAAuBG,WAExCF,CACT,GAAC,CAAAjnC,IAAA,MAAAC,MAED,SAAImnC,GAAsC,IACGh/B,EADHC,EAAAg/B,GACfp1B,KAAKg1B,eAAa,IAA3C,IAAA5+B,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAA6C,KAAlC8+B,EAAUl/B,EAAAnI,MACnB,GAAImnC,EAAQE,EAAW5nC,OACrB,OAAO4nC,EAAWF,GAElBA,GAASE,EAAW5nC,MAExB,CAAC,OAAAgJ,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CAEH,GAAC,CAAA5I,IAAA,SAAAsU,IAED,WACE,OAAOrC,KAAKg1B,cAAcM,OAAO7nC,MACnC,GAAC,CAAAM,IAAA,sBAAAC,MAED,SACEunC,GAIA,GAAIv1B,KAAKvS,OAAS+nC,IAChB,MAAM,IAAItmC,MAAM,yDAGlB,IAAMumC,EAAc,IAAIxf,IACxBjW,KAAKg1B,cACFM,OACAz1B,SAAQ,SAAC9R,EAAKonC,GACbM,EAAY31B,IAAI/R,EAAIykC,WAAY2C,EAClC,IAEF,IAAMO,EAAe,SAAC3nC,GACpB,IAAM4nC,EAAWF,EAAYpzB,IAAItU,EAAIykC,YACrC,QAAiBhjC,IAAbmmC,EACF,MAAM,IAAIzmC,MACR,qEAEJ,OAAOymC,GAGT,OAAOJ,EAAanwB,KAAI,SAACwwB,GACvB,MAAO,CACLC,eAAgBH,EAAaE,EAAY7C,WACzC+C,kBAAmBF,EAAY7R,KAAK3e,KAAI,SAAA2wB,GAAI,OAC1CL,EAAaK,EAAKC,OAAO,IAE3Bx2B,KAAMo2B,EAAYp2B,KAEtB,GACF,KAACq1B,CAAA,CAtE4B,GCClBtZ,GAAY,WAAoC,IAAnC3tB,EAAgBqB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,YAC3C,OAAOgnC,GAAAA,GAAkB,GAAIroC,EAC/B,EAKaghC,GAAY,WAAoC,IAAnChhC,EAAgBqB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,YAC3C,OAAOgnC,GAAAA,GAAkB,GAAIroC,EAC/B,EA6BasoC,GAAa,WAEQ,IADhCtoC,EAAgBqB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,SAEbknC,EAAMF,GAAAA,GAOV,CACEA,GAAAA,GAAiB,UACjBA,GAAAA,GAAiB,iBACjBA,GAAAA,GAAkBA,GAAAA,GAAoBA,GAAAA,MAAqB,GAAI,UAEjEroC,GAEIwoC,EAAUD,EAAI9lC,OAAO0I,KAAKo9B,GAC1BE,EAAUF,EAAI7lC,OAAOyI,KAAKo9B,GAE1BG,EAAUH,EAsBhB,OApBAG,EAAQjmC,OAAS,SAACpD,EAAegB,GAE/B,OADamoC,EAAQnpC,EAAGgB,GACL,MAAEqO,YAGvBg6B,EAAQhmC,OAAS,SAAC+O,EAAapS,EAAegB,GAC5C,IAAMuR,EAAO,CACX+2B,MAAOlpC,EAAAA,OAAOC,KAAK+R,EAAK,SAE1B,OAAOg3B,EAAQ72B,EAAMvS,EAAGgB,IAG1BqoC,EAAQ3D,MAAQ,SAACtzB,GACf,OACE42B,GAAAA,KAAmBtoC,KACnBsoC,GAAAA,KAAmBtoC,KACnBN,EAAAA,OAAOC,KAAK+R,EAAK,QAAQ5R,QAItB6oC,CACT,EAyEO,SAASE,GAASnqB,EAAWxW,GAClC,IAAM4gC,EAAe,SAAfA,EAAgBtkB,GACpB,GAAIA,EAAKxkB,MAAQ,EACf,OAAOwkB,EAAKxkB,KACP,GAA0B,oBAAfwkB,EAAKwgB,MACrB,OAAOxgB,EAAKwgB,MAAM98B,EAAOsc,EAAKvkB,WACzB,GAAI,UAAWukB,GAAQ,kBAAmBA,EAAM,CACrD,IAAMvG,EAAQ/V,EAAOsc,EAAKvkB,UAC1B,GAAIoI,MAAMC,QAAQ2V,GAChB,OAAOA,EAAMne,OAASgpC,EAAatkB,EAAKpd,cAE5C,MAAO,GAAI,WAAYod,EAErB,OAAOqkB,GAAS,CAACvmC,OAAQkiB,GAAOtc,EAAOsc,EAAKvkB,WAG9C,OAAO,GAGL+kC,EAAQ,EAKZ,OAJAtmB,EAAKpc,OAAO4F,OAAOgK,SAAQ,SAACsS,GAC1BwgB,GAAS8D,EAAatkB,EACxB,IAEOwgB,CACT,CC3LO,SAAS+D,GAAah5B,GAG3B,IAFA,IAAIwD,EAAM,EACNy1B,EAAO,IACF,CACP,IAAIC,EAAOl5B,EAAMjG,QAGjB,GAFAyJ,IAAe,IAAP01B,IAAwB,EAAPD,EACzBA,GAAQ,EACc,KAAV,IAAPC,GACH,KAEJ,CACA,OAAO11B,CACT,CAEO,SAAS21B,GAAan5B,EAAsBwD,GAEjD,IADA,IAAI41B,EAAU51B,IACL,CACP,IAAI01B,EAAiB,IAAVE,EAEX,GAAe,IADfA,IAAY,GACM,CAChBp5B,EAAMpI,KAAKshC,GACX,KACF,CACEA,GAAQ,IACRl5B,EAAMpI,KAAKshC,EAEf,CACF,CC3Be,SAAArU,GACbrQ,EACA2M,GAEA,IAAK3M,EACH,MAAM,IAAIhjB,MAAM2vB,GAAW,mBAE/B,4hCCQA,IAAakY,GAAY,WAIvB,SAAAA,EAAYC,EAAkBC,IAAwBpqC,EAAAA,EAAAA,GAAA,KAAAkqC,GAAA,KAHtDC,WAAK,OACLC,gBAAU,EAGRj3B,KAAKg3B,MAAQA,EACbh3B,KAAKi3B,WAAaA,CACpB,CAmCC,OAnCAnqC,EAAAA,EAAAA,GAAAiqC,EAAA,EAAAhpC,IAAA,uBAAAC,MAqCD,WACE,IAAMkpC,GAAUv0B,EAAAA,EAAAA,GAAO3C,KAAKi3B,WAAWvqB,WACvC6V,GAAO2U,EAAWzpC,QAAU,IAAK,2CAEjC,IAAM0pC,EAAkBD,EAAWE,QACjC,SAAAj0B,GAAA,IAAI4yB,GAAJzwB,EAAAA,EAAAA,GAAAnC,EAAA,GAAQ,UAAM4yB,EAAKsB,UAAYtB,EAAKuB,UAAU,IAE1CC,EAAkBL,EAAWE,QACjC,SAAAI,GAAA,IAAIzB,GAAJzwB,EAAAA,EAAAA,GAAAkyB,EAAA,GAAQ,UAAMzB,EAAKsB,WAAatB,EAAKuB,UAAU,IAE3CG,EAAqBP,EAAWE,QACpC,SAAAM,GAAA,IAAI3B,GAAJzwB,EAAAA,EAAAA,GAAAoyB,EAAA,GAAQ,UAAO3B,EAAKsB,UAAYtB,EAAKuB,UAAU,IAE3CK,EAAqBT,EAAWE,QACpC,SAAAQ,GAAA,IAAI7B,GAAJzwB,EAAAA,EAAAA,GAAAsyB,EAAA,GAAQ,UAAO7B,EAAKsB,WAAatB,EAAKuB,UAAU,IAG5CO,EAAwB,CAC5BC,sBAAuBX,EAAgB1pC,OAAS8pC,EAAgB9pC,OAChEsqC,0BAA2BR,EAAgB9pC,OAC3CuqC,4BAA6BL,EAAmBlqC,QAuBlD,OAlBE80B,GACE4U,EAAgB1pC,OAAS,EACzB,6CAGF80B,IADAjd,EAAAA,EAAAA,GAAuB6xB,EAAgB,GAAE,GAAtB,KAEAn3B,KAAKg3B,MAAMxE,WAC5B,0DAWG,CAACqF,EAPkB,GAAHp6B,QAAAkF,EAAAA,EAAAA,GAClBw0B,EAAgB/xB,KAAI,SAAA6yB,GAAA,IAAEvE,GAAFpuB,EAAAA,EAAAA,GAAA2yB,EAAA,GAAS,UAAM,IAAIlG,GAAU2B,QAAS/wB,EAAAA,EAAAA,GAC1D40B,EAAgBnyB,KAAI,SAAA8yB,GAAA,IAAExE,GAAFpuB,EAAAA,EAAAA,GAAA4yB,EAAA,GAAS,UAAM,IAAInG,GAAU2B,QAAS/wB,EAAAA,EAAAA,GAC1D80B,EAAmBryB,KAAI,SAAA+yB,GAAA,IAAEzE,GAAFpuB,EAAAA,EAAAA,GAAA6yB,EAAA,GAAS,UAAM,IAAIpG,GAAU2B,QAAS/wB,EAAAA,EAAAA,GAC7Dg1B,EAAmBvyB,KAAI,SAAAgzB,GAAA,IAAE1E,GAAFpuB,EAAAA,EAAAA,GAAA8yB,EAAA,GAAS,UAAM,IAAIrG,GAAU2B,EAAQ,MAInE,GAAC,CAAA3lC,IAAA,qBAAAC,MAED,SACEqqC,GAEA,IAAAC,EACEt4B,KAAKu4B,4BACHF,EAAYj2B,MAAMo2B,WAClB,SAAAC,GAAO,OACJA,EAAQpB,WAAaoB,EAAQC,WAAaD,EAAQnB,UAAU,IAChEqB,GAAArzB,EAAAA,EAAAA,GAAAgzB,EAAA,GALIM,EAAeD,EAAA,GAAEE,EAAmBF,EAAA,GAM3CG,EACE94B,KAAKu4B,4BACHF,EAAYj2B,MAAMo2B,WAClB,SAAAC,GAAO,OACJA,EAAQpB,WAAaoB,EAAQC,YAAcD,EAAQnB,UAAU,IACjEyB,GAAAzzB,EAAAA,EAAAA,GAAAwzB,EAAA,GALIE,EAAeD,EAAA,GAAEE,EAAmBF,EAAA,GAQ3C,GAA+B,IAA3BH,EAAgBnrC,QAA2C,IAA3BurC,EAAgBvrC,OAIpD,MAAO,CACL,CACEyrC,WAAYb,EAAYtqC,IACxB6qC,gBAAAA,EACAI,gBAAAA,GAEF,CACE/D,SAAU4D,EACV3D,SAAU+D,GAGhB,GAEA,CAAAlrC,IAAA,8BAAAC,MACA,SACEmrC,EACAC,GACmC,IAIuBjjC,EAJvB7G,EAAA,KAC7B+pC,EAAqB,IAAIrjC,MACzBsjC,EAAc,IAAItjC,MAAQI,EAAAmjC,GAECv5B,KAAKi3B,WAAWvqB,WAAS,QAAA8sB,EAAA,WAAE,IAAAC,GAAAn0B,EAAAA,EAAAA,GAAAnP,EAAAnI,MAAA,GAAhD0lC,EAAO+F,EAAA,GAAEhB,EAAOgB,EAAA,GAC1B,GAAIL,EAAcX,GAAU,CAC1B,IAAM1qC,EAAM,IAAIgkC,GAAU2B,GACpBgG,EAAmBP,EAAmBQ,WAAU,SAAAC,GAAK,OACzDA,EAAMliB,OAAO3pB,EAAI,IAEf2rC,GAAoB,IACtBnX,GAAOmX,EAAmB,IAAK,mCAC/BL,EAAmB/jC,KAAKokC,GACxBJ,EAAYhkC,KAAKvH,GACjBuB,EAAK2nC,WAAiB,OAACvD,GAE3B,GAZF,IAAAt9B,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAAAijC,GAaC,OAAA/iC,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CAED,MAAO,CAAC0iC,EAAoBC,EAC9B,IAAC,EAAAvrC,IAAA,UAAAC,MA3ID,SACEunC,EACAyB,GAEA,IAAMC,EAAyB,IAAIhhB,IAC7B4jB,EAAqB,SAAC7D,GAC1B,IAAMtC,EAAUsC,EAAOxD,WACnBiG,EAAUxB,EAAW50B,IAAIqxB,GAS7B,YARgBlkC,IAAZipC,IACFA,EAAU,CACRpB,UAAU,EACVC,YAAY,EACZoB,WAAW,GAEbzB,EAAWn3B,IAAI4zB,EAAS+E,IAEnBA,GAGHqB,EAAeD,EAAmB7C,GACxC8C,EAAazC,UAAW,EACxByC,EAAaxC,YAAa,EAAK,IAEFzgC,EAFEG,EAAAuiC,GAEdhE,GAAY,IAA7B,IAAAv+B,EAAAX,MAAAQ,EAAAG,EAAAV,KAAAC,MAA+B,KAApBwjC,EAAEljC,EAAA7I,MACX6rC,EAAmBE,EAAGhH,WAAW2F,WAAY,EAAK,IACjBzhC,EADiBI,EAAAkiC,GACxBQ,EAAGhW,MAAI,IAAjC,IAAA1sB,EAAAhB,MAAAY,EAAAI,EAAAf,KAAAC,MAAmC,KAAxByjC,EAAW/iC,EAAAjJ,MACdisC,EAAUJ,EAAmBG,EAAYhE,QAC/CiE,EAAQ5C,WAAR4C,EAAQ5C,SAAa2C,EAAY3C,UACjC4C,EAAQ3C,aAAR2C,EAAQ3C,WAAe0C,EAAY1C,WACrC,CAAC,OAAA7gC,GAAAY,EAAAX,EAAAD,EAAA,SAAAY,EAAAV,GAAA,CACH,CAAC,OAAAF,GAAAO,EAAAN,EAAAD,EAAA,SAAAO,EAAAL,GAAA,CAED,OAAO,IAAIogC,EAAaC,EAAOC,EACjC,KAACF,CAAA,CA1CsB,GC2CZmD,GAAO,WAWlB,SAAAA,EAAYC,GAAmB,IAAA7qC,EAAA,MAAAzC,EAAAA,EAAAA,GAAA,KAAAqtC,GAAA,KAV/BrC,YAAM,OACNuC,iBAAW,OACXC,qBAAe,OACf9E,kBAAY,OAEJ+E,kBAA4C,IAAIrkB,IAMtDjW,KAAK63B,OAASsC,EAAKtC,OACnB73B,KAAKo6B,YAAcD,EAAKC,YAAYh1B,KAAI,SAAAm1B,GAAO,OAAI,IAAIxI,GAAUwI,MACjEv6B,KAAKq6B,gBAAkBF,EAAKE,gBAC5Br6B,KAAKu1B,aAAe4E,EAAK5E,aACzBv1B,KAAKu1B,aAAa11B,SAAQ,SAAAk6B,GAAE,OAC1BzqC,EAAKgrC,kBAAkBx6B,IACrBi6B,EAAGlE,eACHvmC,EAAK8qC,YAAYL,EAAGlE,gBACrB,GAEL,CAoPC,OApPA/oC,EAAAA,EAAAA,GAAAotC,EAAA,EAAAnsC,IAAA,UAAAsU,IAED,WACE,MAAO,QACT,GAAC,CAAAtU,IAAA,oBAAAsU,IAED,WACE,OAAOrC,KAAKo6B,WACd,GAAC,CAAArsC,IAAA,uBAAAsU,IAED,WACE,OAAOrC,KAAKu1B,aAAanwB,KACvB,SAAC20B,GAAE,MAAkC,CACnClE,eAAgBkE,EAAGlE,eACnBC,kBAAmBiE,EAAGS,SACtBh7B,KAAM6yB,KAAAA,OAAY0H,EAAGv6B,MACtB,GAEL,GAAC,CAAAzR,IAAA,sBAAAsU,IAED,WACE,MAAO,EACT,GAAC,CAAAtU,IAAA,iBAAAC,MAED,WACE,OAAO,IAAI6mC,GAAmB70B,KAAK80B,kBACrC,GAAC,CAAA/mC,IAAA,kBAAAC,MAqBD,SAAgBmnC,GACd,OAAOA,EAAQn1B,KAAK63B,OAAOC,qBAC7B,GAAC,CAAA/pC,IAAA,oBAAAC,MAED,SAAkBmnC,GAChB,IAAMsF,EAAoBz6B,KAAK63B,OAAOC,sBACtC,OAAI3C,GAASn1B,KAAK63B,OAAOC,sBACM3C,EAAQsF,EACTz6B,KAAKo6B,YAAY3sC,OAASgtC,EAE9Bz6B,KAAK63B,OAAOG,4BAK7B7C,EADLsF,EAAoBz6B,KAAK63B,OAAOE,yBAGtC,GAAC,CAAAhqC,IAAA,cAAAC,MAED,SAAYmnC,GACV,OAAOn1B,KAAKs6B,kBAAkBI,IAAIvF,EACpC,GAAC,CAAApnC,IAAA,aAAAC,MAED,WACE,OAAA2U,EAAAA,EAAAA,GAAW3C,KAAKs6B,kBAAkB7rC,SACpC,GAAC,CAAAV,IAAA,gBAAAC,MAED,WAA6B,IAAAkC,EAAA,KAC3B,OAAO8P,KAAKo6B,YAAYhD,QAAO,SAAC5uB,EAAG2sB,GAAK,OAAMjlC,EAAKyqC,YAAYxF,KACjE,GAAC,CAAApnC,IAAA,YAAAC,MAED,WACE,IAAM4sC,EAAU56B,KAAKo6B,YAAY3sC,OAE7BotC,EAAqB,GACzBhE,GAAsBgE,EAAUD,GAEhC,IAAMrF,EAAev1B,KAAKu1B,aAAanwB,KAAI,SAAAwwB,GACzC,IAAO4E,EAA4B5E,EAA5B4E,SAAU3E,EAAkBD,EAAlBC,eACXr2B,EAAOxJ,MAAM1I,KAAK+kC,KAAAA,OAAYuD,EAAYp2B,OAE5Cs7B,EAA4B,GAChCjE,GAAsBiE,EAAiBN,EAAS/sC,QAEhD,IAAIstC,EAAsB,GAG1B,OAFAlE,GAAsBkE,EAAWv7B,EAAK/R,QAE/B,CACLooC,eAAAA,EACAiF,gBAAiBztC,EAAAA,OAAOC,KAAKwtC,GAC7BE,WAAYR,EACZS,WAAY5tC,EAAAA,OAAOC,KAAKytC,GACxBv7B,KAAAA,EAEJ,IAEI07B,EAA6B,GACjCrE,GAAsBqE,EAAkB3F,EAAa9nC,QACrD,IAAI0tC,EAAoB9tC,EAAAA,OAAOslC,MAAMwB,IACrC9mC,EAAAA,OAAOC,KAAK4tC,GAAkBt+B,KAAKu+B,GACnC,IAAIC,EAA0BF,EAAiBztC,OAE/C8nC,EAAa11B,SAAQ,SAAA+1B,GACnB,IA2BMnoC,EA3BoBwoC,GAAAA,GAQxB,CACAA,GAAAA,GAAgB,kBAEhBA,GAAAA,GACEL,EAAYkF,gBAAgBrtC,OAC5B,mBAEFwoC,GAAAA,GACEA,GAAAA,GAAgB,YAChBL,EAAYoF,WAAWvtC,OACvB,cAEFwoC,GAAAA,GAAkBL,EAAYqF,WAAWxtC,OAAQ,cACjDwoC,GAAAA,GACEA,GAAAA,GAAgB,aAChBL,EAAYp2B,KAAK/R,OACjB,UAG6B6C,OAC/BslC,EACAuF,EACAC,GAEFA,GAA2B3tC,CAC7B,IACA0tC,EAAoBA,EAAkBh/B,MAAM,EAAGi/B,GAE/C,IAAMC,EAAiBpF,GAAAA,GASrB,CACAA,GAAAA,GAAkB,EAAG,yBACrBA,GAAAA,GAAkB,EAAG,6BACrBA,GAAAA,GAAkB,EAAG,+BACrBA,GAAAA,GAAkB4E,EAASptC,OAAQ,YACnCwoC,GAAAA,GAAiB1a,GAAiB,OAAQqf,EAAS,QACnDrf,GAAiB,qBAGb+f,EAAc,CAClBxD,sBAAuBzqC,EAAAA,OAAOC,KAAK,CAAC0S,KAAK63B,OAAOC,wBAChDC,0BAA2B1qC,EAAAA,OAAOC,KAAK,CACrC0S,KAAK63B,OAAOE,4BAEdC,4BAA6B3qC,EAAAA,OAAOC,KAAK,CACvC0S,KAAK63B,OAAOG,8BAEd6C,SAAUxtC,EAAAA,OAAOC,KAAKutC,GACtB9W,KAAM/jB,KAAKo6B,YAAYh1B,KAAI,SAAArX,GAAG,OAAIqjC,GAASrjC,EAAIwR,cAC/C86B,gBAAiBhI,KAAAA,OAAYryB,KAAKq6B,kBAGhCkB,EAAWluC,EAAAA,OAAOslC,MAAM,MACtBllC,EAAS4tC,EAAe/qC,OAAOgrC,EAAaC,GAElD,OADAJ,EAAkBv+B,KAAK2+B,EAAU9tC,GAC1B8tC,EAASp/B,MAAM,EAAG1O,EAAS0tC,EAAkB1tC,OACtD,IAEA,EAAAM,IAAA,UAAAC,MA3JA,SAAemsC,GACb,IACAqB,EADqBzE,GAAa0E,QAAQtB,EAAK5E,aAAc4E,EAAKuB,UACjBC,uBAAsBC,GAAAt2B,EAAAA,EAAAA,GAAAk2B,EAAA,GAAhE3D,EAAM+D,EAAA,GAAE9G,EAAiB8G,EAAA,GAE1BrG,EADc,IAAIV,GAAmBC,GACV+G,oBAAoB1B,EAAK5E,cAAcnwB,KACtE,SAAC20B,GAA8B,MAA2B,CACxDlE,eAAgBkE,EAAGlE,eACnB2E,SAAUT,EAAGjE,kBACbt2B,KAAM6yB,KAAAA,OAAY0H,EAAGv6B,MACtB,IAEH,OAAO,IAAI06B,EAAQ,CACjBrC,OAAAA,EACAuC,YAAatF,EACbuF,gBAAiBF,EAAKE,gBACtB9E,aAAAA,GAEJ,GAAC,CAAAxnC,IAAA,OAAAC,MA6ID,SAAYT,GAEV,IAAIuuC,GAASn5B,EAAAA,EAAAA,GAAOpV,GAEduqC,EAAwBgE,EAAUrkC,QACxC,GACEqgC,KPvQ6B,IOwQ5BA,GAED,MAAM,IAAI5oC,MACR,+EASJ,IALA,IAAM6oC,EAA4B+D,EAAUrkC,QACtCugC,EAA8B8D,EAAUrkC,QAExCskC,EAAerF,GAAsBoF,GACvC1B,EAAc,GACT/kC,EAAI,EAAGA,EAAI0mC,EAAc1mC,IAAK,CACrC,IAAMklC,EAAUuB,EAAU3/B,MAAM,EAAGw1B,IACnCmK,EAAYA,EAAU3/B,MAAMw1B,IAC5ByI,EAAY9kC,KAAK,IAAIy8B,GAAU1kC,EAAAA,OAAOC,KAAKitC,IAC7C,CAOA,IALA,IAAMF,EAAkByB,EAAU3/B,MAAM,EAAGw1B,IAGrCuJ,EAAmBxE,GAFzBoF,EAAYA,EAAU3/B,MAAMw1B,KAGxB4D,EAAsC,GACjC/oB,EAAI,EAAGA,EAAI0uB,EAAkB1uB,IAAK,CACzC,IAAMqpB,EAAiBiG,EAAUrkC,QAC3BukC,EAAetF,GAAsBoF,GACrCtB,EAAWsB,EAAU3/B,MAAM,EAAG6/B,GAE9Bf,EAAavE,GADnBoF,EAAYA,EAAU3/B,MAAM6/B,IAEtBC,EAAYH,EAAU3/B,MAAM,EAAG8+B,GAC/Bz7B,EAAO6yB,KAAAA,OAAYhlC,EAAAA,OAAOC,KAAK2uC,IACrCH,EAAYA,EAAU3/B,MAAM8+B,GAC5B1F,EAAajgC,KAAK,CAChBugC,eAAAA,EACA2E,SAAAA,EACAh7B,KAAAA,GAEJ,CAaA,OAAO,IAAI06B,EAXS,CAClBrC,OAAQ,CACNC,sBAAAA,EACAC,0BAAAA,EACAC,4BAAAA,GAEFqC,gBAAiBhI,KAAAA,OAAYhlC,EAAAA,OAAOC,KAAK+sC,IACzCD,YAAAA,EACA7E,aAAAA,GAIJ,KAAC2E,CAAA,CA1QiB,8hCCRpB,IAAagC,GAAS,WAOpB,SAAAA,EAAY/B,IAAqBttC,EAAAA,EAAAA,GAAA,KAAAqvC,GAAA,KANjCrE,YAAM,OACN/C,uBAAiB,OACjBuF,qBAAe,OACf8B,0BAAoB,OACpBC,yBAAmB,EAGjBp8B,KAAK63B,OAASsC,EAAKtC,OACnB73B,KAAK80B,kBAAoBqF,EAAKrF,kBAC9B90B,KAAKq6B,gBAAkBF,EAAKE,gBAC5Br6B,KAAKm8B,qBAAuBhC,EAAKgC,qBACjCn8B,KAAKo8B,oBAAsBjC,EAAKiC,mBAClC,CA+aC,OA/aAtvC,EAAAA,EAAAA,GAAAovC,EAAA,EAAAnuC,IAAA,UAAAsU,IAED,WACE,OAAO,CACT,GAAC,CAAAtU,IAAA,4BAAAsU,IAED,WACE,IAC6ClM,EADzCnB,EAAQ,EAAEoB,EAAAimC,GACOr8B,KAAKo8B,qBAAmB,IAA7C,IAAAhmC,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAA+C,KAApC+lC,EAAMnmC,EAAAnI,MACfgH,GAASsnC,EAAOtD,gBAAgBvrC,OAAS6uC,EAAO1D,gBAAgBnrC,MAClE,CAAC,OAAAgJ,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CACD,OAAO3B,CACT,GAAC,CAAAjH,IAAA,iBAAAC,MAED,SAAemsC,GACb,IAAIpF,EACJ,GACEoF,GACA,2BAA4BA,GAC5BA,EAAKpF,uBACL,CACA,GACE/0B,KAAKu8B,2BACLpC,EAAKpF,uBAAuBE,SAASxnC,OACnC0sC,EAAKpF,uBAAuBG,SAASznC,OAEvC,MAAM,IAAIyB,MACR,+FAGJ6lC,EAAyBoF,EAAKpF,4BACzB,GACLoF,GACA,+BAAgCA,GAChCA,EAAKqC,2BAELzH,EAAyB/0B,KAAKy8B,2BAC5BtC,EAAKqC,iCAEF,GAAIx8B,KAAKo8B,oBAAoB3uC,OAAS,EAC3C,MAAM,IAAIyB,MACR,8EAGJ,OAAO,IAAI2lC,GACT70B,KAAK80B,kBACLC,EAEJ,GAAC,CAAAhnC,IAAA,kBAAAC,MAED,SAAgBmnC,GACd,OAAOA,EAAQn1B,KAAK63B,OAAOC,qBAC7B,GAAC,CAAA/pC,IAAA,oBAAAC,MAED,SAAkBmnC,GAChB,IAAMsF,EAAoBz6B,KAAK63B,OAAOC,sBAChC4E,EAAuB18B,KAAK80B,kBAAkBrnC,OACpD,OAAI0nC,GAASuH,EACoBvH,EAAQuH,EACF18B,KAAKo8B,oBAAoB5mC,QAC5D,SAACR,EAAOsnC,GAAM,OAAKtnC,EAAQsnC,EAAO1D,gBAAgBnrC,MAAM,GACxD,GAGO0nC,GAASn1B,KAAK63B,OAAOC,sBACD3C,EAAQsF,EACTiC,EAAuBjC,EAE3Bz6B,KAAK63B,OAAOG,4BAK7B7C,EADLsF,EAAoBz6B,KAAK63B,OAAOE,yBAGtC,GAAC,CAAAhqC,IAAA,6BAAAC,MAED,SACEwuC,GAEA,IAKkD3lC,EAL5Ck+B,EAAiD,CACrDE,SAAU,GACVC,SAAU,IACVl+B,EAAAqlC,GAEwBr8B,KAAKo8B,qBAAmB,QAAA5C,EAAA,WAAE,IAAzCmD,EAAW9lC,EAAA7I,MACd4uC,EAAeJ,EAA2BK,MAAK,SAAAtC,GAAO,OAC1DA,EAAQxsC,IAAI2pB,OAAOilB,EAAYzD,WAAW,IAE5C,IAAK0D,EACH,MAAM,IAAI1tC,MAAM,6DAADuO,OACgDk/B,EAAYzD,WAAW1G,aAEvF,IAE8Cv7B,EAF9CI,EAAAglC,GAEmBM,EAAY/D,iBAAe,IAA/C,IAAAvhC,EAAAhB,MAAAY,EAAAI,EAAAf,KAAAC,MAAiD,KAAtC4+B,EAAKl+B,EAAAjJ,MACd,KAAImnC,EAAQyH,EAAax6B,MAAMo2B,UAAU/qC,QAKvC,MAAM,IAAIyB,MAAM,oCAADuO,OACuB03B,EAAK,6BAAA13B,OAA4Bk/B,EAAYzD,WAAW1G,aAL9FuC,EAAuBE,SAAS3/B,KAC9BsnC,EAAax6B,MAAMo2B,UAAUrD,GAOnC,CAAC,OAAA1+B,GAAAY,EAAAX,EAAAD,EAAA,SAAAY,EAAAV,GAAA,KAE8CY,EAF9CC,EAAA6kC,GAEmBM,EAAY3D,iBAAe,IAA/C,IAAAxhC,EAAAnB,MAAAkB,EAAAC,EAAAlB,KAAAC,MAAiD,KAAtCumC,EAAKvlC,EAAAvJ,MACd,KAAI8uC,EAAQF,EAAax6B,MAAMo2B,UAAU/qC,QAKvC,MAAM,IAAIyB,MAAM,oCAADuO,OACuBq/B,EAAK,6BAAAr/B,OAA4Bk/B,EAAYzD,WAAW1G,aAL9FuC,EAAuBG,SAAS5/B,KAC9BsnC,EAAax6B,MAAMo2B,UAAUsE,GAOnC,CAAC,OAAArmC,GAAAe,EAAAd,EAAAD,EAAA,SAAAe,EAAAb,GAAA,GAhCH,IAAAK,EAAAX,MAAAQ,EAAAG,EAAAV,KAAAC,MAAAijC,GAiCC,OAAA/iC,GAAAO,EAAAN,EAAAD,EAAA,SAAAO,EAAAL,GAAA,CAED,OAAOo+B,CACT,GAAC,CAAAhnC,IAAA,YAAAC,MAsCD,WACE,IAAM+uC,EAAiC/mC,QACvC6gC,GACEkG,EACA/8B,KAAK80B,kBAAkBrnC,QAGzB,IAAMuvC,EAAyBh9B,KAAKi9B,wBAC9BC,EAA4BlnC,QAClC6gC,GACEqG,EACAl9B,KAAKm8B,qBAAqB1uC,QAG5B,IAAM0vC,EAAgCn9B,KAAKo9B,+BACrCC,EAAmCrnC,QACzC6gC,GACEwG,EACAr9B,KAAKo8B,oBAAoB3uC,QAG3B,IAAM6vC,EAAgBrH,GAAAA,GAUnB,CACDA,GAAAA,GAAgB,UAChBA,GAAAA,GACE,CACEA,GAAAA,GAAgB,yBAChBA,GAAAA,GAAgB,6BAChBA,GAAAA,GAAgB,gCAElB,UAEFA,GAAAA,GACE8G,EAA+BtvC,OAC/B,2BAEFwoC,GAAAA,GACE1a,KACAvb,KAAK80B,kBAAkBrnC,OACvB,qBAEF8tB,GAAiB,mBACjB0a,GAAAA,GAAkBiH,EAA0BzvC,OAAQ,sBACpDwoC,GAAAA,GACE+G,EAAuBvvC,OACvB,0BAEFwoC,GAAAA,GACEoH,EAAiC5vC,OACjC,6BAEFwoC,GAAAA,GACEkH,EAA8B1vC,OAC9B,mCAIE8vC,EAAoB,IAAIrwC,WAAWinC,IAEnCqJ,EAA0BF,EAAchtC,OAC5C,CACE+pB,OAH6B,IAI7Bwd,OAAQ73B,KAAK63B,OACb4F,wBAAyB,IAAIvwC,WAAW6vC,GACxCjI,kBAAmB90B,KAAK80B,kBAAkB1vB,KAAI,SAAArX,GAAG,OAAIA,EAAIwR,aACzD86B,gBAAiBhI,KAAAA,OAAYryB,KAAKq6B,iBAClCqD,mBAAoB,IAAIxwC,WAAWgwC,GACnCF,uBAAAA,EACAW,0BAA2B,IAAIzwC,WAC7BmwC,GAEFF,8BAAAA,GAEFI,GAEF,OAAOA,EAAkBphC,MAAM,EAAGqhC,EACpC,GAAC,CAAAzvC,IAAA,wBAAAC,MAED,WACE,IAEmD0J,EAF/CkmC,EAAmB,EACjBZ,EAAyB,IAAI9vC,WAAWinC,IAAkBx8B,EAAA0kC,GACtCr8B,KAAKm8B,sBAAoB,IAAnD,IAAAxkC,EAAAtB,MAAAqB,EAAAC,EAAArB,KAAAC,MAAqD,KAA1Cq/B,EAAWl+B,EAAA1J,MACd6vC,EAAiC7nC,QACvC6gC,GACEgH,EACAjI,EAAYE,kBAAkBroC,QAGhC,IAAMqwC,EAAoB9nC,QAC1B6gC,GAAsBiH,EAAmBlI,EAAYp2B,KAAK/R,QAuB1DmwC,GArB0B3H,GAAAA,GAMvB,CACDA,GAAAA,GAAgB,kBAChBA,GAAAA,GACE4H,EAA+BpwC,OAC/B,kCAEFwoC,GAAAA,GACEA,GAAAA,KACAL,EAAYE,kBAAkBroC,OAC9B,qBAEFwoC,GAAAA,GAAkB6H,EAAkBrwC,OAAQ,qBAC5CwoC,GAAAA,GAAkBL,EAAYp2B,KAAK/R,OAAQ,UAGP6C,OACpC,CACEulC,eAAgBD,EAAYC,eAC5BgI,+BAAgC,IAAI3wC,WAClC2wC,GAEF/H,kBAAmBF,EAAYE,kBAC/BgI,kBAAmB,IAAI5wC,WAAW4wC,GAClCt+B,KAAMo2B,EAAYp2B,MAEpBw9B,EACAY,EAEJ,CAAC,OAAAnnC,GAAAkB,EAAAjB,EAAAD,EAAA,SAAAkB,EAAAhB,GAAA,CAED,OAAOqmC,EAAuB7gC,MAAM,EAAGyhC,EACzC,GAAC,CAAA7vC,IAAA,+BAAAC,MAED,WACE,IAE6C4J,EAFzCgmC,EAAmB,EACjBT,EAAgC,IAAIjwC,WAAWinC,IAAkBt8B,EAAAwkC,GAClDr8B,KAAKo8B,qBAAmB,IAA7C,IAAAvkC,EAAAxB,MAAAuB,EAAAC,EAAAvB,KAAAC,MAA+C,KAApC+lC,EAAM1kC,EAAA5J,MACT+vC,EAA+B/nC,QACrC6gC,GACEkH,EACAzB,EAAO1D,gBAAgBnrC,QAGzB,IAAMuwC,EAA+BhoC,QACrC6gC,GACEmH,EACA1B,EAAOtD,gBAAgBvrC,QA+BzBmwC,GA5BiC3H,GAAAA,GAM9B,CACD1a,GAAiB,cACjB0a,GAAAA,GACE8H,EAA6BtwC,OAC7B,gCAEFwoC,GAAAA,GACEA,GAAAA,KACAqG,EAAO1D,gBAAgBnrC,OACvB,mBAEFwoC,GAAAA,GACE+H,EAA6BvwC,OAC7B,gCAEFwoC,GAAAA,GACEA,GAAAA,KACAqG,EAAOtD,gBAAgBvrC,OACvB,qBAIyC6C,OAC3C,CACE4oC,WAAYoD,EAAOpD,WAAW35B,UAC9Bw+B,6BAA8B,IAAI7wC,WAChC6wC,GAEFnF,gBAAiB0D,EAAO1D,gBACxBoF,6BAA8B,IAAI9wC,WAChC8wC,GAEFhF,gBAAiBsD,EAAOtD,iBAE1BmE,EACAS,EAEJ,CAAC,OAAAnnC,GAAAoB,EAAAnB,EAAAD,EAAA,SAAAoB,EAAAlB,GAAA,CAED,OAAOwmC,EAA8BhhC,MAAM,EAAGyhC,EAChD,IAAC,EAAA7vC,IAAA,UAAAC,MA7OD,SAAemsC,GACb,IAQ6Cx/B,EARvCsjC,EAAelH,GAAa0E,QAAQtB,EAAK5E,aAAc4E,EAAKuB,UAE5DU,EAAsB,IAAIpmC,MAC1B++B,EAAiD,CACrDE,SAAU,IAAIj/B,MACdk/B,SAAU,IAAIl/B,OAEkD4E,EAAAyhC,GAAtClC,EAAKqC,4BAA8B,IAClB,IAA7C,IAAA5hC,EAAAvE,MAAAsE,EAAAC,EAAAtE,KAAAC,MAA+C,KAApC8hC,EAAW19B,EAAA3M,MACdkwC,EAAgBD,EAAaE,mBAAmB9F,GACtD,QAAsB7oC,IAAlB0uC,EAA6B,KAAAE,EAAAC,EAC/BC,GAAAh5B,EAAAA,EAAAA,GAAmD44B,EAAa,GAAzDK,EAAkBD,EAAA,GAAAE,EAAAF,EAAA,GAAGrJ,EAAQuJ,EAARvJ,SAAUC,EAAQsJ,EAARtJ,SACtCkH,EAAoB9mC,KAAKipC,IACzBH,EAAArJ,EAAuBE,UAAS3/B,KAAItG,MAAAovC,GAAAz7B,EAAAA,EAAAA,GAAIsyB,KACxCoJ,EAAAtJ,EAAuBG,UAAS5/B,KAAItG,MAAAqvC,GAAA17B,EAAAA,EAAAA,GAAIuyB,GAC1C,CACF,CAAC,OAAAz+B,GAAAmE,EAAAlE,EAAAD,EAAA,SAAAmE,EAAAjE,GAAA,CAED,IAAA6kC,EAAoCyC,EAAatC,uBAAsBC,GAAAt2B,EAAAA,EAAAA,GAAAk2B,EAAA,GAAhE3D,EAAM+D,EAAA,GAAE9G,EAAiB8G,EAAA,GAK1BO,EAJc,IAAItH,GACtBC,EACAC,GAEuC8G,oBACvC1B,EAAK5E,cAEP,OAAO,IAAI2G,EAAU,CACnBrE,OAAAA,EACA/C,kBAAAA,EACAuF,gBAAiBF,EAAKE,gBACtB8B,qBAAAA,EACAC,oBAAAA,GAEJ,GAAC,CAAAruC,IAAA,cAAAC,MA6MD,SAAmBuvC,GACjB,IAAIzB,GAASn5B,EAAAA,EAAAA,GAAO46B,GAEdljB,EAASyhB,EAAUrkC,QACnBgnC,ERpayB,IQoaVpkB,EACrBkI,GACElI,IAAWokB,EAAY,0DAKzBlc,GACc,IAFEkc,EAED,+DAAAhhC,OAFCghC,IAchB,IARA,IAAM5G,EAAwB,CAC5BC,sBAAuBgE,EAAUrkC,QACjCsgC,0BAA2B+D,EAAUrkC,QACrCugC,4BAA6B8D,EAAUrkC,SAGnCq9B,EAAoB,GACpB2I,EAA0B/G,GAAsBoF,GAC7CzmC,EAAI,EAAGA,EAAIooC,EAAyBpoC,IAC3Cy/B,EAAkBx/B,KAChB,IAAIy8B,GAAU+J,EAAU4C,OAAO,EAAG/M,MAQtC,IAJA,IAAM0I,EAAkBhI,KAAAA,OAAYyJ,EAAU4C,OAAO,EAAG/M,KAElDuJ,EAAmBxE,GAAsBoF,GACzCK,EAAqD,GAClD3vB,EAAI,EAAGA,EAAI0uB,EAAkB1uB,IAAK,CACzC,IAAMqpB,EAAiBiG,EAAUrkC,QAC3BknC,EAA0BjI,GAAsBoF,GAChDhG,EAAoBgG,EAAU4C,OAAO,EAAGC,GACxC1D,EAAavE,GAAsBoF,GACnCt8B,EAAO,IAAItS,WAAW4uC,EAAU4C,OAAO,EAAGzD,IAChDkB,EAAqB7mC,KAAK,CACxBugC,eAAAA,EACAC,kBAAAA,EACAt2B,KAAAA,GAEJ,CAIA,IAFA,IAAMo/B,EAA2BlI,GAAsBoF,GACjDM,EAAmD,GAChDxvB,EAAI,EAAGA,EAAIgyB,EAA0BhyB,IAAK,CACjD,IAAMssB,EAAa,IAAInH,GAAU+J,EAAU4C,OAAO,EAAG/M,KAC/CkN,EAAwBnI,GAAsBoF,GAC9ClD,EAAkBkD,EAAU4C,OAAO,EAAGG,GACtCC,EAAwBpI,GAAsBoF,GAC9C9C,EAAkB8C,EAAU4C,OAAO,EAAGI,GAC5C1C,EAAoB9mC,KAAK,CACvB4jC,WAAAA,EACAN,gBAAAA,EACAI,gBAAAA,GAEJ,CAEA,OAAO,IAAIkD,EAAU,CACnBrE,OAAAA,EACA/C,kBAAAA,EACAuF,gBAAAA,EACA8B,qBAAAA,EACAC,oBAAAA,GAEJ,KAACF,CAAA,CA5bmB,GC5CT6C,GAAmB,CAC9BC,0BAAyB,SAACzB,GACxB,IAAMljB,EAASkjB,EAAkB,GAC3BkB,ETAyB,ISAVpkB,EAGrB,OAAIokB,IAAiBpkB,EACZ,SAIFokB,GAGThN,YAAa,SAAC8L,GACZ,IAAM0B,EACJF,GAAiBC,0BAA0BzB,GAC7C,GAAgB,WAAZ0B,EACF,OAAO/E,GAAQ5sC,KAAKiwC,GAGtB,GAAgB,IAAZ0B,EACF,OAAO/C,GAAUzK,YAAY8L,GAE7B,MAAM,IAAIruC,MAAM,+BAADuO,OACkBwhC,EAAO,qCAG5C,6vCCdgB,IAAAC,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAAA,EAAiB,+CAAjBA,EAAAA,EAAiB,yBAAjBA,EAAAA,EAAiB,yBAAjBA,EAAAA,EAAiB,iCAAjBA,CAAiB,MAU7BC,GAAoB9xC,EAAAA,OAAOslC,MVnBQ,IUmByBnxB,KAAK,GAiD1D49B,GAAsB,WAiBjC,SAAAA,EAAY/sB,IAAwCxlB,EAAAA,EAAAA,GAAA,KAAAuyC,GAhBpD,KAIArb,UAAI,EAEJ,KAGAgP,eAAS,EAET,KAGAvzB,KAAenS,EAAAA,OAAOslC,MAAM,GAG1B3yB,KAAK+yB,UAAY1gB,EAAK0gB,UACtB/yB,KAAK+jB,KAAO1R,EAAK0R,KACb1R,EAAK7S,OACPQ,KAAKR,KAAO6S,EAAK7S,KAErB,CAeC,OAbD1S,EAAAA,EAAAA,GAAAsyC,EAAA,EAAArxC,IAAA,SAAAC,MAGA,WACE,MAAO,CACL+1B,KAAM/jB,KAAK+jB,KAAK3e,KAAI,SAAAjC,GAAA,IAAE6yB,EAAM7yB,EAAN6yB,OAAQqB,EAAQl0B,EAARk0B,SAAUC,EAAUn0B,EAAVm0B,WAAU,MAAO,CACvDtB,OAAQA,EAAOqJ,SACfhI,SAAAA,EACAC,WAAAA,EACD,IACDvE,UAAW/yB,KAAK+yB,UAAUsM,SAC1B7/B,MAAImD,EAAAA,EAAAA,GAAM3C,KAAKR,MAEnB,KAAC4/B,CAAA,CAtCgC,GA2HtBE,GAAW,WA+EtB,SAAAA,EACEjtB,GAKA,IADAxlB,EAAAA,EAAAA,GAAA,KAAAyyC,GAnFF,KAIAC,WAAyC,GAczC,KAGAC,cAAQ,EAER,KAGAjK,aAA8C,GAE9C,KAGA8E,qBAAe,EAEf,KAGAoF,0BAAoB,EAEpB,KAIAC,eAAS,EAET,KAOAC,yBAAmB,EAEnB,KAGAC,cAAQ,EAER,KAGAC,WAAK,EAuBExtB,EASL,GANIA,EAAKmtB,WACPx/B,KAAKw/B,SAAWntB,EAAKmtB,UAEnBntB,EAAKktB,aACPv/B,KAAKu/B,WAAaltB,EAAKktB,YAErBnxC,OAAOG,UAAU8K,eAAe5J,KAAK4iB,EAAM,aAAc,CAC3D,IAAAhN,EAAoCgN,EAA7BytB,EAAcz6B,EAAdy6B,eAAgBJ,EAASr6B,EAATq6B,UACvB1/B,KAAK2/B,oBAAsBG,EAC3B9/B,KAAK0/B,UAAYA,CACnB,MAAO,GACLtxC,OAAOG,UAAU8K,eAAe5J,KAAK4iB,EAAM,wBAC3C,CACA,IAAAmlB,EACEnlB,EADK0tB,EAASvI,EAATuI,UAAWN,EAAoBjI,EAApBiI,qBAElBz/B,KAAKq6B,gBAAkB0F,EACvB//B,KAAKy/B,qBAAuBA,CAC9B,KAAO,CACL,IAAAO,EACE3tB,EADKgoB,EAAe2F,EAAf3F,gBAAiB4F,EAASD,EAATN,UAEpBO,IACFjgC,KAAK0/B,UAAYO,GAEnBjgC,KAAKq6B,gBAAkBA,CACzB,CACF,CAunBC,OArnBDvtC,EAAAA,EAAAA,GAAAwyC,EAAA,EAAAvxC,IAAA,YAAAsU,IAvGA,WACE,OAAIrC,KAAKu/B,WAAW9xC,OAAS,EACpBuS,KAAKu/B,WAAW,GAAG3Q,UAErB,IACT,GAAC,CAAA7gC,IAAA,SAAAC,MAqGD,WACE,MAAO,CACLqsC,gBAAiBr6B,KAAKq6B,iBAAmB,KACzCmF,SAAUx/B,KAAKw/B,SAAWx/B,KAAKw/B,SAASH,SAAW,KACnDK,UAAW1/B,KAAK0/B,UACZ,CACE/L,MAAO3zB,KAAK0/B,UAAU/L,MACtBuM,iBAAkBlgC,KAAK0/B,UAAUQ,iBAAiBb,UAEpD,KACJ9J,aAAcv1B,KAAKu1B,aAAanwB,KAAI,SAAAwwB,GAAW,OAAIA,EAAYyJ,YAC/Dc,QAASngC,KAAKu/B,WAAWn6B,KAAI,SAAAsyB,GAC3B,OADsCA,EAATnc,UACZ8jB,YAGvB,GAEA,CAAAtxC,IAAA,MAAAC,MAKA,WAIe,QAAAsB,EAAA,KAAAqO,EAAA1O,UAAAxB,OAHV2yC,EAAK,IAAApqC,MAAA2H,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAALuiC,EAAKviC,GAAA5O,UAAA4O,GAIR,GAAqB,IAAjBuiC,EAAM3yC,OACR,MAAM,IAAIyB,MAAM,mBAYlB,OATAkxC,EAAMvgC,SAAQ,SAACsS,GACT,iBAAkBA,EACpB7iB,EAAKimC,aAAejmC,EAAKimC,aAAa93B,OAAO0U,EAAKojB,cACzC,SAAUpjB,GAAQ,cAAeA,GAAQ,SAAUA,EAC5D7iB,EAAKimC,aAAajgC,KAAK6c,GAEvB7iB,EAAKimC,aAAajgC,KAAK,IAAI8pC,GAAuBjtB,GAEtD,IACOnS,IACT,GAEA,CAAAjS,IAAA,iBAAAC,MAGA,WACE,GACEgS,KAAK4/B,UACLlgB,KAAKC,UAAU3f,KAAKq/B,YAAc3f,KAAKC,UAAU3f,KAAK6/B,OAEtD,OAAO7/B,KAAK4/B,SAGd,IAAIvF,EACA9E,EAoBAiK,EARJ,GAXIx/B,KAAK0/B,WACPrF,EAAkBr6B,KAAK0/B,UAAU/L,MAE/B4B,EADEv1B,KAAKu1B,aAAa,IAAMv1B,KAAK0/B,UAAUQ,iBACzB,CAAAlgC,KAAK0/B,UAAUQ,kBAAgBziC,QAAAkF,EAAAA,EAAAA,GAAK3C,KAAKu1B,eAE1Cv1B,KAAKu1B,eAGtB8E,EAAkBr6B,KAAKq6B,gBACvB9E,EAAev1B,KAAKu1B,eAEjB8E,EACH,MAAM,IAAInrC,MAAM,wCAQlB,GALIqmC,EAAa9nC,OAAS,GACxB4yC,QAAQC,KAAK,4BAIXtgC,KAAKw/B,SACPA,EAAWx/B,KAAKw/B,aACX,MAAIx/B,KAAKu/B,WAAW9xC,OAAS,GAAKuS,KAAKu/B,WAAW,GAAGhkB,WAI1D,MAAM,IAAIrsB,MAAM,kCAFhBswC,EAAWx/B,KAAKu/B,WAAW,GAAGhkB,SAGhC,CAEA,IAAK,IAAIlmB,EAAI,EAAGA,EAAIkgC,EAAa9nC,OAAQ4H,IACvC,QAAkC7F,IAA9B+lC,EAAalgC,GAAG09B,UAClB,MAAM,IAAI7jC,MAAM,iCAADuO,OACoBpI,EAAC,8BAKxC,IAAMkrC,EAAuB,GACvBC,EAA8B,GACpCjL,EAAa11B,SAAQ,SAAA+1B,GACnBA,EAAY7R,KAAKlkB,SAAQ,SAAAm6B,GACvBwG,EAAalrC,6WAAImrC,CAAK,GAAAzG,GACxB,IAEA,IAAMjH,EAAY6C,EAAY7C,UAAUz2B,WACnCikC,EAAWziC,SAASi1B,IACvBwN,EAAWjrC,KAAKy9B,EAEpB,IAGAwN,EAAW1gC,SAAQ,SAAAkzB,GACjByN,EAAalrC,KAAK,CAChB0gC,OAAQ,IAAIjE,GAAUgB,GACtBsE,UAAU,EACVC,YAAY,GAEhB,IAGA,IAAMoJ,EAA6B,GACnCF,EAAa3gC,SAAQ,SAAAm6B,GACnB,IAAM2G,EAAe3G,EAAYhE,OAAO15B,WAClCskC,EAAcF,EAAY/G,WAAU,SAAAnsB,GACxC,OAAOA,EAAEwoB,OAAO15B,aAAeqkC,CACjC,IACIC,GAAe,GACjBF,EAAYE,GAAatJ,WACvBoJ,EAAYE,GAAatJ,YAAc0C,EAAY1C,WACrDoJ,EAAYE,GAAavJ,SACvBqJ,EAAYE,GAAavJ,UAAY2C,EAAY3C,UAEnDqJ,EAAYprC,KAAK0kC,EAErB,IAGA0G,EAAYG,MAAK,SAAUrzB,EAAGE,GAC5B,GAAIF,EAAE6pB,WAAa3pB,EAAE2pB,SAEnB,OAAO7pB,EAAE6pB,UAAY,EAAI,EAE3B,GAAI7pB,EAAE8pB,aAAe5pB,EAAE4pB,WAErB,OAAO9pB,EAAE8pB,YAAc,EAAI,EAW7B,OAAO9pB,EAAEwoB,OACNxD,WACAsO,cAAcpzB,EAAEsoB,OAAOxD,WAAY,KAVtB,CACduO,cAAe,WACfC,MAAO,OACPC,YAAa,UACbC,mBAAmB,EACnBC,SAAS,EACTC,UAAW,SAKf,IAGA,IAAMC,EAAgBX,EAAY/G,WAAU,SAAAnsB,GAC1C,OAAOA,EAAEwoB,OAAOte,OAAO8nB,EACzB,IACA,GAAI6B,GAAiB,EAAG,CACtB,IAAAC,EAAoBZ,EAAYhC,OAAO2C,EAAe,GAA/CE,GAAiDj8B,EAAAA,EAAAA,GAAAg8B,EAAA,GAAxC,GAChBC,EAAUlK,UAAW,EACrBkK,EAAUjK,YAAa,EACvBoJ,EAAYc,QAAQD,EACtB,MACEb,EAAYc,QAAQ,CAClBxL,OAAQwJ,EACRnI,UAAU,EACVC,YAAY,IAIhB,IACuCnhC,EADvCC,EAAAqrC,GACwBzhC,KAAKu/B,YAAU,QAAA/F,EAAA,WAAE,IAA9B5K,EAASz4B,EAAAnI,MACZ4yC,EAAcF,EAAY/G,WAAU,SAAAnsB,GACxC,OAAOA,EAAEwoB,OAAOte,OAAOkX,EAAUrT,UACnC,IACA,KAAIqlB,GAAe,GAUjB,MAAM,IAAI1xC,MAAM,mBAADuO,OAAoBmxB,EAAUrT,UAAUjf,aATlDokC,EAAYE,GAAavJ,WAC5BqJ,EAAYE,GAAavJ,UAAW,EACpCgJ,QAAQC,KACN,kOARR,IAAAlqC,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAAAijC,GAgBC,OAAA/iC,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CAED,IAAImhC,EAAwB,EACxBC,EAA4B,EAC5BC,EAA8B,EAG5B0J,EAAuB,GACvBC,EAAyB,GAC/BjB,EAAY7gC,SAAQ,SAAA+hC,GAAoC,IAAlC5L,EAAM4L,EAAN5L,OAAQqB,EAAQuK,EAARvK,SAAUC,EAAUsK,EAAVtK,WAClCD,GACFqK,EAAWpsC,KAAK0gC,EAAO15B,YACvBw7B,GAAyB,EACpBR,IACHS,GAA6B,KAG/B4J,EAAarsC,KAAK0gC,EAAO15B,YACpBg7B,IACHU,GAA+B,GAGrC,IAEA,IAAMoC,EAAcsH,EAAWjkC,OAAOkkC,GAChCxF,EAA8C5G,EAAanwB,KAC/D,SAAAwwB,GACE,IAAOp2B,EAAmBo2B,EAAnBp2B,KAAMuzB,EAAa6C,EAAb7C,UACb,MAAO,CACL8C,eAAgBuE,EAAYyH,QAAQ9O,EAAUz2B,YAC9Ck+B,SAAU5E,EAAY7R,KAAK3e,KAAI,SAAA2wB,GAAI,OACjCqE,EAAYyH,QAAQ9L,EAAKC,OAAO15B,WAAW,IAE7CkD,KAAM6yB,KAAAA,OAAY7yB,GAEtB,IAQF,OALA28B,EAAqBt8B,SAAQ,SAAA+1B,GAC3BrT,GAAUqT,EAAYC,gBAAkB,GACxCD,EAAY4E,SAAS36B,SAAQ,SAAA81B,GAAQ,OAAIpT,GAAUoT,GAAY,KACjE,IAEO,IAAIuE,GAAQ,CACjBrC,OAAQ,CACNC,sBAAAA,EACAC,0BAAAA,EACAC,4BAAAA,GAEFoC,YAAAA,EACAC,gBAAAA,EACA9E,aAAc4G,GAElB,GAEA,CAAApuC,IAAA,WAAAC,MAGA,WACE,IAAM6wB,EAAU7e,KAAK8hC,iBACfJ,EAAa7iB,EAAQub,YAAYj+B,MACrC,EACA0iB,EAAQgZ,OAAOC,uBAGjB,GAAI93B,KAAKu/B,WAAW9xC,SAAWi0C,EAAWj0C,QAC1BuS,KAAKu/B,WAAWwC,OAAM,SAACC,EAAM7M,GACzC,OAAOuM,EAAWvM,GAAOzd,OAAOsqB,EAAKzmB,UACvC,IAEW,OAAOsD,EAQpB,OALA7e,KAAKu/B,WAAamC,EAAWt8B,KAAI,SAAAmW,GAAS,MAAK,CAC7CqT,UAAW,KACXrT,UAAAA,EACD,IAEMsD,CACT,GAEA,CAAA9wB,IAAA,mBAAAC,MAGA,WACE,OAAOgS,KAAKiiC,WAAW1Q,WACzB,GAEA,CAAAxjC,IAAA,kBAAAC,MAAA,eAAAk0C,GAAArP,EAAAA,GAAAA,GAAA3S,KAAAA,MAOA,SAAAW,EAAsBshB,GAAsB,OAAAjiB,KAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC5B6hB,EAAWC,iBAAiBpiC,KAAK8hC,kBAAiB,cAAA1hB,EAAA6S,OAAA,SAAA7S,EAAAiiB,KAAEr0C,OAAK,wBAAAoyB,EAAAK,OAAA,GAAAI,EAAA,UACxE,gBAAAqS,GAAA,OAAAgP,EAAAlzC,MAAA,KAAAC,UAAA,EATD,IAWA,CAAAlB,IAAA,aAAAC,MAUA,WAAyC,QAAA8c,EAAA7b,UAAAxB,OAA3B0yC,EAAO,IAAAnqC,MAAA8U,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAPo1B,EAAOp1B,GAAA9b,UAAA8b,GACnB,GAAuB,IAAnBo1B,EAAQ1yC,OACV,MAAM,IAAIyB,MAAM,cAGlB,IAAMozC,EAAO,IAAI1gB,IACjB5hB,KAAKu/B,WAAaY,EACf/I,QAAO,SAAA7b,GACN,IAAMxtB,EAAMwtB,EAAUjf,WACtB,OAAIgmC,EAAK5H,IAAI3sC,KAGXu0C,EAAKn+B,IAAIpW,IACF,EAEX,IACCqX,KAAI,SAAAmW,GAAS,MAAK,CAACqT,UAAW,KAAMrT,UAAAA,EAAU,GACnD,GAEA,CAAAxtB,IAAA,OAAAC,MAgBA,WAAgC,QAAAu0C,EAAAtzC,UAAAxB,OAAxB0yC,EAAO,IAAAnqC,MAAAusC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAPrC,EAAOqC,GAAAvzC,UAAAuzC,GACb,GAAuB,IAAnBrC,EAAQ1yC,OACV,MAAM,IAAIyB,MAAM,cAMlB,IAFA,IAAMozC,EAAO,IAAI1gB,IACX6gB,EAAgB,GACtBj2B,EAAA,EAAAk2B,EAAqBvC,EAAO3zB,EAAAk2B,EAAAj1C,OAAA+e,IAAE,CAAzB,IAAMm2B,EAAMD,EAAAl2B,GACTze,EAAM40C,EAAOpnB,UAAUjf,WACzBgmC,EAAK5H,IAAI3sC,KAGXu0C,EAAKn+B,IAAIpW,GACT00C,EAAcntC,KAAKqtC,GAEvB,CAEA3iC,KAAKu/B,WAAakD,EAAcr9B,KAAI,SAAAu9B,GAAM,MAAK,CAC7C/T,UAAW,KACXrT,UAAWonB,EAAOpnB,UACnB,IAED,IAAMsD,EAAU7e,KAAKiiC,WACrBjiC,KAAK4iC,aAAY5zC,MAAjBgR,KAAkB,CAAA6e,GAAOphB,OAAKglC,GAChC,GAEA,CAAA10C,IAAA,cAAAC,MASA,WAAuC,QAAA60C,EAAA5zC,UAAAxB,OAAxB0yC,EAAO,IAAAnqC,MAAA6sC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAP3C,EAAO2C,GAAA7zC,UAAA6zC,GACpB,GAAuB,IAAnB3C,EAAQ1yC,OACV,MAAM,IAAIyB,MAAM,cAMlB,IAFA,IAAMozC,EAAO,IAAI1gB,IACX6gB,EAAgB,GACtB71B,EAAA,EAAAm2B,EAAqB5C,EAAOvzB,EAAAm2B,EAAAt1C,OAAAmf,IAAE,CAAzB,IAAM+1B,EAAMI,EAAAn2B,GACT7e,EAAM40C,EAAOpnB,UAAUjf,WACzBgmC,EAAK5H,IAAI3sC,KAGXu0C,EAAKn+B,IAAIpW,GACT00C,EAAcntC,KAAKqtC,GAEvB,CAEA,IAAM9jB,EAAU7e,KAAKiiC,WACrBjiC,KAAK4iC,aAAY5zC,MAAjBgR,KAAkB,CAAA6e,GAAOphB,OAAKglC,GAChC,GAEA,CAAA10C,IAAA,eAAAC,MAGA,SAAa6wB,GAC0B,IADmB,IAAA3uB,EAAA,KAClDqrC,EAAW1c,EAAQ0S,YAAYyR,EAAA/zC,UAAAxB,OADL0yC,EAAO,IAAAnqC,MAAAgtC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAP9C,EAAO8C,EAAA,GAAAh0C,UAAAg0C,GAEvC9C,EAAQtgC,SAAQ,SAAA8iC,GACd,IAAM/T,EAAY3T,GAAKsgB,EAAUoH,EAAO1R,WACxC/gC,EAAKgzC,cAAcP,EAAOpnB,UAAW6V,GAASxC,GAChD,GACF,GAEA,CAAA7gC,IAAA,eAAAC,MAQA,SAAagoC,EAAmBpH,GAC9B5uB,KAAKiiC,WACLjiC,KAAKkjC,cAAclN,EAAQpH,EAC7B,GAEA,CAAA7gC,IAAA,gBAAAC,MAGA,SAAcgoC,EAAmBpH,GAC/BrM,GAA+B,KAArBqM,EAAUnhC,QAEpB,IAAM0nC,EAAQn1B,KAAKu/B,WAAW5F,WAAU,SAAAwJ,GAAO,OAC7CnN,EAAOte,OAAOyrB,EAAQ5nB,UAAU,IAElC,GAAI4Z,EAAQ,EACV,MAAM,IAAIjmC,MAAM,mBAADuO,OAAoBu4B,EAAO15B,aAG5C0D,KAAKu/B,WAAWpK,GAAOvG,UAAYvhC,EAAAA,OAAOC,KAAKshC,EACjD,GAEA,CAAA7gC,IAAA,mBAAAC,MAOA,SAAiBo1C,GACf,OAAOpjC,KAAKqjC,kBACVrjC,KAAKsjC,wBACoB9zC,IAAzB4zC,GAA4CA,EAEhD,GAEA,CAAAr1C,IAAA,oBAAAC,MAGA,SACEutC,EACA6H,GACS,IAC2CvsC,EAD3CG,EAAAyqC,GAC4BzhC,KAAKu/B,YAAU,IAApD,IAAAvoC,EAAAX,MAAAQ,EAAAG,EAAAV,KAAAC,MAAsD,KAAAgtC,EAAA1sC,EAAA7I,MAA1C4gC,EAAS2U,EAAT3U,UAAWrT,EAASgoB,EAAThoB,UACrB,GAAkB,OAAdqT,GACF,GAAIwU,EACF,OAAO,OAGT,IAAK/nB,GAAOuT,EAAW2M,EAAUhgB,EAAUhc,WACzC,OAAO,CAGb,CAAC,OAAA9I,GAAAO,EAAAN,EAAAD,EAAA,SAAAO,EAAAL,GAAA,CACD,OAAO,CACT,GAEA,CAAA5I,IAAA,YAAAC,MAOA,SAAUw1C,GACR,IAAAC,EAAiDr1C,OAAOI,OACtD,CAAC40C,sBAAsB,EAAMM,kBAAkB,GAC/CF,GAFKJ,EAAoBK,EAApBL,qBAAsBM,EAAgBD,EAAhBC,iBAKvBnI,EAAWv7B,KAAKsjC,mBACtB,GACEI,IACC1jC,KAAKqjC,kBAAkB9H,EAAU6H,GAElC,MAAM,IAAIl0C,MAAM,iCAGlB,OAAO8Q,KAAK2jC,WAAWpI,EACzB,GAEA,CAAAxtC,IAAA,aAAAC,MAGA,SAAWutC,GACT,IAAOgE,EAAcv/B,KAAdu/B,WACDqE,EAA2B,GACjC/M,GAAsB+M,EAAgBrE,EAAW9xC,QACjD,IAAMo2C,EACJD,EAAen2C,OAA6B,GAApB8xC,EAAW9xC,OAAc8tC,EAAS9tC,OACtDq2C,EAAkBz2C,EAAAA,OAAOslC,MAAMkR,GAoBrC,OAnBAthB,GAAUgd,EAAW9xC,OAAS,KAC9BJ,EAAAA,OAAOC,KAAKs2C,GAAgBhnC,KAAKknC,EAAiB,GAClDvE,EAAW1/B,SAAQ,SAAA+3B,EAAczC,GAAU,IAAtBvG,EAASgJ,EAAThJ,UACD,OAAdA,IACFrM,GAA+B,KAArBqM,EAAUnhC,OAAe,gCACnCJ,EAAAA,OAAOC,KAAKshC,GAAWhyB,KACrBknC,EACAF,EAAen2C,OAAiB,GAAR0nC,GAG9B,IACAoG,EAAS3+B,KACPknC,EACAF,EAAen2C,OAA6B,GAApB8xC,EAAW9xC,QAErC80B,GACEuhB,EAAgBr2C,QAAU0mC,GAAgB,0BAAA12B,OAChBqmC,EAAgBr2C,OAAM,OAAAgQ,OAAM02B,KAEjD2P,CACT,GAEA,CAAA/1C,IAAA,OAAAsU,IAIA,WAEE,OADAkgB,GAAuC,IAA7BviB,KAAKu1B,aAAa9nC,QACrBuS,KAAKu1B,aAAa,GAAGxR,KAAK3e,KAAI,SAAA2+B,GAAM,OAAIA,EAAO/N,SACxD,GAEA,CAAAjoC,IAAA,YAAAsU,IAIA,WAEE,OADAkgB,GAAuC,IAA7BviB,KAAKu1B,aAAa9nC,QACrBuS,KAAKu1B,aAAa,GAAGxC,SAC9B,GAEA,CAAAhlC,IAAA,OAAAsU,IAIA,WAEE,OADAkgB,GAAuC,IAA7BviB,KAAKu1B,aAAa9nC,QACrBuS,KAAKu1B,aAAa,GAAG/1B,IAC9B,IAEA,EAAAzR,IAAA,OAAAC,MAOA,SAAYT,GAMV,IAJA,IAAIuuC,GAASn5B,EAAAA,EAAAA,GAAOpV,GAEdq2C,EAAiBlN,GAAsBoF,GACzCyD,EAAa,GACRlqC,EAAI,EAAGA,EAAIuuC,EAAgBvuC,IAAK,CACvC,IAAMu5B,EAAYkN,EAAU3/B,MAAM,EVz2BC,IU02BnC2/B,EAAYA,EAAU3/B,MV12Ba,IU22BnCojC,EAAWjqC,KAAK+8B,KAAAA,OAAYhlC,EAAAA,OAAOC,KAAKshC,IAC1C,CAEA,OAAO0Q,EAAY0E,SAAS9J,GAAQ5sC,KAAKwuC,GAAYyD,EACvD,GAEA,CAAAxxC,IAAA,WAAAC,MAQA,SACE6wB,GAEa,IADb0gB,EAAyBtwC,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,GAEtBqsC,EAAc,IAAIgE,EAyCxB,OAxCAhE,EAAYjB,gBAAkBxb,EAAQwb,gBAClCxb,EAAQgZ,OAAOC,sBAAwB,IACzCwD,EAAYkE,SAAW3gB,EAAQub,YAAY,IAE7CmF,EAAW1/B,SAAQ,SAAC+uB,EAAWuG,GAC7B,IAAM8O,EAAgB,CACpBrV,UACEA,GAAayD,KAAAA,OAAY8M,IACrB,KACA9M,KAAAA,OAAYzD,GAClBrT,UAAWsD,EAAQub,YAAYjF,IAEjCmG,EAAYiE,WAAWjqC,KAAK2uC,EAC9B,IAEAplB,EAAQ0W,aAAa11B,SAAQ,SAAA+1B,GAC3B,IAAM7R,EAAO6R,EAAY4E,SAASp1B,KAAI,SAAAm1B,GACpC,IAAMvE,EAASnX,EAAQub,YAAYG,GACnC,MAAO,CACLvE,OAAAA,EACAqB,SACEiE,EAAYiE,WAAW5R,MACrB,SAAAoW,GAAM,OAAIA,EAAOxoB,UAAUjf,aAAe05B,EAAO15B,UAAU,KACxDuiB,EAAQqlB,gBAAgB3J,GAC/BjD,WAAYzY,EAAQslB,kBAAkB5J,GAE1C,IAEAe,EAAY/F,aAAajgC,KACvB,IAAI8pC,GAAuB,CACzBrb,KAAAA,EACAgP,UAAWlU,EAAQub,YAAYxE,EAAYC,gBAC3Cr2B,KAAM6yB,KAAAA,OAAYuD,EAAYp2B,QAGpC,IAEA87B,EAAYsE,SAAW/gB,EACvByc,EAAYuE,MAAQvE,EAAY+D,SAEzB/D,CACT,KAACgE,CAAA,CAxuBqB,8hCC1LxB,IAAa8E,GAAoB,WAQ/B,SAAAA,EAAYvlB,EAA2B0gB,GACrC,IADqE1yC,EAAAA,EAAAA,GAAA,KAAAu3C,GAAA,KAPvE7E,gBAAU,OACV1gB,aAAO,OAOcrvB,IAAf+vC,EACFhd,GACEgd,EAAW9xC,SAAWoxB,EAAQgZ,OAAOC,sBACrC,+EAEF93B,KAAKu/B,WAAaA,MACb,CAEL,IADA,IAAM8E,EAAoB,GACjBhvC,EAAI,EAAGA,EAAIwpB,EAAQgZ,OAAOC,sBAAuBziC,IACxDgvC,EAAkB/uC,KAAK,IAAIpI,WXvBM,KWyBnC8S,KAAKu/B,WAAa8E,CACpB,CACArkC,KAAK6e,QAAUA,CACjB,CAmDC,OAnDA/xB,EAAAA,EAAAA,GAAAs3C,EAAA,EAAAr2C,IAAA,UAAAsU,IAnBD,WACE,OAAOrC,KAAK6e,QAAQogB,OACtB,GAAC,CAAAlxC,IAAA,YAAAC,MAmBD,WACE,IAAMuvC,EAAoBv9B,KAAK6e,QAAQ0S,YAEjC+S,EAA0BtuC,QAChC6gC,GAAsByN,EAAyBtkC,KAAKu/B,WAAW9xC,QAE/D,IAAM82C,EAAoBtO,GAAAA,GAIvB,CACDA,GAAAA,GACEqO,EAAwB72C,OACxB,2BAEFwoC,GAAAA,GACErH,KACA5uB,KAAKu/B,WAAW9xC,OAChB,cAEFwoC,GAAAA,GAAkBsH,EAAkB9vC,OAAQ,uBAGxC+2C,EAAwB,IAAIt3C,WAAW,MACvCu3C,EAA8BF,EAAkBj0C,OACpD,CACEg0C,wBAAyB,IAAIp3C,WAAWo3C,GACxC/E,WAAYv/B,KAAKu/B,WACjBhC,kBAAAA,GAEFiH,GAGF,OAAOA,EAAsBroC,MAAM,EAAGsoC,EACxC,GAAC,CAAA12C,IAAA,OAAAC,MAiBD,SAAKmyC,GAAwB,IAMChqC,EAND7G,EAAA,KACrBo1C,EAAc1kC,KAAK6e,QAAQ0S,YAC3BoT,EAAgB3kC,KAAK6e,QAAQiW,kBAAkB34B,MACnD,EACA6D,KAAK6e,QAAQgZ,OAAOC,uBACpB1hC,EAAA1J,GACmByzC,GAAO,QAAA3G,EAAA,WAAE,IAAnBmJ,EAAMxsC,EAAAnI,MACT42C,EAAcD,EAAchL,WAAU,SAAA3D,GAAM,OAChDA,EAAOte,OAAOirB,EAAOpnB,UAAU,IAEjCgH,GACEqiB,GAAe,EAAC,mCAAAnnC,OACmBklC,EAAOpnB,UAAUiX,aAEtDljC,EAAKiwC,WAAWqF,GAAe3pB,GAAKypB,EAAa/B,EAAO1R,YAR1D,IAAA76B,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAAAijC,GASC,OAAA/iC,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CACH,GAAC,CAAA5I,IAAA,eAAAC,MAED,SAAautB,EAAsBqT,GACjCrM,GAAgC,KAAzBqM,EAAU3vB,WAAmB,mCACpC,IAIM2lC,EAJgB5kC,KAAK6e,QAAQiW,kBAAkB34B,MACnD,EACA6D,KAAK6e,QAAQgZ,OAAOC,uBAEY6B,WAAU,SAAA3D,GAAM,OAChDA,EAAOte,OAAO6D,EAAU,IAE1BgH,GACEqiB,GAAe,EAAC,2BAAAnnC,OACY8d,EAAUiX,WAAU,+CAElDxyB,KAAKu/B,WAAWqF,GAAehW,CACjC,IAAC,EAAA7gC,IAAA,cAAAC,MA/CD,SAAmBw2C,GAKjB,IAJA,IAAI1I,GAASn5B,EAAAA,EAAAA,GAAO6hC,GAEdjF,EAAa,GACbsF,EAAmBnO,GAAsBoF,GACtCzmC,EAAI,EAAGA,EAAIwvC,EAAkBxvC,IACpCkqC,EAAWjqC,KACT,IAAIpI,WAAW4uC,EAAU4C,OAAO,EXzEC,MW8ErC,OAAO,IAAI0F,EADKrF,GAAiBtN,YAAY,IAAIvkC,WAAW4uC,IACnByD,EAC3C,KAAC6E,CAAA,CA1E8B,GCdpBU,GAAsB,IAAI/S,GACrC,+CAWWgT,IAR+B,IAAIhT,GAC9C,+CAGwC,IAAIA,GAC5C,+CAG8C,IAAIA,GAClD,gDAGWiT,GAAqB,IAAIjT,GACpC,+CAeWkT,IAZwB,IAAIlT,GACvC,+CAGuC,IAAIA,GAC3C,+CAGwC,IAAIA,GAC5C,+CAGyC,IAAIA,GAC7C,gDClBoB,SAAAmT,GAAyBhS,EAAAC,EAAAC,EAAAI,GAAA,OAAA2R,GAAAn2C,MAAC,KAADC,UAAA,CAgF9C,SAAAk2C,KAAA,OAAAA,IAAAtS,EAAAA,GAAAA,GAAA3S,KAAAA,MAhFM,SAAAW,EACLshB,EACA7G,EACA6E,EACAjlB,GAII,IAAAkqB,EAAAxW,EAAAyW,EAAAnF,EAAAoF,EAAA,OAAAplB,KAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAOH,OALK8kB,EAAclqB,GAAW,CAC7BqqB,cAAerqB,EAAQqqB,cACvBC,oBAAqBtqB,EAAQsqB,qBAAuBtqB,EAAQuqB,WAC5DC,WAAYxqB,EAAQwqB,WACpB5F,eAAgB5kB,EAAQ4kB,gBACzB1f,EAAAE,KAAA,EAEuB6hB,EAAWwD,gBACjCrK,EACA6E,EACAiF,GACD,OAJc,GAATxW,EAASxO,EAAAiiB,KAQkB,MAA/B/G,EAAYjB,iBACwB,MAApCiB,EAAYmE,qBAA4B,CAAArf,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAGhC6hB,EAAWyD,mBACf,CACEC,YAAoB,OAAP3qB,QAAA,IAAAA,OAAA,EAAAA,EAAS2qB,YACtBjX,UAAWA,EACXmR,UAAWzE,EAAYjB,gBACvBoF,qBAAsBnE,EAAYmE,sBAEpCvkB,GAAWA,EAAQuqB,YACpB,OATHJ,EAAMjlB,EAAAiiB,KAUJr0C,MAAKoyB,EAAAE,KAAA,oBAE4B,MAAnCgb,EAAYqE,qBACa,MAAzBrE,EAAYoE,UAAiB,CAAAtf,EAAAE,KAAA,SAG6B,OADnD4f,EAAoB5E,EAAYoE,UAAhCQ,iBACDoF,EAAqBpF,EAAiBnc,KAAK,GAAGiS,OAAM5V,EAAAE,KAAA,GAElD6hB,EAAWyD,mBACf,CACEC,YAAoB,OAAP3qB,QAAA,IAAAA,OAAA,EAAAA,EAAS2qB,YACtB/F,eAAgBxE,EAAYqE,oBAC5B2F,mBAAAA,EACAQ,WAAYxK,EAAYoE,UAAU/L,MAClC/E,UAAAA,GAEF1T,GAAWA,EAAQuqB,YACpB,QAVHJ,EAAMjlB,EAAAiiB,KAWJr0C,MAAKoyB,EAAAE,KAAA,iBAQN,OAN2B,OAAjB,OAAPpF,QAAO,IAAPA,OAAO,EAAPA,EAAS2qB,cACXxF,QAAQC,KACN,yPAIHlgB,EAAAE,KAAA,GAEO6hB,EAAWyD,mBACfhX,EACA1T,GAAWA,EAAQuqB,YACpB,QAJHJ,EAAMjlB,EAAAiiB,KAKJr0C,MAAK,YAGLq3C,EAAO5uC,IAAK,CAAF2pB,EAAAE,KAAA,eACN,IAAIpxB,MAAM,eAADuO,OACEmxB,EAAS,aAAAnxB,OAAYiiB,KAAKC,UAAU0lB,GAAO,MAC3D,eAAAjlB,EAAA6S,OAAA,SAGIrE,GAAS,yBAAAxO,EAAAK,OAAA,GAAAI,OACjBskB,GAAAn2C,MAAA,KAAAC,UAAA,CChGM,SAAS82C,GAAMC,GACpB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,KACpD,CCoBO,SAASI,GACd/5B,EACAxW,GAEA,IAAMwwC,EACJh6B,EAAKpc,OAAOtC,MAAQ,EAAI0e,EAAKpc,OAAOtC,KAAO6oC,GAAgBnqB,EAAMxW,GAC7D2J,EAAOnS,EAAAA,OAAOslC,MAAM0T,GACpBC,EAAel4C,OAAOI,OAAO,CAAConC,YAAavpB,EAAK8oB,OAAQt/B,GAE9D,OADAwW,EAAKpc,OAAOK,OAAOg2C,EAAc9mC,GAC1BA,CACT,CC1BO,ICSJ/R,GDTU84C,GAAsBtQ,GAAAA,GAAkB,wBEO/CuQ,GAAqBvQ,GAAAA,GAUzB,CACAA,GAAAA,GAAiB,WACjBA,GAAAA,GAAiB,SACjB1a,GAAiB,oBACjBA,GAAiB,SACjB0a,GAAAA,GACE,CAACsQ,IACD,mBAISE,GAAuBD,GAAmB74C,KAgB1C+4C,GAAY,WAQvB,SAAAA,EAAYvM,IAAwBttC,EAAAA,EAAAA,GAAA,KAAA65C,GAAA,KAPpCC,sBAAgB,OAChBhT,WAAK,OACLiT,mBAAa,EAMX5mC,KAAK2mC,iBAAmBxM,EAAKwM,iBAC7B3mC,KAAK2zB,MAAQwG,EAAKxG,MAClB3zB,KAAK4mC,cAAgBzM,EAAKyM,aAC5B,CAiBC,OAfD95C,EAAAA,EAAAA,GAAA45C,EAAA,OAAA34C,IAAA,kBAAAC,MAMA,SACET,GAEA,IAAMs5C,EAAeL,GAAmBn2C,OAAO+gC,GAAS7jC,GAAS,GACjE,OAAO,IAAIm5C,EAAa,CACtBC,iBAAkB,IAAI5U,GAAU8U,EAAaF,kBAC7ChT,MAAO,IAAI5B,GAAU8U,EAAalT,OAAOr3B,WACzCsqC,cAAeC,EAAaD,eAEhC,KAACF,CAAA,CA7BsB,GDfZvhC,IApBV1X,GAoBuB,EAnBxB,SAACG,GACC,IAAMqC,GAAS62C,EAAAA,GAAAA,IAAKr5C,GAAQG,GAC5Bm5C,EAViB,SAAI92C,GAGvB,MAAO,CAACI,OAFOJ,EAAOI,OAAO0I,KAAK9I,GAElBK,OADDL,EAAOK,OAAOyI,KAAK9I,GAEpC,CAM6B+2C,CAAa/2C,GAA/BK,EAAMy2C,EAANz2C,OAAQD,EAAM02C,EAAN12C,OAET42C,EAAeh3C,EAYrB,OAVAg3C,EAAa52C,OAAS,SAAC9C,EAAgBU,GACrC,IAAM4B,EAAMQ,EAAO9C,EAAQU,GAC3B,OAAOi5C,EAAAA,GAAAA,IAAW75C,EAAAA,OAAOC,KAAKuC,KAGhCo3C,EAAa32C,OAAS,SAAC62C,EAAgB55C,EAAgBU,GACrD,IAAM4B,GAAMu3C,EAAAA,GAAAA,IAAWD,EAAQ15C,IAC/B,OAAO6C,EAAOT,EAAKtC,EAAQU,IAGtBg5C,IEilBEI,GAA6Bj5C,OAAO+hB,OAI9C,CACDm3B,OAAQ,CACNnS,MAAO,EACPllC,OAAQgmC,GAAAA,GAA0D,CAChEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,YAClBA,GAAAA,GAAkB,SAClB1a,GAAiB,gBAGrBgsB,OAAQ,CACNpS,MAAO,EACPllC,OAAQgmC,GAAAA,GAA0D,CAChEA,GAAAA,GAAiB,eACjB1a,GAAiB,gBAGrBisB,SAAU,CACRrS,MAAO,EACPllC,OAAQgmC,GAAAA,GAA4D,CAClEA,GAAAA,GAAiB,eACjB9wB,GAAI,eAGRsiC,eAAgB,CACdtS,MAAO,EACPllC,OAAQgmC,GAAAA,GAAkE,CACxEA,GAAAA,GAAiB,eACjB1a,GAAiB,QACjB2a,GAAkB,QAClBD,GAAAA,GAAkB,YAClBA,GAAAA,GAAkB,SAClB1a,GAAiB,gBAGrBmsB,oBAAqB,CACnBvS,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,kBAEtB0R,qBAAsB,CACpBxS,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,eAAgBA,GAAAA,GAAkB,eAExD2R,uBAAwB,CACtBzS,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,eAAgB1a,GAAiB,iBAEvDssB,sBAAuB,CACrB1S,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,eAAgB1a,GAAiB,iBAEvDusB,SAAU,CACR3S,MAAO,EACPllC,OAAQgmC,GAAAA,GAA4D,CAClEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,YAGtB8R,iBAAkB,CAChB5S,MAAO,EACPllC,OAAQgmC,GAAAA,GACN,CACEA,GAAAA,GAAiB,eACjB1a,GAAiB,QACjB2a,GAAkB,QAClBD,GAAAA,GAAkB,SAClB1a,GAAiB,gBAIvBysB,eAAgB,CACd7S,MAAO,GACPllC,OAAQgmC,GAAAA,GAAkE,CACxEA,GAAAA,GAAiB,eACjB1a,GAAiB,QACjB2a,GAAkB,QAClB3a,GAAiB,gBAGrB0sB,iBAAkB,CAChB9S,MAAO,GACPllC,OAAQgmC,GAAAA,GACN,CACEA,GAAAA,GAAiB,eACjB9wB,GAAI,YACJ+wB,GAAkB,QAClB3a,GAAiB,gBAIvB2sB,oBAAqB,CACnB/S,MAAO,GACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,oBAOXkS,GAAa,WAIxB,SAAAA,KAAct7C,EAAAA,EAAAA,GAAA,KAAAs7C,EAAC,CA+Sd,OA7SDr7C,EAAAA,EAAAA,GAAAq7C,EAAA,OAAAp6C,IAAA,gBAAAC,MAUA,SAAqBo6C,GACnB,IACM5oC,EAAO4mC,GADAiB,GAA2BC,OACV,CAC5Be,SAAUD,EAAOC,SACjBC,MAAOF,EAAOE,MACdvV,UAAW3B,GAASgX,EAAOrV,UAAU3B,cAGvC,OAAO,IAAIgO,GAAuB,CAChCrb,KAAM,CACJ,CAACiS,OAAQoS,EAAOG,WAAYlR,UAAU,EAAMC,YAAY,GACxD,CAACtB,OAAQoS,EAAOI,iBAAkBnR,UAAU,EAAMC,YAAY,IAEhEvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,WAAAC,MAGA,SACEo6C,GAEA,IAAI5oC,EACAukB,EACA,eAAgBqkB,GAElB5oC,EAAO4mC,GADMiB,GAA2BY,iBAChB,CACtBI,SAAU1mC,OAAOymC,EAAOC,UACxBp9B,KAAMm9B,EAAOn9B,KACb8nB,UAAW3B,GAASgX,EAAOrV,UAAU3B,cAEvCrN,EAAO,CACL,CAACiS,OAAQoS,EAAOG,WAAYlR,UAAU,EAAOC,YAAY,GACzD,CAACtB,OAAQoS,EAAOK,WAAYpR,UAAU,EAAMC,YAAY,GACxD,CAACtB,OAAQoS,EAAOM,SAAUrR,UAAU,EAAOC,YAAY,MAIzD93B,EAAO4mC,GADMiB,GAA2BG,SAChB,CAACa,SAAU1mC,OAAOymC,EAAOC,YACjDtkB,EAAO,CACL,CAACiS,OAAQoS,EAAOG,WAAYlR,UAAU,EAAMC,YAAY,GACxD,CAACtB,OAAQoS,EAAOM,SAAUrR,UAAU,EAAOC,YAAY,KAI3D,OAAO,IAAI8H,GAAuB,CAChCrb,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,SAAAC,MAGA,SACEo6C,GAEA,IAAI5oC,EACAukB,EACA,eAAgBqkB,GAElB5oC,EAAO4mC,GADMiB,GAA2BW,eAChB,CACtBj1B,KAAMqe,GAASgX,EAAOK,WAAWrX,YACjCnmB,KAAMm9B,EAAOn9B,KACb8nB,UAAW3B,GAASgX,EAAOrV,UAAU3B,cAEvCrN,EAAO,CACL,CAACiS,OAAQoS,EAAOO,cAAetR,UAAU,EAAOC,YAAY,GAC5D,CAACtB,OAAQoS,EAAOK,WAAYpR,UAAU,EAAMC,YAAY,MAI1D93B,EAAO4mC,GADMiB,GAA2BE,OAChB,CACtBxU,UAAW3B,GAASgX,EAAOrV,UAAU3B,cAEvCrN,EAAO,CAAC,CAACiS,OAAQoS,EAAOO,cAAetR,UAAU,EAAMC,YAAY,KAGrE,OAAO,IAAI8H,GAAuB,CAChCrb,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,wBAAAC,MAIA,SACEo6C,GAEA,IACM5oC,EAAO4mC,GADAiB,GAA2BI,eACV,CAC5B10B,KAAMqe,GAASgX,EAAOK,WAAWrX,YACjCnmB,KAAMm9B,EAAOn9B,KACbo9B,SAAUD,EAAOC,SACjBC,MAAOF,EAAOE,MACdvV,UAAW3B,GAASgX,EAAOrV,UAAU3B,cAEnCrN,EAAO,CACT,CAACiS,OAAQoS,EAAOG,WAAYlR,UAAU,EAAMC,YAAY,GACxD,CAACtB,OAAQoS,EAAOI,iBAAkBnR,UAAU,EAAOC,YAAY,IAUjE,OARI8Q,EAAOK,YAAcL,EAAOG,YAC9BxkB,EAAKzuB,KAAK,CACR0gC,OAAQoS,EAAOK,WACfpR,UAAU,EACVC,YAAY,IAIT,IAAI8H,GAAuB,CAChCrb,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,qBAAAC,MAGA,SACEo6C,GAEA,IAAM9M,EAAc,IAAIgE,GACpB,eAAgB8I,GAAU,SAAUA,EACtC9M,EAAYn3B,IACVgkC,EAAcS,sBAAsB,CAClCL,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOS,YACzBJ,WAAYL,EAAOK,WACnBx9B,KAAMm9B,EAAOn9B,KACbo9B,SAAUD,EAAOC,SACjBC,MAAO7B,GACP1T,UAAW/yB,KAAK+yB,aAIpBuI,EAAYn3B,IACVgkC,EAAcW,cAAc,CAC1BP,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOS,YACzBR,SAAUD,EAAOC,SACjBC,MAAO7B,GACP1T,UAAW/yB,KAAK+yB,aAKtB,IAAMgW,EAAa,CACjBF,YAAaT,EAAOS,YACpBlC,iBAAkByB,EAAOzB,kBAI3B,OADArL,EAAYn3B,IAAInE,KAAKgpC,gBAAgBD,IAC9BzN,CACT,GAEA,CAAAvtC,IAAA,kBAAAC,MAGA,SACEo6C,GAEA,IACM5oC,EAAO4mC,GADAiB,GAA2BO,uBACV,CAC5BqB,WAAY7X,GAASgX,EAAOzB,iBAAiBvV,cAEzC8X,EAAkB,CACtBnlB,KAAM,CACJ,CAACiS,OAAQoS,EAAOS,YAAaxR,UAAU,EAAOC,YAAY,GAC1D,CACEtB,OAAQ+O,GACR1N,UAAU,EACVC,YAAY,GAEd,CAACtB,OAAQgP,GAAoB3N,UAAU,EAAOC,YAAY,IAE5DvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEF,OAAO,IAAI4/B,GAAuB8J,EACpC,GAEA,CAAAn7C,IAAA,eAAAC,MAGA,SAAoBo6C,GAClB,IACM5oC,EAAO4mC,GADAiB,GAA2BK,qBAElCwB,EAAkB,CACtBnlB,KAAM,CACJ,CAACiS,OAAQoS,EAAOS,YAAaxR,UAAU,EAAOC,YAAY,GAC1D,CACEtB,OAAQ+O,GACR1N,UAAU,EACVC,YAAY,GAEd,CAACtB,OAAQoS,EAAOzB,iBAAkBtP,UAAU,EAAMC,YAAY,IAEhEvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEF,OAAO,IAAI4/B,GAAuB8J,EACpC,GAEA,CAAAn7C,IAAA,gBAAAC,MAGA,SAAqBo6C,GACnB,IACM5oC,EAAO4mC,GADAiB,GAA2BM,qBACV,CAACU,SAAUD,EAAOC,WAEhD,OAAO,IAAIjJ,GAAuB,CAChCrb,KAAM,CACJ,CAACiS,OAAQoS,EAAOS,YAAaxR,UAAU,EAAOC,YAAY,GAC1D,CAACtB,OAAQoS,EAAOM,SAAUrR,UAAU,EAAOC,YAAY,GACvD,CACEtB,OAAQ+O,GACR1N,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQgP,GACR3N,UAAU,EACVC,YAAY,GAEd,CAACtB,OAAQoS,EAAOzB,iBAAkBtP,UAAU,EAAMC,YAAY,IAEhEvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,iBAAAC,MAIA,SAAsBo6C,GACpB,IACM5oC,EAAO4mC,GADAiB,GAA2BQ,sBACV,CAC5BoB,WAAY7X,GAASgX,EAAOe,oBAAoB/X,cAGlD,OAAO,IAAIgO,GAAuB,CAChCrb,KAAM,CACJ,CAACiS,OAAQoS,EAAOS,YAAaxR,UAAU,EAAOC,YAAY,GAC1D,CAACtB,OAAQoS,EAAOzB,iBAAkBtP,UAAU,EAAMC,YAAY,IAEhEvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,WAAAC,MAGA,SACEo6C,GAEA,IAAI5oC,EACAukB,EACA,eAAgBqkB,GAElB5oC,EAAO4mC,GADMiB,GAA2BU,iBAChB,CACtBh1B,KAAMqe,GAASgX,EAAOK,WAAWrX,YACjCnmB,KAAMm9B,EAAOn9B,KACbq9B,MAAOF,EAAOE,MACdvV,UAAW3B,GAASgX,EAAOrV,UAAU3B,cAEvCrN,EAAO,CACL,CAACiS,OAAQoS,EAAOO,cAAetR,UAAU,EAAOC,YAAY,GAC5D,CAACtB,OAAQoS,EAAOK,WAAYpR,UAAU,EAAMC,YAAY,MAI1D93B,EAAO4mC,GADMiB,GAA2BS,SAChB,CACtBQ,MAAOF,EAAOE,QAEhBvkB,EAAO,CAAC,CAACiS,OAAQoS,EAAOO,cAAetR,UAAU,EAAMC,YAAY,KAGrE,OAAO,IAAI8H,GAAuB,CAChCrb,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,KAAC2oC,CAAA,CAnTuB,GAAbA,GASJpV,UAAuB,IAAIhB,GAChC,oCC1tBJ,IAKaqX,GAAM,WAIjB,SAAAA,KAAcv8C,EAAAA,EAAAA,GAAA,KAAAu8C,EAAC,CA6Od,OA3ODt8C,EAAAA,EAAAA,GAAAs8C,EAAA,OAAAr7C,IAAA,sBAAAC,MAWA,SAA2BitC,GACzB,OACE,GACCtrC,KAAKggB,KAAKsrB,EAAamO,EAAOC,WAC7B,EACA,EAEN,GAEA,CAAAt7C,IAAA,OAAAC,MAAA,eAAAs7C,GAAAzW,EAAAA,GAAAA,GAAA3S,KAAAA,MAUA,SAAAW,EACEshB,EACAnL,EACAuS,EACAxW,EACAvzB,GAAyC,IAAAgqC,EAAAC,EAAAnO,EAAAoO,EAAAL,EAAAp7C,EAAA+a,EAAA2gC,EAAAjsC,EAAAksC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1vB,EAAAzsB,EAAA,OAAAkyB,KAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGX6hB,EAAWiI,kCACrC5qC,EAAK/R,QACN,OAFkB,OAAb+7C,EAAappB,EAAAiiB,KAAAjiB,EAAAE,KAAG,EAKI6hB,EAAWkI,eACnCd,EAAQhuB,UACR,aACD,OAEyC,GALpCkuB,EAAWrpB,EAAAiiB,KAKb/G,EAAkC,KAClB,OAAhBmO,EAAoB,CAAArpB,EAAAE,KAAA,aAClBmpB,EAAYa,WAAY,CAAFlqB,EAAAE,KAAA,SAC4C,OAApE+f,QAAQ3kB,MAAM,sDAAsD0E,EAAA6S,OAAA,UAC7D,GAAK,QAGVwW,EAAYjqC,KAAK/R,SAAW+R,EAAK/R,SACnC6tC,EAAcA,GAAe,IAAIgE,IACrBn7B,IACVgkC,GAAcoC,SAAS,CACrB5B,cAAeY,EAAQhuB,UACvB+sB,MAAO9oC,EAAK/R,UAKbg8C,EAAYe,MAAM9yB,OAAOqb,KAC5BuI,EAAcA,GAAe,IAAIgE,IACrBn7B,IACVgkC,GAAc35C,OAAO,CACnBm6C,cAAeY,EAAQhuB,UACvBwX,UAAAA,KAKF0W,EAAYpB,SAAWmB,IACzBlO,EAAcA,GAAe,IAAIgE,IACrBn7B,IACVgkC,GAAcsC,SAAS,CACrBlC,WAAYvR,EAAMzb,UAClBmtB,SAAUa,EAAQhuB,UAClB8sB,SAAUmB,EAAgBC,EAAYpB,YAG3CjoB,EAAAE,KAAA,iBAEDgb,GAAc,IAAIgE,IAAcn7B,IAC9BgkC,GAAcW,cAAc,CAC1BP,WAAYvR,EAAMzb,UAClBitB,iBAAkBe,EAAQhuB,UAC1B8sB,SAAUmB,EAAgB,EAAIA,EAAgB,EAC9ClB,MAAO9oC,EAAK/R,OACZslC,UAAAA,KAEF,WAKgB,OAAhBuI,EAAoB,CAAAlb,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GAChB4kB,GACJ/C,EACA7G,EACA,CAACtE,EAAOuS,GACR,CACE9D,WAAY,cAEf,QAICiE,EAAazT,GAAAA,GAQjB,CACAA,GAAAA,GAAiB,eACjBA,GAAAA,GAAiB,UACjBA,GAAAA,GAAiB,eACjBA,GAAAA,GAAiB,sBACjBA,GAAAA,GACEA,GAAAA,GAAgB,QAChBA,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,WAIEoT,EAAYD,EAAOC,UACrBp7C,EAAS,EACT+a,EAAQxJ,EACRmqC,EAAe,GAAE,aACd3gC,EAAMvb,OAAS,GAAC,CAAA2yB,EAAAE,KAAA,SAyBrB,GAxBM5iB,EAAQsL,EAAM7M,MAAM,EAAGktC,GACvBO,EAAOv8C,EAAAA,OAAOslC,MAAM0W,EAAY,IACtCK,EAAWp5C,OACT,CACEslC,YAAa,EACb3nC,OAAAA,EACAyP,MAAOA,EACPgD,YAAa,EACbgqC,mBAAoB,GAEtBd,GAGIC,GAAc,IAAIvK,IAAcn7B,IAAI,CACxC4f,KAAM,CAAC,CAACiS,OAAQuT,EAAQhuB,UAAW8b,UAAU,EAAMC,YAAY,IAC/DvE,UAAAA,EACAvzB,KAAAoqC,IAEFD,EAAar0C,KACX4vC,GAA0B/C,EAAY0H,EAAa,CAAC7S,EAAOuS,GAAU,CACnE9D,WAAY,gBAKZtD,EAAWwI,aAAa7sC,SAAS,cAAe,CAAFsiB,EAAAE,KAAA,SACnB,OAAD,EAACF,EAAAE,KAAA,GACvBylB,GAAM,KAA2B,QAGzC93C,GAAUo7C,EACVrgC,EAAQA,EAAM7M,MAAMktC,GAAWjpB,EAAAE,KAAA,wBAAAF,EAAAE,KAAA,GAE3B2lB,QAAQ2E,IAAIjB,GAAa,QAwBO,OApB9BG,EAAa7T,GAAAA,GAA2C,CAC5DA,GAAAA,GAAiB,iBAGb8T,EAAO18C,EAAAA,OAAOslC,MAAMmX,EAAWn8C,MACrCm8C,EAAWx5C,OACT,CACEslC,YAAa,GAEfmU,GAGIC,GAAc,IAAI1K,IAAcn7B,IAAI,CACxC4f,KAAM,CACJ,CAACiS,OAAQuT,EAAQhuB,UAAW8b,UAAU,EAAMC,YAAY,GACxD,CAACtB,OAAQgP,GAAoB3N,UAAU,EAAOC,YAAY,IAE5DvE,UAAAA,EACAvzB,KAAAuqC,IAEIE,EAAmB,YAAW7pB,EAAAE,KAAA,GACJ6hB,EAAWwD,gBACzCqE,EACA,CAAChT,EAAOuS,GACR,CAAC/D,oBAAqByE,IACvB,QAJsB,OAAjBC,EAAiB9pB,EAAAiiB,KAAAjiB,EAAAE,KAAG,GAKK6hB,EAAWyD,mBACxC,CACEhX,UAAWsb,EACXzK,qBAAsBuK,EAAYvK,qBAClCM,UAAWiK,EAAY3P,iBAEzB4P,GACD,QAPoB,GAOpBE,EAAA/pB,EAAAiiB,KAPM5nB,EAAO0vB,EAAP1vB,UAASzsB,EAAKm8C,EAALn8C,OAQNyI,IAAK,CAAF2pB,EAAAE,KAAA,eACL,IAAIpxB,MAAM,eAADuO,OACEysC,EAAiB,aAAAzsC,OAAYiiB,KAAKC,UAAU3xB,GAAM,MAClE,QAKI,OAAAoyB,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAGuB6hB,EAAW0I,QAAQ,CAC3CpF,WAAYwE,IACZ,QAFe,KAAA7pB,EAAAiiB,KAGC5nB,EAAQqwB,MAAI,CAAA1qB,EAAAE,KAAA,gBAAAF,EAAA6S,OAAA,oBAAA7S,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAG,GAAAH,EAAA,yBAAAA,EAAAE,KAAA,GAM1B,IAAI2lB,SAAQ,SAAAC,GAAO,OACvBC,WAAWD,EAASv2C,KAAKw1B,MAAM4lB,KAAiB,IACjD,QAAA3qB,EAAAE,KAAA,wBAAAF,EAAA6S,OAAA,UAKE,GAAI,yBAAA7S,EAAAK,OAAA,GAAAI,EAAA,oBACZ,gBAAAqS,EAAAC,EAAAC,EAAAI,EAAAC,GAAA,OAAA6V,EAAAt6C,MAAA,KAAAC,UAAA,EAvND,MAuNCm6C,CAAA,CAjPgB,GAANA,GASJC,UAdUlV,ICZkB,IAAIpC,GACvC,oJCRF,IAAIiZ,GAAc58C,OAAOG,UAAU+N,SAC/B2uC,GAAU78C,OAAO21B,MAAQ,SAASmnB,GACpC,IAAInnB,EAAO,GACX,IAAK,IAAIp1B,KAAQu8C,EAChBnnB,EAAKzuB,KAAK3G,GAEX,OAAOo1B,CACT,EAEA,SAASpE,GAAUpU,EAAK4/B,GACvB,IAAI91C,EAAGugB,EAAKvW,EAAK0kB,EAAMh2B,EAAKq9C,EAASC,EACrC,IAAY,IAAR9/B,EACH,MAAO,OAER,IAAY,IAARA,EACH,MAAO,QAER,cAAeA,GACd,IAAK,SACJ,GAAY,OAARA,EACH,OAAO,KACD,GAAIA,EAAI8zB,QAAgC,oBAAf9zB,EAAI8zB,OACnC,OAAO1f,GAAUpU,EAAI8zB,SAAU8L,GAG/B,GAAc,oBADdE,EAAQL,GAAYv7C,KAAK8b,IACO,CAG/B,IAFAlM,EAAM,IACNuW,EAAMrK,EAAI9d,OAAS,EACf4H,EAAI,EAAGA,EAAIugB,EAAKvgB,IACnBgK,GAAOsgB,GAAUpU,EAAIlW,IAAI,GAAQ,IAKlC,OAHIugB,GAAO,IACVvW,GAAOsgB,GAAUpU,EAAIlW,IAAI,IAEnBgK,EAAM,GAClB,CAAW,GAAc,oBAAVgsC,EAA6B,CAMvC,IAHAz1B,GADAmO,EAAOknB,GAAQ1/B,GAAKs1B,QACTpzC,OACX4R,EAAM,GACNhK,EAAI,EACGA,EAAIugB,QAGMpmB,KADhB47C,EAAUzrB,GAAUpU,EADpBxd,EAAMg2B,EAAK1uB,KACmB,MAEzBgK,IACHA,GAAO,KAERA,GAAOqgB,KAAKC,UAAU5xB,GAAO,IAAMq9C,GAEpC/1C,IAED,MAAO,IAAMgK,EAAM,GACxB,CACK,OAAOqgB,KAAKC,UAAUpU,GAGzB,IAAK,WACL,IAAK,YACJ,OAAO4/B,EAAc,UAAO37C,EAC7B,IAAK,SACJ,OAAOkwB,KAAKC,UAAUpU,GACvB,QACC,OAAO+/B,SAAS//B,GAAOA,EAAM,KAEhC,YAEiB,SAASA,GACzB,IAAIggC,EAAY5rB,GAAUpU,GAAK,GAC/B,QAAkB/b,IAAd+7C,EACH,MAAO,GAAIA,CAEb,ICrEA,SAASC,GAAcl1C,GAErB,IADA,IAAIk1C,EAAgB,EACbl1C,EAAI,GACTA,GAAK,EACLk1C,IAEF,OAAOA,CACT,CAoBA,IAAaC,GAAa,WAYxB,SAAAA,EACEC,EACAC,EACAC,EACAC,EACAC,IACAj/C,EAAAA,EAAAA,GAAA,KAAA4+C,GAjBF,KACOC,mBAAa,EACpB,KACOC,8BAAwB,EAC/B,KACOC,YAAM,EACb,KACOC,sBAAgB,EACvB,KACOC,qBAAe,EASpB9rC,KAAK0rC,cAAgBA,EACrB1rC,KAAK2rC,yBAA2BA,EAChC3rC,KAAK4rC,OAASA,EACd5rC,KAAK6rC,iBAAmBA,EACxB7rC,KAAK8rC,gBAAkBA,CACzB,CA8CC,OA9CAh/C,EAAAA,EAAAA,GAAA2+C,EAAA,EAAA19C,IAAA,WAAAC,MAED,SAAS88C,GACP,OAAO9qC,KAAK+rC,qBAAqBjB,GAAM,EACzC,GAAC,CAAA/8C,IAAA,uBAAAC,MAED,SAAqB88C,GACnB,GAAIA,EAAO9qC,KAAK8rC,gBAAiB,CAC/B,IAAME,EACJR,GAjDI,KADYl1C,EAkDaw0C,EA/DN,GA+DsC,GAjD/C,GACpBx0C,IACAA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,GAEC,GADXA,GAAKA,GAAK,MA2CJk1C,GAhEuB,IAiEvB,EAIF,MAAO,CAACQ,EADUlB,GADD9qC,KAAKisC,gBAAgBD,GAnEb,IAsE3B,CACE,IA1DkB11C,EA0DZ41C,EAAkBpB,EAAO9qC,KAAK8rC,gBAC9BK,EAAmBx8C,KAAKC,MAAMs8C,EAAkBlsC,KAAK0rC,eAG3D,MAAO,CAFO1rC,KAAK6rC,iBAAmBM,EACpBD,EAAkBlsC,KAAK0rC,cAG7C,GAAC,CAAA39C,IAAA,sBAAAC,MAED,SAAoBg+C,GAClB,OAAIA,GAAShsC,KAAK6rC,iBAhFS,IAiFjBl8C,KAAKmC,IAAI,EAAGk6C,GAAS,IAG1BA,EAAQhsC,KAAK6rC,kBAAoB7rC,KAAK0rC,cACvC1rC,KAAK8rC,eAGX,GAAC,CAAA/9C,IAAA,qBAAAC,MAED,SAAmBg+C,GACjB,OAAOhsC,KAAKosC,oBAAoBJ,GAAShsC,KAAKisC,gBAAgBD,GAAS,CACzE,GAAC,CAAAj+C,IAAA,kBAAAC,MAED,SAAgBg+C,GACd,OAAIA,EAAQhsC,KAAK6rC,iBACRl8C,KAAKmC,IAAI,EAAGk6C,EAAQR,GAhGF,KAkGlBxrC,KAAK0rC,aAEhB,KAACD,CAAA,CAtEuB,icC9Bb,IAAAY,GAAoB,SAAAzkB,IAAAj7B,EAAAA,EAAAA,GAAA0/C,EAAAzkB,GAAA,IAAA74B,EAAAu9C,GAAAD,GAG/B,SAAAA,EAAYxtB,EAAiB0tB,GAAiB,IAAAj9C,EAG3B,OAH2BzC,EAAAA,EAAAA,GAAA,KAAAw/C,IAC5C/8C,EAAAP,EAAAU,KAAA,KAAMovB,IAHR0tB,UAAI,EAKFj9C,EAAKi9C,KAAOA,EAAKj9C,CACnB,CAAC,OAAAxC,EAAAA,EAAAA,GAAAu/C,EAAA,CAP8B,EAO9BjtB,EAAAA,GAAAA,GAPuClwB,QAiC7Bs9C,GAAkB,SAAAhY,IAAA7nC,EAAAA,EAAAA,GAAA6/C,EAAAhY,GAAA,IAAAnlC,EAAAi9C,GAAAE,GAG7B,SAAAA,EAAArpC,EAMEspC,GACA,IAAAv8C,EALEw8C,EAAIvpC,EAAJupC,KACA7tB,EAAO1b,EAAP0b,QACArf,EAAI2D,EAAJ3D,KAO+B,OAP3B3S,EAAAA,EAAAA,GAAA,KAAA2/C,IAINt8C,EAAAb,EAAAI,KAAA,KAAuB,MAAjBg9C,EAAwB,GAAHhvC,OAAMgvC,EAAa,MAAAhvC,OAAKohB,GAAYA,IAVjE6tB,UAAI,EAAAx8C,EACJsP,UAAI,EAUFtP,EAAKw8C,KAAOA,EACZx8C,EAAKsP,KAAOA,EACZtP,EAAKvB,KAAO,qBAAqBuB,CACnC,CAAC,OAAApD,EAAAA,EAAAA,GAAA0/C,EAAA,CAf4B,EAe5BptB,EAAAA,GAAAA,GAfqClwB,QC9BxCy9C,GAAehuC,WAAWiuC,mqBCMsB,IAM3BC,GAAkB,SAAAC,IAAAngD,EAAAA,EAAAA,GAAAkgD,EAAAC,GAAA,IAAA/9C,EAAAnC,GAAAigD,GAErC,SAAAA,EACEnZ,EACAxY,EACA6xB,GAIA,IAAAz9C,GAAAzC,EAAAA,EAAAA,GAAA,KAAAggD,GARsB,OA0BtBv9C,EAAAP,EAAAU,KAAA,MAjByB,SAACu9C,GACxB,IAAMC,GAAMC,EAAAA,GAAAA,GAAUF,0WAAGG,CAAA,CACvBC,aAAa,EACbC,eAAgB,EAChBC,WAAW,EACXC,mBAAoB,KACjBryB,IASL,OANE5rB,EAAKk+C,iBADH,WAAYP,EAEZA,EACAQ,OAEsBR,EAEnBA,IAEevZ,EAASxY,EAAS6xB,GAAqBz9C,EA1BzDk+C,sBAAgB,EAAAl+C,CA2BxB,CAkCC,OAlCAxC,EAAAA,EAAAA,GAAA+/C,EAAA,EAAA9+C,IAAA,OAAAC,MACD,WAGuD,IADP,IAAA0/C,EAEHC,EADrCC,EAAkC,QAAxBF,EAAG1tC,KAAKwtC,wBAAgB,IAAAE,OAAA,EAArBA,EAAuBE,WAAWjwC,EAAA1O,UAAAxB,OAFlD0sC,EAAI,IAAAnkC,MAAA2H,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJs8B,EAAIt8B,GAAA5O,UAAA4O,GAGP,OAAmB,IAAf+vC,GACFD,GAAArhD,EAAAA,GAAAA,IAAAE,EAAAA,GAAAA,GAAAqgD,EAAAt+C,WAAA,cAAAkB,KAAAT,MAAA2+C,EAAA,OAAAlwC,OAAqB08B,IAEhB8L,QAAQ4H,OACb,IAAI3+C,MACF,oCACEirC,EAAK,GACL,qEACAyT,EACA,KAGR,GAAC,CAAA7/C,IAAA,SAAAC,MACD,WAGuD,IADL,IAAA8/C,EAELC,EADrCH,EAAkC,QAAxBE,EAAG9tC,KAAKwtC,wBAAgB,IAAAM,OAAA,EAArBA,EAAuBF,WAAW9iC,EAAA7b,UAAAxB,OAFlD0sC,EAAI,IAAAnkC,MAAA8U,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJovB,EAAIpvB,GAAA9b,UAAA8b,GAGP,OAAmB,IAAf6iC,GACFG,GAAAzhD,EAAAA,GAAAA,IAAAE,EAAAA,GAAAA,GAAAqgD,EAAAt+C,WAAA,gBAAAkB,KAAAT,MAAA++C,EAAA,OAAAtwC,OAAuB08B,IAElB8L,QAAQ4H,OACb,IAAI3+C,MACF,0CACEirC,EAAK,GACL,qEACAyT,EACA,KAGR,KAACf,CAAA,CA9DoC,CAASmB,GAAAA,GCOhD,OAEaC,GAAyB,WAIpC,SAAAA,EAAY9T,IAAqCttC,EAAAA,EAAAA,GAAA,KAAAohD,GAAA,KAHjDlgD,SAAG,OACHqU,WAAK,EAGHpC,KAAKjS,IAAMosC,EAAKpsC,IAChBiS,KAAKoC,MAAQ+3B,EAAK/3B,KACpB,CA6BC,OA7BAtV,EAAAA,EAAAA,GAAAmhD,EAAA,EAAAlgD,IAAA,WAAAC,MAED,WACE,IAAMkgD,EAAUvsC,OAAO,sBACvB,OAAO3B,KAAKoC,MAAM+rC,mBAAqBD,CACzC,IAAC,EAAAngD,IAAA,cAAAC,MAED,SAAmBogD,GACjB,IAAMrY,ECnBH,SACL1pB,EACA7M,GAEA,IAAI4yB,EACJ,IACEA,EAAU/lB,EAAKpc,OAAOI,OAAOmP,GAC7B,MAAO/I,GACP,MAAM,IAAIvH,MAAM,wBAA0BuH,EAC5C,CAEA,GAAI27B,EAAQic,YAAchiC,EAAK8oB,MAC7B,MAAM,IAAIjmC,MAAM,+CAADuO,OACkC20B,EAAQic,UAAS,QAAA5wC,OAAO4O,EAAK8oB,QAIhF,OAAO/C,CACT,CDCiBkc,CAAWC,GAAuBH,GAEzCI,EAAyBJ,EAAY3gD,OAnBhB,GAoB3B80B,GAAOisB,GAA0B,EAAG,2BACpCjsB,GAAOisB,EAAyB,KAAO,EAAG,2BAE1C,IAAMC,EAAyBD,EAAyB,GACjDhW,EAAavC,GAAAA,GAAoD,CACtEA,GAAAA,GAAiB1a,KAAoBkzB,EAAwB,eAC5Dp+C,OAAO+9C,EAAYjyC,MA1BK,KAwBpBq8B,UAIP,MAAO,CACL2V,iBAAkBpY,EAAKoY,iBACvBO,iBAAkB3Y,EAAK2Y,iBACvBC,2BAA4B5Y,EAAK6Y,uBACjCC,UAC4B,IAA1B9Y,EAAK8Y,UAAUphD,OACX,IAAIskC,GAAUgE,EAAK8Y,UAAU,SAC7Br/C,EACNgpC,UAAWA,EAAUpzB,KAAI,SAAAsuB,GAAO,OAAI,IAAI3B,GAAU2B,EAAQ,IAE9D,KAACua,CAAA,CApCmC,GAuChCM,GAAwB,CAC5BpZ,MAAO,EACPllC,OAAQgmC,GAAAA,GAML,CACDA,GAAAA,GAAiB,aACjB9wB,GAAI,oBACJ8wB,GAAAA,GAAkB,oBAClBA,GAAAA,GAAgB,0BAChBA,GAAAA,KACAA,GAAAA,GACE1a,KACA0a,GAAAA,GAAoBA,GAAAA,MAAoB,GACxC,gBEhFA6Y,GAAS,isBC6Df,IAAMC,GAAsB9tB,GAC1B9iB,GAAS4zB,IACTrmB,MACA,SAAA1d,GAAK,OAAI,IAAI+jC,GAAU/jC,EAAM,IAGzBghD,GAAuBtsB,GAAM,CAAChX,KAAU2X,GAAQ,YAEhD4rB,GAA2BhuB,GAC/B9iB,GAAS9Q,EAAAA,QACT2hD,IACA,SAAAhhD,GAAK,OAAIX,EAAAA,OAAOC,KAAKU,EAAM,GAAI,SAAS,IAuS1C,SAASkhD,GACPC,GAEA,IAAI1J,EACAjC,EACJ,GAAkC,kBAAvB2L,EACT1J,EAAa0J,OACR,GAAIA,EAAoB,CAG7B1J,EADE0J,EADK1J,WAGPjC,GAH0DzkB,EAAAA,GAAAA,GACxDowB,EAAkBnwB,GAGtB,CACA,MAAO,CAACymB,WAAAA,EAAYjC,OAAAA,EACtB,CAKA,SAAS4L,GAAsBhiC,GAC7B,OAAOrT,GAAM,CACXsS,GAAK,CACHgjC,QAAShsB,GAAQ,OACjBisB,GAAI5jC,KACJ0B,OAAAA,IAEFf,GAAK,CACHgjC,QAAShsB,GAAQ,OACjBisB,GAAI5jC,KACJgQ,MAAOrP,GAAK,CACVqgC,KAAM9nB,KACN/F,QAASnT,KACTlM,KAAMkkB,G3C/XLV,GAAO,OAAO,kBAAM,CAAd,U2CmYf,CAEA,IAAMusB,GAAmBH,GAAgBxqB,MAKzC,SAAS4qB,GAAoB9tB,GAC3B,OAAOT,GAAOmuB,GAAgB1tB,GAAS6tB,IAAkB,SAAAvhD,GACvD,MAAI,UAAWA,EACNA,EAEPumB,GAAAA,GAAA,GACKvmB,GAAK,IACRof,OAAQ/e,GAAOL,EAAMof,OAAQsU,IAGnC,GACF,CAKA,SAAS+tB,GAA8BzhD,GACrC,OAAOwhD,GACLnjC,GAAK,CACHoO,QAASpO,GAAK,CACZy+B,KAAMvtC,OAERvP,MAAAA,IAGN,CAKA,SAAS0hD,GAAmC1hD,GAC1C,OAAOqe,GAAK,CACVoO,QAASpO,GAAK,CACZy+B,KAAMvtC,OAERvP,MAAAA,GAEJ,CAKA,SAAS2hD,GACP1Q,EACA2Q,GAEA,OAAgB,IAAZ3Q,EACK,IAAI/C,GAAU,CACnBrE,OAAQ+X,EAAS/X,OACjB/C,kBAAmB8a,EAASxV,YAAYh1B,KACtC,SAAA8zB,GAAU,OAAI,IAAInH,GAAUmH,EAAW,IAEzCmB,gBAAiBuV,EAASvV,gBAC1B8B,qBAAsByT,EAASra,aAAanwB,KAAI,SAAA20B,GAAE,MAAK,CACrDlE,eAAgBkE,EAAGlE,eACnBC,kBAAmBiE,EAAGS,SACtBh7B,KAAM6yB,KAAAA,OAAY0H,EAAGv6B,MACtB,IACD48B,oBAAqBwT,EAASxT,sBAGzB,IAAIlC,GAAQ0V,EAEvB,CA8RA,IAAMC,GAA6BxjC,GAAK,CACtCyjC,WAAYvyC,KACZwyC,eAAgBxyC,KAChByyC,QAASzyC,KACT0yC,MAAO1yC,KACP2yC,SAAU3yC,OAsBN4yC,GAA2BX,GAC/BxmC,GACEya,GACEpX,GAAK,CACH2/B,MAAOzuC,KACP6yC,cAAe7yC,KACf8yC,OAAQ9yC,KACR+yC,YAAa/yC,KACbgzC,WAAY7sB,GAASD,GAASlmB,YA2BhCizC,GAAoCxnC,GACxCqD,GAAK,CACHy+B,KAAMvtC,KACNkzC,kBAAmBlzC,QAkBjBmzC,GAAyBrkC,GAAK,CAClCskC,MAAOpzC,KACPokB,UAAWpkB,KACXuyC,WAAYvyC,KACZyuC,MAAOzuC,OAeHqzC,GAAqBvkC,GAAK,CAC9B2/B,MAAOzuC,KACPszC,UAAWtzC,KACXuzC,aAAcvzC,KACdwzC,aAAcxzC,KACdyzC,YAAattB,GAASnmB,MACtB0zC,iBAAkBvtB,GAASnmB,QAGvB2zC,GAAyB7kC,GAAK,CAClCq/B,cAAenuC,KACfouC,yBAA0BpuC,KAC1BquC,OAAQngC,KACRogC,iBAAkBtuC,KAClBuuC,gBAAiBvuC,OAWb4zC,GAA0BxtB,GAAOjY,KAAU1C,GAAMzL,OAKjD6zC,GAAyB3tB,GAAS1pB,GAAM,CAACsS,GAAK,CAAC,GAAIX,QAKnD2lC,GAAwBhlC,GAAK,CACjC5V,IAAK26C,KAMDE,GAA0BjuB,GAAQ,qBAWlCkuB,GAAgBllC,GAAK,CACzB,cAAeX,KACf,cAAegY,GAASnmB,QA8CpBi0C,GAAqC/B,GACzCpjC,GAAK,CACH5V,IAAKgtB,GAAS1pB,GAAM,CAACsS,GAAK,CAAC,GAAIX,QAC/B6gC,KAAM9oB,GAASza,GAAM0C,OACrB8uB,SAAU9W,GACRD,GACEza,GACEya,GACEpX,GAAK,CACHi+B,WAAY7+B,KACZ++B,MAAO9+B,KACP28B,SAAU9qC,KACViC,KAAMwJ,GAAM0C,MACZ+lC,UAAW/tB,GAASnmB,YAM9Bm0C,cAAehuB,GAASnmB,MACxBo0C,WAAYjuB,GACVD,GACEpX,GAAK,CACH0mB,UAAWrnB,KACXlM,KAAMkjB,GAAM,CAAChX,KAAU2X,GAAQ,mBAogBnCuuB,GAAgCnC,GACpCpjC,GAAK,CACHwlC,WAAYluB,GAAOjY,KAAU1C,GAAMzL,OACnCu0C,MAAOzlC,GAAK,CACV0lC,UAAWx0C,KACXy0C,SAAUz0C,UA4LhB,IAAM00C,GAAgCzC,GAAcK,IAK9CqC,GAA4B1C,GAAckB,IAK1CyB,GAAuC3C,GAC3CgB,IAMI4B,GAAwB5C,GAAcoB,IAKtCyB,GAA4B7C,GAAc0B,IAK1CoB,GAA6B9C,GAAc2B,IAK3CoB,GAAgB/C,GAAcjyC,MAmB9Bi1C,GAAqB/C,GACzBpjC,GAAK,CACHskC,MAAOpzC,KACPk1C,YAAal1C,KACbm1C,eAAgBn1C,KAChBo1C,uBAAwB3pC,GAAM+lC,OAsB5B6D,GAAoBvmC,GAAK,CAC7BgkC,OAAQ3kC,KACRmnC,SAAUpvB,GAASlmB,MACnBu1C,SAAUv1C,KACVw1C,eAAgBrvB,GAAShY,QAsBrBsnC,GAAgCvD,GACpCzmC,GACEqD,GAAK,CACHqnB,QAASqb,GACTsB,OAAQ3kC,KACRmnC,SAAUpvB,GAASlmB,MACnBu1C,SAAUv1C,KACVw1C,eAAgBrvB,GAAShY,UAQzBunC,GAA0BxD,GAC9BzmC,GACEqD,GAAK,CACH2pB,OAAQ+Y,GACRxU,QAASluB,GAAK,CACZi+B,WAAY7+B,KACZ++B,MAAOuE,GACP1G,SAAU9qC,KACViC,KAAMyvC,GACNwC,UAAWl0C,WAMb21C,GAA0B7mC,GAAK,CACnCk9B,QAAS79B,KACTynC,OAAQvuB,KACR0jB,MAAO/qC,OAMH61C,GAAgC3D,GACpCzmC,GACEqD,GAAK,CACH2pB,OAAQ+Y,GACRxU,QAASluB,GAAK,CACZi+B,WAAY7+B,KACZ++B,MAAOuE,GACP1G,SAAU9qC,KACViC,KAAM0zC,GACNzB,UAAWl0C,WAiBb81C,GAA8B5D,GAClCzmC,GACEqD,GAAK,CACHg8B,SAAU9qC,KACVm2B,QAASqb,OAQTuE,GAAoBjnC,GAAK,CAC7Bi+B,WAAY7+B,KACZ++B,MAAOuE,GACP1G,SAAU9qC,KACViC,KAAMyvC,GACNwC,UAAWl0C,OAMPg2C,GAAyBlnC,GAAK,CAClC2pB,OAAQ+Y,GACRxU,QAAS+Y,KAGLE,GAAyBvyB,GAC7BlnB,GAAM,CAACoE,GAAS9Q,EAAAA,QAAS6lD,KACzBn5C,GAAM,CAACi1C,GAAsBkE,MAC7B,SAAAllD,GACE,OAAIgI,MAAMC,QAAQjI,GACTK,GAAOL,EAAOihD,IAEdjhD,CAEX,IAMIylD,GAA0BpnC,GAAK,CACnCi+B,WAAY7+B,KACZ++B,MAAOuE,GACP1G,SAAU9qC,KACViC,KAAMg0C,GACN/B,UAAWl0C,OAGPm2C,GAA+BrnC,GAAK,CACxC2pB,OAAQ+Y,GACRxU,QAASkZ,KAMLE,GAAwBtnC,GAAK,CACjCjK,MAAOrI,GAAM,CACXspB,GAAQ,UACRA,GAAQ,YACRA,GAAQ,cACRA,GAAQ,kBAEVuwB,OAAQr2C,KACRs2C,SAAUt2C,OAONu2C,GAA6CtE,GACjDxmC,GACEqD,GAAK,CACHuiB,UAAWljB,KACXo/B,KAAMvtC,KACN9G,IAAK26C,GACL2C,KAAMtwB,GAAS/X,MACfsoC,UAAWtwB,GAASD,GAASlmB,WAQ7B02C,GAAmCzE,GACvCxmC,GACEqD,GAAK,CACHuiB,UAAWljB,KACXo/B,KAAMvtC,KACN9G,IAAK26C,GACL2C,KAAMtwB,GAAS/X,MACfsoC,UAAWtwB,GAASD,GAASlmB,WAQ7B22C,GAA4B7nC,GAAK,CACrC8nC,aAAc52C,KACd6P,OAAQsiC,GAA6B4D,MAMjCc,GAA2B/nC,GAAK,CACpC2pB,OAAQ+Y,GACRxU,QAAS+Y,KAMLe,GAAmChoC,GAAK,CAC5C8nC,aAAc52C,KACd6P,OAAQsiC,GAA6B0E,MAMjCE,GAAiBjoC,GAAK,CAC1BkoC,OAAQh3C,KACRutC,KAAMvtC,KACN0Q,KAAM1Q,OAMFi3C,GAAyBnoC,GAAK,CAClC8nC,aAAc52C,KACd6P,OAAQknC,KAiEJG,GAAmB16C,GAAM,CAC7BsS,GAAK,CACHA,KAAMtS,GAAM,CACVspB,GAAQ,sBACRA,GAAQ,aACRA,GAAQ,0BACRA,GAAQ,UAEVynB,KAAMvtC,KACNm3C,UAAWn3C,OAEb8O,GAAK,CACHA,KAAMgX,GAAQ,eACdkxB,OAAQh3C,KACRutC,KAAMvtC,KACNm3C,UAAWn3C,OAEb8O,GAAK,CACHA,KAAMgX,GAAQ,UACdynB,KAAMvtC,KACNm3C,UAAWn3C,KACXo3C,MAAOtoC,GAAK,CACVuoC,sBAAuBr3C,KACvBs3C,0BAA2Bt3C,KAC3Bu3C,sBAAuBv3C,KACvBw3C,wBAAyBx3C,SAG7B8O,GAAK,CACHA,KAAMgX,GAAQ,QACdynB,KAAMvtC,KACNm3C,UAAWn3C,KACX9G,IAAKiV,SAOHspC,GAA+B3oC,GAAK,CACxC8nC,aAAc52C,KACd6P,OAAQqnC,KAMJQ,GAA8B5oC,GAAK,CACvC8nC,aAAc52C,KACd6P,OAAQsiC,GACN31C,GAAM,CAACs3C,GAAuBC,QAO5B4D,GAAyB7oC,GAAK,CAClC8nC,aAAc52C,KACd6P,OAAQ7P,OAGJ43C,GAAoB9oC,GAAK,CAC7B2pB,OAAQtqB,KACR0pC,OAAQ3xB,GAAS/X,MACjB2pC,IAAK5xB,GAAS/X,MACduhC,IAAKxpB,GAAS/X,MACduzB,QAASxb,GAAS/X,QAGd4pC,GAAwBjpC,GAAK,CACjCkpC,WAAY7pC,KACZ8pC,WAAY9pC,KACZ+pC,eAAgBl4C,KAChBm4C,iBAAkBjqC,KAClBkqC,aAAc3sC,GAAM0Z,GAAM,CAACnlB,KAAUA,KAAUA,QAC/CgzC,WAAYhzC,KACZq4C,SAAUr4C,KACVs4C,SAAUpyB,GAASlmB,QAMfu4C,GAAkBtG,GACtBnjC,GAAK,CACH0pC,QAAS/sC,GAAMssC,IACfU,WAAYhtC,GAAMssC,OAIhBW,GAAqBl8C,GAAM,CAC/BspB,GAAQ,aACRA,GAAQ,aACRA,GAAQ,eAGJ6yB,GAA0B7pC,GAAK,CACnCy+B,KAAMvtC,KACN44C,cAAe1yB,GAASlmB,MACxB9G,IAAK26C,GACLgF,mBAAoB1yB,GAASuyB,MAMzBI,GAAgC5G,GACpCzmC,GAAMya,GAASyyB,MAMXI,GAA6C9G,GAAcjyC,MAE3Dg5C,GAA2BlqC,GAAK,CACpC6sB,WAAY6V,GACZnW,gBAAiB5vB,GAAMzL,MACvBy7B,gBAAiBhwB,GAAMzL,QAGnBi5C,GAA6BnqC,GAAK,CACtCkzB,WAAYv2B,GAAM0C,MAClBmT,QAASxS,GAAK,CACZ+tB,YAAapxB,GAAM0C,MACnBmsB,OAAQxrB,GAAK,CACXyrB,sBAAuBv6B,KACvBw6B,0BAA2Bx6B,KAC3By6B,4BAA6Bz6B,OAE/Bg4B,aAAcvsB,GACZqD,GAAK,CACHmuB,SAAUxxB,GAAMzL,MAChBiC,KAAMkM,KACNmqB,eAAgBt4B,QAGpB88B,gBAAiB3uB,KACjB0wB,oBAAqB1Y,GAAS1a,GAAMutC,SAIlCE,GAAsBpqC,GAAK,CAC/B2pB,OAAQ+Y,GACRpM,OAAQl3B,KACRwpB,SAAUxpB,KACVirC,OAAQhzB,GAAS3pB,GAAM,CAACspB,GAAQ,eAAgBA,GAAQ,oBAGpDszB,GAAyCtqC,GAAK,CAClD+tB,YAAapxB,GAAMytC,IACnBlX,WAAYv2B,GAAM0C,QAGdkrC,GAA0BvqC,GAAK,CACnC8mC,OAAQvuB,KACR2kB,QAAS79B,KACTqnB,UAAWgc,KAGP8H,GAAuBxqC,GAAK,CAChCmuB,SAAUxxB,GAAM+lC,IAChBvvC,KAAMkM,KACNqnB,UAAWgc,KAqBP+H,GAAyB71B,GAlBLlnB,GAAM,CAC9B88C,GACAD,KAG+B78C,GAAM,CACrCsS,GAAK,CACH8mC,OAAQvuB,KACR2kB,QAAS79B,KACTqnB,UAAWrnB,OAEbW,GAAK,CACHmuB,SAAUxxB,GAAM0C,MAChBlM,KAAMkM,KACNqnB,UAAWrnB,UAOb,SAAA1d,GACE,OACSK,GAAOL,EADZ,aAAcA,EACK6oD,GAEAD,GAEzB,IAMIG,GAAmC1qC,GAAK,CAC5CkzB,WAAYv2B,GAAM0C,MAClBmT,QAASxS,GAAK,CACZ+tB,YAAapxB,GAAMytC,IACnBlhB,aAAcvsB,GAAM8tC,IACpBzc,gBAAiB3uB,KACjB0wB,oBAAqB1Y,GAASD,GAASza,GAAMutC,UAI3CS,GAAqB3qC,GAAK,CAC9B4qC,aAAc15C,KACd25C,KAAMxrC,KACN8+B,MAAO9mB,GAAShY,MAChByrC,cAAevE,KAGXwE,GAAwB/qC,GAAK,CACjC4oB,SAAUjsB,GAAM+lC,IAChB7Z,SAAUlsB,GAAM+lC,MAMZsI,GAAiChrC,GAAK,CAC1C5V,IAAK26C,GACLkG,IAAK/5C,KACLg6C,kBAAmB7zB,GACjBD,GACEza,GACEqD,GAAK,CACH8oB,MAAO53B,KACPg4B,aAAcvsB,GACZqD,GAAK,CACHmuB,SAAUxxB,GAAMzL,MAChBiC,KAAMkM,KACNmqB,eAAgBt4B,aAO5Bi6C,YAAaxuC,GAAMzL,MACnBk6C,aAAczuC,GAAMzL,MACpBm6C,YAAah0B,GAASD,GAASza,GAAM0C,QACrCisC,iBAAkBj0B,GAASD,GAASza,GAAMguC,MAC1CY,kBAAmBl0B,GAASD,GAASza,GAAMguC,MAC3Ca,gBAAiBn0B,GAAS0zB,IAC1BU,qBAAsBp0B,GAASnmB,QAM3Bw6C,GAAuC1rC,GAAK,CAChD5V,IAAK26C,GACLkG,IAAK/5C,KACLg6C,kBAAmB7zB,GACjBD,GACEza,GACEqD,GAAK,CACH8oB,MAAO53B,KACPg4B,aAAcvsB,GAAM8tC,SAK5BU,YAAaxuC,GAAMzL,MACnBk6C,aAAczuC,GAAMzL,MACpBm6C,YAAah0B,GAASD,GAASza,GAAM0C,QACrCisC,iBAAkBj0B,GAASD,GAASza,GAAMguC,MAC1CY,kBAAmBl0B,GAASD,GAASza,GAAMguC,MAC3Ca,gBAAiBn0B,GAAS0zB,IAC1BU,qBAAsBp0B,GAASnmB,QAG3By6C,GAA2Bj+C,GAAM,CAACspB,GAAQ,GAAIA,GAAQ,YAGtD40B,GAAgB5rC,GAAK,CACzB2pB,OAAQtqB,KACR28B,SAAU9qC,KACV+yC,YAAa7sB,GAASlmB,MACtB26C,WAAYz0B,GAAS/X,MACrB6kC,WAAY7sB,GAASD,GAASlmB,SAM1B46C,GAAoB3I,GACxB/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZosC,aAAc3gC,GACZqD,GAAK,CACHivB,YAAakb,GACbzgB,KAAMtS,GAAS4zB,IACfpY,QAASvb,GAASs0B,OAGtBM,QAAS50B,GAAS1a,GAAMivC,KACxBjE,UAAWvwB,GAASlmB,MACpByzC,YAAavtB,GAASlmB,UAQtBg7C,GAA4B/I,GAChC/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZ+6C,QAAS50B,GAAS1a,GAAMivC,KACxBjE,UAAWvwB,GAASlmB,MACpByzC,YAAavtB,GAASlmB,UAQtBi7C,GAAgChJ,GACpC/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZosC,aAAc3gC,GACZqD,GAAK,CACHivB,YAAaqb,GACb5gB,KAAMtS,GAAS4zB,IACfpY,QAASvb,GAASs0B,OAGtBM,QAAS50B,GAAS1a,GAAMivC,KACxBjE,UAAWvwB,GAASlmB,MACpByzC,YAAavtB,GAASlmB,UAQtBk7C,GAA0BjJ,GAC9B/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZosC,aAAc3gC,GACZqD,GAAK,CACHivB,YAAayb,GACbhhB,KAAMtS,GAASs0B,IACf9Y,QAASvb,GAASs0B,OAGtBM,QAAS50B,GAAS1a,GAAMivC,KACxBjE,UAAWvwB,GAASlmB,MACpByzC,YAAavtB,GAASlmB,UAQtBm7C,GAAsClJ,GAC1C/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZosC,aAAc3gC,GACZqD,GAAK,CACHivB,YAAaqb,GACb5gB,KAAMtS,GAASs0B,IACf9Y,QAASvb,GAASs0B,OAGtBM,QAAS50B,GAAS1a,GAAMivC,KACxBjE,UAAWvwB,GAASlmB,MACpByzC,YAAavtB,GAASlmB,UAQtBo7C,GAAkCnJ,GACtC/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZ+6C,QAAS50B,GAAS1a,GAAMivC,KACxBjE,UAAWvwB,GAASlmB,MACpByzC,YAAavtB,GAASlmB,UAUtBq7C,GAA6BpJ,GACjC/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZosC,aAAc3gC,GACZqD,GAAK,CACHivB,YAAakb,GACbzgB,KAAMtS,GAAS4zB,OAGnBiB,QAAS50B,GAAS1a,GAAMivC,KACxBjE,UAAWvwB,GAASlmB,UAQpBs7C,GAA8BrJ,GAClC/rB,GACEpX,GAAK,CACH0zB,UAAWr0B,KACX0sC,kBAAmB1sC,KACnB2sC,WAAY96C,KACZgiC,WAAYv2B,GAAM0C,MAClBsoC,UAAWvwB,GAASlmB,UAQpBu7C,GAA0BtJ,GAC9B/rB,GACEpX,GAAK,CACHy+B,KAAMvtC,KACNw4B,KAAMshB,GACNrD,UAAWtwB,GAASD,GAASlmB,OAC7B+9B,YAAakb,GACbvX,QAASvb,GAASs0B,QAQlBe,GAAgCvJ,GACpC/rB,GACEpX,GAAK,CACHy+B,KAAMvtC,KACN+9B,YAAayb,GACbhhB,KAAMtS,GAASs0B,IACf/D,UAAWtwB,GAASD,GAASlmB,OAC7B0hC,QAASvb,GAASs0B,QAUlBgB,GAAwCvJ,GAC5CpjC,GAAK,CACH0zB,UAAWr0B,KACXk7B,cAAev6B,GAAK,CAClB4sC,qBAAsB17C,UAQtB27C,GAA8BzJ,GAClCpjC,GAAK,CACH0zB,UAAWr0B,KACX+zB,qBAAsBliC,QAOpB47C,GAA4B1J,GAAwBhkC,MAYpD2tC,GAAuC5J,GAC3CxmC,GAXuBqD,GAAK,CAC5By+B,KAAMvtC,KACN87C,gBAAiB97C,KACjB+7C,SAAU/7C,KACVg8C,iBAAkBh8C,SAadi8C,GAA4B/J,GAChChsB,GACEpX,GAAK,CACHu6B,cAAev6B,GAAK,CAClB4sC,qBAAsB17C,WASxBk8C,GAA0BjK,GAAc9jC,MAKxCguC,GAA2BlK,GAAc9jC,MAgRzCiuC,GAAattC,GAAK,CACtB5V,IAAK26C,GACL7E,KAAMvjC,GAAM0C,MACZkjB,UAAWljB,OAePkuC,GAAyBvtC,GAAK,CAClCe,OAAQsiC,GAA6BiK,IACrCxF,aAAc52C,OAyHVs8C,GAAsB,CAC1B,gBAAiB,MAAFp8C,OAAuC,QAAvCq8C,GAAQ,qBAA+BA,GAAI,YAM/CC,GAAU,WAoFrB,SAAAA,EACEC,EACAC,GACA,IACIC,EACAC,EACAvN,EACAwN,EACAC,EACAC,EANJhrD,EAAA,MAAAzC,EAAAA,EAAAA,GAAA,KAAAktD,GAtFF,KAAiBQ,iBAAW,EAC5B,KAAiBC,uCAAiC,EAClD,KAAiB7P,kBAAY,EAC7B,KAAiB8P,oBAAc,EAC/B,KAAiBC,gBAAU,EAC3B,KAAiBC,iBAAW,EAC5B,KAAiBC,sBAAgB,EACjC,KAAiBC,mBAAa,EAC9B,KAAiBC,wBAAkC,EACnD,KAAiBC,uBAEN,KACX,KAAiBC,yBAEN,KACX,KAMYC,wBAAkC,EAE9C,KAAiBC,0BAAoC,EACrD,KAAiBC,mBAA6B,EAC9C,KAAiBC,eAKb,CACFC,gBAAiB,KACjBC,UAAW,EACXC,sBAAuB,GACvBC,oBAAqB,IAGvB,KAAyBC,0BAAkD,EAC3E,KAAyBC,oDAIrB,CAAC,EACL,KAAyBC,wCAIrB,CAAC,EACL,KAAyBC,wCAIrB,CAAC,EACL,KAAyBC,6CAIrB,CAAC,EACL,KAAyBC,qBAErB,CAAC,EAcL,KAAyBC,gCACvB,IAAIn6B,IAmtDN,KAGAo6B,eAAkB,WAChB,IAAMC,EAAqD,CAAC,EAC5D,sBAAAzkB,GAAA3E,EAAAA,GAAAA,GAAA3S,KAAAA,MAAO,SAAAg8B,EACL/M,GAAsD,IAAAgN,EAAAC,EAAA3W,EAAAjC,EAAArJ,EAAAkiB,EAAA,OAAAn8B,KAAAA,MAAA,SAAA6C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,OA2B/C,OA3B+C87B,EAGpDlN,GAA4BC,GADvB1J,EAAU2W,EAAV3W,WAAYjC,EAAM4Y,EAAN5Y,OAEbrJ,EAAO7qC,EAAKgtD,WAChB,GACA7W,OACAj2C,EACAg0C,GAEI6Y,EAAcE,GAAoBpiB,GACxC8hB,EAAgBI,GACc,QADFF,EAC1BF,EAAgBI,UAAY,IAAAF,EAAAA,GAC5BtpB,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAA4C,IAAA,IAAA05B,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAmC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,cAAA+B,EAAAhC,KAAA,EAAAgC,EAAA/B,KAAA,EAE2BhxB,EAAKqrD,YAAY,iBAAkBxgB,GAAK,OACV,GADhDqiB,EAASn6B,EAAAggB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcjyC,SAC1B,CAAA8kB,EAAA/B,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,0CACD,cAAA2G,EAAA4Q,OAEI,SAAA1wB,EAAI6K,QAAM,OAEmB,OAFnBiV,EAAAhC,KAAA,SAEV47B,EAAgBI,GAAah6B,EAAA7B,OAAA,4BAAA6B,EAAA5B,OAAA,GAAAqC,EAAA,qBAZxC+P,GAcK9P,EAAAzC,KAAA,EACM27B,EAAgBI,GAAY,cAAAt5B,EAAAkQ,OAAA,SAAAlQ,EAAAsf,MAAA,wBAAAtf,EAAAtC,OAAA,GAAAy7B,OAC1C,gBAAAzoB,GAAA,OAAA+D,EAAAxoC,MAAA,KAAAC,UAAA,EA9BD,EA+BF,CAjCkB,GApsDZgrD,GAAoD,kBAAvBA,EAC/Bj6C,KAAKu6C,YAAcN,EACVA,IACTj6C,KAAKu6C,YAAcN,EAAmBxU,WACtCzlC,KAAKw6C,kCACHP,EAAmBwC,iCACrBvC,EAAaD,EAAmBC,WAChCC,EAAcF,EAAmBE,YACjCvN,EAAQqN,EAAmBrN,MAC3BwN,EAAkBH,EAAmBG,gBACrCC,EAA0BJ,EAAmBI,wBAC7CC,EAAYL,EAAmBK,WAGjCt6C,KAAK2qC,aA9tFT,SAA2B+R,GACzB,IAAqC,IAAjC,WAAWC,KAAKD,GAClB,MAAM,IAAIvvD,UAAU,qDAEtB,OAAOuvD,CACT,CAytFwBE,CAAkB5C,GACtCh6C,KAAKy6C,eAAiBP,GDpkGnB,SAA0BF,GAC/B,IAAM6C,EAAU7C,EAAS8C,MAAMhO,IAC/B,GAAe,MAAX+N,EACF,MAAM1vD,UAAU,oCAADsQ,OAAsCu8C,EAAQ,MAE/D,IAAA+C,GAAAz3C,EAAAA,EAAAA,GAKIu3C,EAAO,GAJRE,EAAA,GAAE,IACHC,EAAOD,EAAA,GACPE,EAAaF,EAAA,GACbj+B,EAAIi+B,EAAA,GAEAG,EAAWlD,EAASmD,WAAW,UAAY,OAAS,MACpDC,EACa,MAAjBH,EAAwB,KAAO7zC,SAAS6zC,EAAc9gD,MAAM,GAAI,IAC5DkhD,EAOS,MAAbD,EAAoB,GAAK,IAAH3/C,OAAO2/C,EAAY,GAC3C,MAAO,GAAP3/C,OAAUy/C,EAAQ,MAAAz/C,OAAKu/C,GAAOv/C,OAAG4/C,GAAa5/C,OAAGqhB,EACnD,CC6iGwCw+B,CAAiBtD,GAErDh6C,KAAK06C,WAllDT,SACE1N,EACAmN,EACAoD,EACAnD,EACAC,EACAC,GAEA,IAgDIkD,EAhDE5Q,EAAQ2Q,GAA4B5Q,GAGvB,MAAb2N,GACFja,QAAQC,KACN,8JA6CF8Z,IACFoD,EAAmB,eAAAr6C,GAAA0vB,EAAAA,GAAAA,GAAA3S,KAAAA,MAAG,SAAAW,EAAO48B,EAAMC,GAAI,IAAAC,EAAA,OAAAz9B,KAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACL,IAAI2lB,SAClC,SAACC,EAAS2H,GACR,IACEuM,EAAgBqD,EAAMC,GAAM,SAACE,EAAcC,GAAY,OACrD3X,EAAQ,CAAC0X,EAAcC,GAAc,IAEvC,MAAOniC,GACPmyB,EAAOnyB,EACT,CACF,IACD,OAVsB,OAAjBiiC,EAAiBv9B,EAAAiiB,KAAAjiB,EAAAE,KAAG,EAWbssB,EAAK59C,WAAC,GAAD2T,EAAAA,EAAAA,GAAIg7C,IAAkB,cAAAv9B,EAAA6S,OAAA,SAAA7S,EAAAiiB,MAAA,wBAAAjiB,EAAAK,OAAA,GAAAI,OACzC,gBAAAqS,EAAAC,GAAA,OAAAhwB,EAAAnU,MAAA,KAAAC,UAAA,EAbkB,IAgBrB,IAAM6uD,EAAgB,IAAIC,KAAJ,CAAa,eAAA14C,GAAAwtB,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAAkC,EAAO47B,EAASC,GAAQ,IAAA/iC,EAAAgjC,EAAA37C,EAAA47C,EAAAC,EAAA,OAAAl+B,KAAAA,MAAA,SAAAsB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,OACpDpF,EAAU,CACdmjC,OAAQ,OACRC,KAAMN,EACNO,WAtEAA,EAuEAC,QAASpwD,OAAOI,OACd,CACE,eAAgB,oBAElB2rD,GAAe,CAAC,EAChBN,KAEHr4B,EAAAnB,KAAA,EAGK69B,EAA4B,EAE5BC,EAAW,IAAG,WAEZX,EAAqB,CAAFh8B,EAAAlB,KAAA,gBAAAkB,EAAAlB,KAAA,EACTk9B,EAAoBxQ,EAAK9xB,GAAQ,OAA7C3Y,EAAGif,EAAA6gB,KAAA7gB,EAAAlB,KAAG,GAAH,qBAAAkB,EAAAlB,KAAG,GAEMssB,EAAMI,EAAK9xB,GAAQ,QAA/B3Y,EAAGif,EAAA6gB,KAAA,WAGc,MAAf9/B,EAAI8iC,OAAe,CAAA7jB,EAAAlB,KAAA,gBAAAkB,EAAAyR,OAAA,wBAGS,IAA5BonB,EAAgC,CAAA74B,EAAAlB,KAAA,gBAAAkB,EAAAyR,OAAA,oBAGL,GACG,KADlCirB,GAA6B,GACM,CAAA18B,EAAAlB,KAAA,gBAAAkB,EAAAyR,OAAA,oBAKjC,OAFFoN,QAAQoe,IAAI,yBAADhhD,OACgB8E,EAAI8iC,OAAM,KAAA5nC,OAAI8E,EAAIm8C,WAAU,sBAAAjhD,OAAqB0gD,EAAQ,gBAClF38B,EAAAlB,KAAA,GACIylB,GAAMoY,GAAS,QACrBA,GAAY,EAAE,QAAA38B,EAAAlB,KAAA,uBAAAkB,EAAAlB,KAAA,GAGG/d,EAAI67C,OAAM,QAAvBA,EAAI58B,EAAA6gB,KACN9/B,EAAIo8C,GACNV,EAAS,KAAMG,GAEfH,EAAS,IAAI/uD,MAAM,GAADuO,OAAI8E,EAAI8iC,OAAM,KAAA5nC,OAAI8E,EAAIm8C,WAAU,MAAAjhD,OAAK2gD,KACxD58B,EAAAlB,KAAA,iBAAAkB,EAAAnB,KAAA,GAAAmB,EAAAjB,GAAAiB,EAAA,SAEGA,EAAAjB,cAAerxB,OAAO+uD,EAAQz8B,EAAAjB,IAAM,yBAAAiB,EAAAf,OAAA,GAAA2B,EAAA,mBAE3C,gBAAAgR,EAAAI,GAAA,OAAAnuB,EAAArW,MAAA,KAAAC,UAAA,EAnDkC,GAmDhC,IAEH,OAAO6uD,CACT,CAi9CsBc,CAChB5E,EACAG,EACAvN,EACAwN,EACAC,EACAC,GAEFt6C,KAAK26C,YAv9CT,SAA0BkE,GACxB,OAAO,SAACR,EAAQlkB,GACd,OAAO,IAAI8L,SAAQ,SAACC,EAAS2H,GAC3BgR,EAAOb,QAAQK,EAAQlkB,GAAM,SAAC1jC,EAAUm5C,GAClCn5C,EACFo3C,EAAOp3C,GAGTyvC,EAAQ0J,EACV,GACF,IAEJ,CA28CuBkP,CAAiB9+C,KAAK06C,YACzC16C,KAAK46C,iBA18CT,SAA+BiE,GAC7B,OAAO,SAACE,GACN,OAAO,IAAI9Y,SAAQ,SAACC,EAAS2H,GAEH,IAApBkR,EAAStxD,QAAcy4C,EAAQ,IAEnC,IAAM8Y,EAAQD,EAAS35C,KAAI,SAACgjC,GAC1B,OAAOyW,EAAOb,QAAQ5V,EAAO6W,WAAY7W,EAAOjO,KAClD,IAEA0kB,EAAOb,QAAQgB,GAAO,SAACvoD,EAAUm5C,GAC3Bn5C,EACFo3C,EAAOp3C,GAGTyvC,EAAQ0J,EACV,GACF,IAEJ,CAu7C4BsP,CAAsBl/C,KAAK06C,YAEnD16C,KAAK66C,cAAgB,IAAIhO,GAAmB7sC,KAAKy6C,eAAgB,CAC/DrN,aAAa,EACbC,eAAgB8R,MAElBn/C,KAAK66C,cAAcuE,GAAG,OAAQp/C,KAAKq/C,UAAUtmD,KAAKiH,OAClDA,KAAK66C,cAAcuE,GAAG,QAASp/C,KAAKs/C,WAAWvmD,KAAKiH,OACpDA,KAAK66C,cAAcuE,GAAG,QAASp/C,KAAKu/C,WAAWxmD,KAAKiH,OACpDA,KAAK66C,cAAcuE,GACjB,sBACAp/C,KAAKw/C,yBAAyBzmD,KAAKiH,OAErCA,KAAK66C,cAAcuE,GACjB,sBACAp/C,KAAKy/C,gCAAgC1mD,KAAKiH,OAE5CA,KAAK66C,cAAcuE,GACjB,mBACAp/C,KAAK0/C,sBAAsB3mD,KAAKiH,OAElCA,KAAK66C,cAAcuE,GACjB,2BACAp/C,KAAK2/C,6BAA6B5mD,KAAKiH,OAEzCA,KAAK66C,cAAcuE,GACjB,wBACAp/C,KAAK4/C,2BAA2B7mD,KAAKiH,OAEvCA,KAAK66C,cAAcuE,GACjB,mBACAp/C,KAAK6/C,sBAAsB9mD,KAAKiH,OAElCA,KAAK66C,cAAcuE,GACjB,mBACAp/C,KAAK8/C,sBAAsB/mD,KAAKiH,MAEpC,CAohHC,OAlhHDlT,EAAAA,EAAAA,GAAAitD,EAAA,EAAAhsD,IAAA,aAAAsU,IAGA,WACE,OAAOrC,KAAKu6C,WACd,GAEA,CAAAxsD,IAAA,cAAAsU,IAGA,WACE,OAAOrC,KAAK2qC,YACd,GAEA,CAAA58C,IAAA,uBAAAC,MAAA,eAAA+xD,GAAAltB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA8/B,EACEzkC,EACA4zB,GAAkD,IAAA8Q,EAAAxa,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAggC,GAAA,cAAAA,EAAA7/B,KAAA6/B,EAAA5/B,MAAA,OAUjD,OARD2/B,EAEE/Q,GAA4BC,GADvB1J,EAAUwa,EAAVxa,WAAYjC,EAAMyc,EAANzc,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,CAAC/gC,EAAUiX,YACXiT,OACAj2C,EACAg0C,GACD0c,EAAA5/B,KAAA,EACuBtgB,KAAK26C,YAAY,aAAcxgB,GAAK,OACI,GAD1DqiB,EAAS0D,EAAA7d,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW/M,GAAwBlyC,SACpC,CAAA2iD,EAAA5/B,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,6BAAAje,OACoB8d,EAAUiX,aACxC,cAAA0tB,EAAAjtB,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA8yC,EAAAz/B,OAAA,GAAAu/B,EAAA,UAClB,gBAAAjsB,EAAAC,GAAA,OAAA+rB,EAAA/wD,MAAA,KAAAC,UAAA,EAzBD,IA2BA,CAAAlB,IAAA,aAAAC,MAAA,eAAAmyD,GAAAttB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAkgC,EACE7kC,EACA4zB,GAAkD,OAAAjvB,KAAAA,MAAA,SAAAmgC,GAAA,cAAAA,EAAAhgC,KAAAggC,EAAA//B,MAAA,cAAA+/B,EAAA//B,KAAA,EAErCtgB,KAAKsgD,qBAAqB/kC,EAAW4zB,GAC/CoR,MAAK,SAAA/yC,GAAC,OAAIA,EAAExf,KAAK,IACZ,OAAC,SAAA0I,GACL,MAAM,IAAIxH,MACR,oCAAsCqsB,EAAUiX,WAAa,KAAO97B,EAExE,IAAE,cAAA2pD,EAAAptB,OAAA,SAAAotB,EAAAhe,MAAA,wBAAAge,EAAA5/B,OAAA,GAAA2/B,EAAA,UACL,gBAAAI,EAAAC,GAAA,OAAAN,EAAAnxD,MAAA,KAAAC,UAAA,EAdD,IAgBA,CAAAlB,IAAA,eAAAC,MAAA,eAAA0yD,GAAA7tB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAygC,EAAmB7V,GAAY,IAAA0R,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAiD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,cAAA6C,EAAA7C,KAAA,EACLtgB,KAAK26C,YAAY,eAAgB,CAAC7P,IAAM,OACA,GAD1D0R,EAASr5B,EAAAkf,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAc/rB,GAASlmB,UACnC,CAAA4lB,EAAA7C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,qCAAAje,OAC4BqtC,IACtC,cAAA3nB,EAAA8P,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA+V,EAAA1C,OAAA,GAAAkgC,EAAA,UAClB,gBAAAC,GAAA,OAAAF,EAAA1xD,MAAA,KAAAC,UAAA,EAbD,IAeA,CAAAlB,IAAA,uBAAAC,MAAA,eAAA6yD,GAAAhuB,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAA4gC,IAAA,IAAAtE,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA6gC,GAAA,cAAAA,EAAA1gC,KAAA0gC,EAAAzgC,MAAA,cAAAygC,EAAAzgC,KAAA,EAC0BtgB,KAAK26C,YAAY,oBAAqB,IAAG,OACX,GADhD6B,EAASuE,EAAA1e,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcjyC,SAC1B,CAAAwjD,EAAAzgC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,qCACD,cAAAqlC,EAAA9tB,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA2zC,EAAAtgC,OAAA,GAAAqgC,EAAA,UAClB,yBAAAD,EAAA7xD,MAAA,KAAAC,UAAA,EAdD,IAgBA,CAAAlB,IAAA,yBAAAC,MAAA,eAAAgzD,GAAAnuB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA+gC,IAAA,IAAAzE,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAghC,GAAA,cAAAA,EAAA7gC,KAAA6gC,EAAA5gC,MAAA,cAAA4gC,EAAA5gC,KAAA,EAC0BtgB,KAAK26C,YAAY,yBAA0B,IAAG,OAC1B,GADtC6B,EAAS0E,EAAA7e,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWjK,MACZ,CAAA2O,EAAA5gC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,uCACD,cAAAwlC,EAAAjuB,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA8zC,EAAAzgC,OAAA,GAAAwgC,EAAA,UAClB,yBAAAD,EAAAhyD,MAAA,KAAAC,UAAA,EAbD,IAeA,CAAAlB,IAAA,YAAAC,MAAA,eAAAmzD,GAAAtuB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAkhC,EACE5d,GAAqC,IAAA6d,EAAA7E,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAohC,GAAA,cAAAA,EAAAjhC,KAAAihC,EAAAhhC,MAAA,OAcpC,OAZG+gC,EAA6B,CAAC,EAEhCA,EADoB,kBAAX7d,EACG,CAACiC,WAAYjC,GAChBA,EACAjvB,GAAAA,GAAA,GACJivB,GAAM,IACTiC,WAAajC,GAAUA,EAAOiC,YAAezlC,KAAKylC,aAGxC,CACVA,WAAYzlC,KAAKylC,YAEpB6b,EAAAhhC,KAAA,EAEuBtgB,KAAK26C,YAAY,YAAa,CAAC0G,IAAW,OACjB,GAD3C7E,EAAS8E,EAAAjf,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhK,MACZ,CAAA8O,EAAAhhC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,wBAAuB,cAAA4lC,EAAAruB,OAE1D,SAAA1wB,EAAI6K,QAAM,wBAAAk0C,EAAA7gC,OAAA,GAAA2gC,EAAA,UAClB,gBAAAG,GAAA,OAAAJ,EAAAnyD,MAAA,KAAAC,UAAA,EA1BD,IA4BA,CAAAlB,IAAA,iBAAAC,MAAA,eAAAwzD,GAAA3uB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAuhC,EACEC,EACAjc,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAyhC,GAAA,cAAAA,EAAAthC,KAAAshC,EAAArhC,MAAA,OAEgD,OAAjE6Z,EAAOn6B,KAAKs8C,WAAW,CAACoF,EAAiBlvB,YAAaiT,GAAWkc,EAAArhC,KAAA,EAC/CtgB,KAAK26C,YAAY,iBAAkBxgB,GAAK,OACS,GADnEqiB,EAASmF,EAAAtf,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW/M,GAAwBmD,OACpC,CAAA+O,EAAArhC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,8BAA6B,cAAAimC,EAAA1uB,OAEhE,SAAA1wB,EAAI6K,QAAM,wBAAAu0C,EAAAlhC,OAAA,GAAAghC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAAxyD,MAAA,KAAAC,UAAA,EAdD,IAgBA,CAAAlB,IAAA,yBAAAC,MAAA,eAAA8zD,GAAAjvB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA6hC,EACEC,EACAvc,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA+hC,GAAA,cAAAA,EAAA5hC,KAAA4hC,EAAA3hC,MAAA,OAE4C,OAA7D6Z,EAAOn6B,KAAKs8C,WAAW,CAAC0F,EAAaxvB,YAAaiT,GAAWwc,EAAA3hC,KAAA,EAC3CtgB,KAAK26C,YAAY,yBAA0BxgB,GAAK,OACC,GADnEqiB,EAASyF,EAAA5f,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW/M,GAAwBmD,OACpC,CAAAqP,EAAA3hC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,uCACD,cAAAumC,EAAAhvB,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA60C,EAAAxhC,OAAA,GAAAshC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAA9yD,MAAA,KAAAC,UAAA,EAjBD,IAmBA,CAAAlB,IAAA,0BAAAC,MAAA,eAAAo0D,GAAAvvB,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAmiC,EACEC,EACAlrB,EACA+X,GAA+D,IAAAoT,EAAA9c,EAAAjC,EAAAgf,EAAAroB,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA4D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,OAWE,OAXFiiC,EAG7DrT,GAA4BC,GADvB1J,EAAU8c,EAAV9c,WAAYjC,EAAM+e,EAAN/e,OAEfgf,EAAe,CAACF,EAAa9vB,YAC7B,SAAU4E,EACZorB,EAAMltD,KAAK,CAAC4hD,KAAM9f,EAAO8f,KAAK1kB,aAE9BgwB,EAAMltD,KAAK,CAACy9B,UAAWqE,EAAOrE,UAAUP,aAGpC2H,EAAOn6B,KAAKs8C,WAAWkG,EAAO/c,EAAY,SAAUjC,GAAO1f,EAAAxD,KAAA,EACzCtgB,KAAK26C,YAAY,0BAA2BxgB,GAAK,OACnB,GADhDqiB,EAAS14B,EAAAue,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWvJ,MACZ,CAAAnvB,EAAAxD,KAAA,eACV,IAAIksB,GACRjqC,EAAImZ,MAAK,iDAAAje,OACwC6kD,EAAa9vB,aAC/D,eAAA1O,EAAAmP,OAEI,SAAA1wB,EAAI6K,QAAM,yBAAA0W,EAAArD,OAAA,GAAA4hC,EAAA,UAClB,gBAAAI,EAAAC,EAAAC,GAAA,OAAAP,EAAApzD,MAAA,KAAAC,UAAA,EA7BD,IA+BA,CAAAlB,IAAA,gCAAAC,MAAA,eAAA40D,GAAA/vB,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAA2iC,EACEP,EACAlrB,EACAqO,GAAuB,IAAA+c,EAAAroB,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA4iC,GAAA,cAAAA,EAAAziC,KAAAyiC,EAAAxiC,MAAA,OAasC,OAPzDkiC,EAAe,CAACF,EAAa9vB,YAC7B,SAAU4E,EACZorB,EAAMltD,KAAK,CAAC4hD,KAAM9f,EAAO8f,KAAK1kB,aAE9BgwB,EAAMltD,KAAK,CAACy9B,UAAWqE,EAAOrE,UAAUP,aAGpC2H,EAAOn6B,KAAKs8C,WAAWkG,EAAO/c,EAAY,cAAaqd,EAAAxiC,KAAA,EACrCtgB,KAAK26C,YAAY,0BAA2BxgB,GAAK,OACb,GADtDqiB,EAASsG,EAAAzgB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWpJ,MACZ,CAAA0P,EAAAxiC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,iDAAAje,OACwC6kD,EAAa9vB,aAC/D,cAAAswB,EAAA7vB,OAEI,SAAA1wB,EAAI6K,QAAM,yBAAA01C,EAAAriC,OAAA,GAAAoiC,EAAA,UAClB,gBAAAE,EAAAC,EAAAC,GAAA,OAAAL,EAAA5zD,MAAA,KAAAC,UAAA,EA/BD,IAiCA,CAAAlB,IAAA,qBAAAC,MAAA,eAAAk1D,GAAArwB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAijC,EACE3f,GAAiC,IAAA4f,EAAAjpB,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAgE,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,OAMqB,OAJhD8iC,EAAG7uC,GAAAA,GAAA,GACJivB,GAAM,IACTiC,WAAajC,GAAUA,EAAOiC,YAAezlC,KAAKylC,aAE9CtL,EAAOipB,EAAIhsB,QAAUgsB,EAAI3d,WAAa,CAAC2d,GAAO,GAAEl/B,EAAA5D,KAAA,EAC9BtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OACV,GADpDqiB,EAASt4B,EAAAme,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWnJ,MACZ,CAAAnvB,EAAA5D,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,kCAAiC,cAAAwI,EAAA+O,OAEpE,SAAA1wB,EAAI6K,QAAM,wBAAA8W,EAAAzD,OAAA,GAAA0iC,EAAA,UAClB,gBAAAE,GAAA,OAAAH,EAAAl0D,MAAA,KAAAC,UAAA,EAjBD,IAmBA,CAAAlB,IAAA,0BAAAC,MAAA,eAAAs1D,GAAAzwB,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAAqjC,EACEC,EACA/d,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAkE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,OAE2C,OAA5D6Z,EAAOn6B,KAAKs8C,WAAW,CAACkH,EAAYhxB,YAAaiT,GAAWrhB,EAAA9D,KAAA,EAC1CtgB,KAAK26C,YAAY,0BAA2BxgB,GAAK,OACb,GADtDqiB,EAASp4B,EAAAie,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWxJ,MACZ,CAAA5uB,EAAA9D,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,wCACD,cAAA0I,EAAA6O,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAgX,EAAA3D,OAAA,GAAA8iC,EAAA,UAClB,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAt0D,MAAA,KAAAC,UAAA,EAlBD,IAoBA,CAAAlB,IAAA,2BAAAC,MAAA,eAAA21D,GAAA9wB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA0jC,EACEroC,EACA4zB,GAAsD,IAAA0U,EAAApe,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA4jC,GAAA,cAAAA,EAAAzjC,KAAAyjC,EAAAxjC,MAAA,OASrD,OATqDujC,EAGpD3U,GAA4BC,GADvB1J,EAAUoe,EAAVpe,WAAYjC,EAAMqgB,EAANrgB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,CAAC/gC,EAAUiX,YACXiT,EACA,SACAjC,GACDsgB,EAAAxjC,KAAA,EACuBtgB,KAAK26C,YAAY,iBAAkBxgB,GAAK,OAI/D,GAJKqiB,EAASsH,EAAAzhB,OAKX,UAJE9/B,EAAMlU,GACVmuD,EACA/M,GAAwBhsB,GAAS6vB,QAEjB,CAAAwQ,EAAAxjC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,oCAAAje,OAC2B8d,EAAUiX,aAC/C,cAAAsxB,EAAA7wB,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA02C,EAAArjC,OAAA,GAAAmjC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAA30D,MAAA,KAAAC,UAAA,EA3BD,IA6BA,CAAAlB,IAAA,uBAAAC,MAAA,eAAAi2D,GAAApxB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAgkC,EACE3oC,EACA4zB,GAAsD,IAAAgV,EAAA1e,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAkkC,GAAA,cAAAA,EAAA/jC,KAAA+jC,EAAA9jC,MAAA,OAWrD,OAXqD6jC,EAKpDjV,GAA4BC,GADvB1J,EAAU0e,EAAV1e,WAAYjC,EAAM2gB,EAAN3gB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,CAAC/gC,EAAUiX,YACXiT,EACA,aACAjC,GACD4gB,EAAA9jC,KAAA,EACuBtgB,KAAK26C,YAAY,iBAAkBxgB,GAAK,OAI/D,GAJKqiB,EAAS4H,EAAA/hB,OAKX,UAJE9/B,EAAMlU,GACVmuD,EACA/M,GAAwBhsB,GAASgwB,QAEjB,CAAA2Q,EAAA9jC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,oCAAAje,OAC2B8d,EAAUiX,aAC/C,cAAA4xB,EAAAnxB,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAg3C,EAAA3jC,OAAA,GAAAyjC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAAj1D,MAAA,KAAAC,UAAA,EA7BD,IA+BA,CAAAlB,IAAA,iBAAAC,MAAA,eAAAu2D,GAAA1xB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAskC,EACEjpC,EACA4zB,GAAsD,IAAA5sC,EAAA,OAAA2d,KAAAA,MAAA,SAAAukC,GAAA,cAAAA,EAAApkC,KAAAokC,EAAAnkC,MAAA,cAAAmkC,EAAApkC,KAAA,EAAAokC,EAAAnkC,KAAA,EAGlCtgB,KAAK0kD,yBACrBnpC,EACA4zB,GACD,OAHQ,OAAH5sC,EAAGkiD,EAAApiB,KAAAoiB,EAAAxxB,OAIF,SAAA1wB,EAAIvU,OAAK,aAAAy2D,EAAApkC,KAAA,EAAAokC,EAAAlkC,GAAAkkC,EAAA,SAEV,IAAIv1D,MACR,oCAAsCqsB,EAAUiX,WAAa,KAAIiyB,EAAAlkC,IAClE,yBAAAkkC,EAAAhkC,OAAA,GAAA+jC,EAAA,kBAEJ,gBAAAG,EAAAC,GAAA,OAAAL,EAAAv1D,MAAA,KAAAC,UAAA,EAlBD,IAoBA,CAAAlB,IAAA,4BAAAC,MAAA,eAAA62D,GAAAhyB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA4kC,EACEC,EACAC,GAAqC,IAAAC,EAAAxf,EAAAjC,EAAAzf,EAAAoW,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAglC,GAAA,cAAAA,EAAA7kC,KAAA6kC,EAAA5kC,MAAA,OAMiC,OANjC2kC,EAIR/V,GAA4B8V,GAAlDvf,EAAUwf,EAAVxf,WAAYjC,EAAMyhB,EAANzhB,OACbzf,EAAOghC,EAAW3/C,KAAI,SAAArX,GAAG,OAAIA,EAAIykC,cACjC2H,EAAOn6B,KAAKs8C,WAAW,CAACv4B,GAAO0hB,EAAY,aAAcjC,GAAO0hB,EAAA5kC,KAAA,EAC9CtgB,KAAK26C,YAAY,sBAAuBxgB,GAAK,OAIpE,GAJKqiB,EAAS0I,EAAA7iB,OAKX,UAJE9/B,EAAMlU,GACVmuD,EACA/M,GAAwBzmC,GAAMya,GAASgwB,SAEvB,CAAAyR,EAAA5kC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,mCAAAje,OAC0BsmB,IACpC,cAAAmhC,EAAAjyB,OAEI,SAAA1wB,EAAI6K,QAAM,yBAAA83C,EAAAzkC,OAAA,GAAAqkC,EAAA,UAClB,gBAAAK,EAAAC,GAAA,OAAAP,EAAA71D,MAAA,KAAAC,UAAA,EAxBD,IA0BA,CAAAlB,IAAA,oCAAAC,MAAA,eAAAq3D,GAAAxyB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAolC,EACEP,EACA5V,GAA2D,IAAAoW,EAAA9f,EAAAjC,EAAAzf,EAAAoW,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAslC,GAAA,cAAAA,EAAAnlC,KAAAmlC,EAAAllC,MAAA,OAKO,OALPilC,EAGzDrW,GAA4BC,GADvB1J,EAAU8f,EAAV9f,WAAYjC,EAAM+hB,EAAN/hB,OAEbzf,EAAOghC,EAAW3/C,KAAI,SAAArX,GAAG,OAAIA,EAAIykC,cACjC2H,EAAOn6B,KAAKs8C,WAAW,CAACv4B,GAAO0hB,EAAY,SAAUjC,GAAOgiB,EAAAllC,KAAA,EAC1CtgB,KAAK26C,YAAY,sBAAuBxgB,GAAK,OAIpE,GAJKqiB,EAASgJ,EAAAnjB,OAKX,UAJE9/B,EAAMlU,GACVmuD,EACA/M,GAAwBzmC,GAAMya,GAAS6vB,SAEvB,CAAAkS,EAAAllC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,mCAAAje,OAC0BsmB,IACpC,cAAAyhC,EAAAvyB,OAEI,SAAA1wB,EAAI6K,QAAM,yBAAAo4C,EAAA/kC,OAAA,GAAA6kC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAAr2D,MAAA,KAAAC,UAAA,EAvBD,IAyBA,CAAAlB,IAAA,0BAAAC,MAAA,eAAA23D,GAAA9yB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA0lC,EACEb,EACA5V,GAA2D,IAAA5sC,EAAA,OAAA2d,KAAAA,MAAA,SAAA2lC,GAAA,cAAAA,EAAAxlC,KAAAwlC,EAAAvlC,MAAA,cAAAulC,EAAAvlC,KAAA,EAEzCtgB,KAAK8lD,kCACrBf,EACA5V,GACD,OAHQ,OAAH5sC,EAAGsjD,EAAAxjB,KAAAwjB,EAAA5yB,OAIF,SAAA1wB,EAAIvU,OAAK,wBAAA63D,EAAAplC,OAAA,GAAAmlC,EAAA,UACjB,gBAAAG,EAAAC,GAAA,OAAAL,EAAA32D,MAAA,KAAAC,UAAA,EAZD,IAcA,CAAAlB,IAAA,qBAAAC,MAAA,eAAAi4D,GAAApzB,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAgmC,EACE3qC,EACA4zB,EACAnD,GAAc,IAAAma,EAAA1gB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAkmC,GAAA,cAAAA,EAAA/lC,KAAA+lC,EAAA9lC,MAAA,OAYb,OAZa6lC,EAGZjX,GAA4BC,GADvB1J,EAAU0gB,EAAV1gB,WAAYjC,EAAM2iB,EAAN3iB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,CAAC/gC,EAAUiX,YACXiT,OACAj2C,EAAU+kB,GAAAA,GAAA,GAELivB,GAAM,IACTwI,MAAgB,MAATA,EAAgBA,EAAQ,OAAAxI,QAAA,IAAAA,OAAA,EAAAA,EAAQwI,SAE1Coa,EAAA9lC,KAAA,EAEuBtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OACD,GAD7DqiB,EAAS4J,EAAA/jB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcmE,OAC1B,CAAAyS,EAAA9lC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,kCAAAje,OACyB8d,EAAUiX,aAC7C,cAAA4zB,EAAAnzB,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAg5C,EAAA3lC,OAAA,GAAAylC,EAAA,UAClB,gBAAAG,EAAAC,EAAAC,GAAA,OAAAN,EAAAj3D,MAAA,KAAAC,UAAA,EA7BD,IA+BA,CAAAlB,IAAA,qBAAAC,MAeA,eAAAw4D,GAAA3zB,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAAumC,EACE1zB,EACA2zB,GAA0D,IAAAC,EAAAlhB,EAAAjC,EAAA9L,EAAAkvB,EAAAC,EAAA1sB,EAAAqiB,EAAAsK,EAAAvkD,EAAA,OAAA2d,KAAAA,MAAA,SAAA6mC,GAAA,cAAAA,EAAA1mC,KAAA0mC,EAAAzmC,MAAA,OAazD,OAbyDqmC,EAMxDzX,GAA4BwX,GADvBjhB,EAAUkhB,EAAVlhB,WAAYjC,EAAMmjB,EAANnjB,OAEZojB,GAFkBlvB,EAEoB8L,GAAU,CAAC,GAAjDojB,SAAaC,GAAqB9nC,EAAAA,GAAAA,GAAA2Y,EAAAsvB,IACnC7sB,EAAOn6B,KAAKs8C,WAChB,CAACvpB,EAAUP,YACXiT,EACAmhB,GAAY,SACZC,GACDE,EAAAzmC,KAAA,EACuBtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OAKlB,GAL5CqiB,EAASuK,EAAA1kB,KACTykB,EAAa99C,GAAMuqC,MAKrB,UAJEhxC,GACkC,IAAtCskD,EAAsBI,YAClB54D,GAAOmuD,EAAW/M,GAAwBqX,IAC1Cz4D,GAAOmuD,EAAWhN,GAAcsX,MACpB,CAAAC,EAAAzmC,KAAA,eACV,IAAIksB,GACRjqC,EAAImZ,MAAK,2CAAAje,OACkCs1B,EAAUP,aACtD,eAAAu0B,EAAA9zB,OAEI,SAAA1wB,EAAI6K,QAAM,yBAAA25C,EAAAtmC,OAAA,GAAAgmC,EAAA,UAClB,gBAAAS,EAAAC,GAAA,OAAAX,EAAAx3D,MAAA,KAAAC,UAAA,EA9BD,IAgCA,CAAAlB,IAAA,2BAAAC,MAAA,eAAAo5D,GAAAv0B,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAmnC,EACEt0B,EACA2zB,GAAgE,IAAAY,EAAA7hB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAqnC,GAAA,cAAAA,EAAAlnC,KAAAknC,EAAAjnC,MAAA,OAc/D,OAd+DgnC,EAQ9DpY,GAA4BwX,GADvBjhB,EAAU6hB,EAAV7hB,WAAYjC,EAAM8jB,EAAN9jB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,CAACvpB,EAAUP,YACXiT,EACA,aACAjC,GACD+jB,EAAAjnC,KAAA,EACuBtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OAInE,GAJKqiB,EAAS+K,EAAAllB,OAKX,UAJE9/B,EAAMlU,GACVmuD,EACAhN,GAAcxmC,GAAM0qC,QAEJ,CAAA6T,EAAAjnC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,2CAAAje,OACkCs1B,EAAUP,aACtD,cAAA+0B,EAAAt0B,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAm6C,EAAA9mC,OAAA,GAAA4mC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAAp4D,MAAA,KAAAC,UAAA,EAlCD,IAkCC,CAAAlB,IAAA,qBAAAC,MAcD,eAAA05D,GAAA70B,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAAynC,EACEC,EACAniB,GAAuB,IAAAoiB,EAAAC,EAAAC,EAAAC,EAAA,OAAA9nC,KAAAA,MAAA,SAAA+nC,GAAA,cAAAA,EAAA5nC,KAAA4nC,EAAA3nC,MAAA,UAIA,iBAAZsnC,EAAoB,CAAAK,EAAA3nC,KAAA,QAC7BunC,EAAeD,EAASK,EAAA3nC,KAAA,eAED,GAED,QAFCwnC,GAAjBC,EAASH,GAEJ/hB,mBAAW,IAAAiiB,IAAlBA,EAAoBI,QAAO,CAAAD,EAAA3nC,KAAA,eAAA2nC,EAAAh1B,OAAA,SACtBgT,QAAQ4H,OAAOka,EAAOliB,YAAYsiB,SAAO,OAElDN,EAAeE,EAAOn5B,UAAU,OAAAq5B,EAAA5nC,KAAA,EAMhC2nC,EAAmB31B,KAAAA,OAAYw1B,GAAcI,EAAA3nC,KAAA,uBAAA2nC,EAAA5nC,KAAA,GAAA4nC,EAAA1nC,GAAA0nC,EAAA,SAEvC,IAAI/4D,MAAM,qCAAuC24D,GAAa,QAGC,GAAvEtlC,GAAmC,KAA5BylC,EAAiBv6D,OAAe,gCAEf,kBAAbm6D,EAAqB,CAAAK,EAAA3nC,KAAA,gBAAA2nC,EAAA3nC,KAAA,GACjBtgB,KAAKooD,6CAA6C,CAC7D3iB,WAAYA,GAAczlC,KAAKylC,WAC/B7W,UAAWi5B,IACX,eAAAI,EAAAh1B,OAAA,SAAAg1B,EAAA5lB,MAAA,aACO,yBAA0BulB,GAAQ,CAAAK,EAAA3nC,KAAA,gBAAA2nC,EAAA3nC,KAAA,GAC9BtgB,KAAKqoD,qDAAqD,CACrE5iB,WAAYA,GAAczlC,KAAKylC,WAC/BmiB,SAAAA,IACA,eAAAK,EAAAh1B,OAAA,SAAAg1B,EAAA5lB,MAAA,eAAA4lB,EAAA3nC,KAAA,GAEWtgB,KAAKsoD,4CAA4C,CAC5D7iB,WAAYA,GAAczlC,KAAKylC,WAC/BmiB,SAAAA,IACA,eAAAK,EAAAh1B,OAAA,SAAAg1B,EAAA5lB,MAAA,yBAAA4lB,EAAAxnC,OAAA,GAAAknC,EAAA,mBAEL,gBAAAY,EAAAC,GAAA,OAAAd,EAAA14D,MAAA,KAAAC,UAAA,EA5CD,IA4CC,CAAAlB,IAAA,yBAAAC,MAED,SAA+By6D,GAC7B,OAAO,IAAIxiB,SAAe,SAACz9B,EAAGqlC,GACd,MAAV4a,IAGAA,EAAOP,QACTra,EAAO4a,EAAON,QAEdM,EAAOC,iBAAiB,SAAS,WAC/B7a,EAAO4a,EAAON,OAChB,IAEJ,GACF,GAAC,CAAAp6D,IAAA,oCAAAC,MAED,SAAA4zC,GAYE,IACI+mB,EACAC,EAFJ14D,EAAA,KAXAu1C,EAAU7D,EAAV6D,WACA7W,EAASgT,EAAThT,UAeIr4B,GAAO,EAkGX,MAAO,CAACsyD,kBAVkB,WACpBD,IACFA,IACAA,OAAkDp5D,GAErB,MAA3Bm5D,IACFz4D,EAAK44D,wBAAwBH,GAC7BA,OAA0Bn5D,IAGHu5D,oBAjGC,IAAI9iB,SAG7B,SAACC,EAAS2H,GACX,IACE8a,EAA0Bz4D,EAAK84D,YAC7Bp6B,GACA,SAACxhB,EAAyBqN,GACxBkuC,OAA0Bn5D,EAC1B,IAAMogD,EAAW,CACfn1B,QAAAA,EACAzsB,MAAOof,GAET84B,EAAQ,CAAC+iB,OAAQ/pB,GAAkBgqB,UAAWtZ,SAAAA,MAEhDnK,GAEF,IAAM0jB,EAA2B,IAAIljB,SACnC,SAAAmjB,GACiC,MAA3BT,EACFS,IAEAR,EACE14D,EAAKm5D,2BACHV,GACA,SAAAW,GACoB,eAAdA,GACFF,GAEJ,GAGR,KAEFv2B,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAAqpC,IAAA,IAAA3Z,EAAAn1B,EAAAzsB,EAAA,OAAAkyB,KAAAA,MAAA,SAAAspC,GAAA,cAAAA,EAAAnpC,KAAAmpC,EAAAlpC,MAAA,cAAAkpC,EAAAlpC,KAAA,EACO6oC,EAAwB,WAC1B5yD,EAAM,CAAFizD,EAAAlpC,KAAA,eAAAkpC,EAAAv2B,OAAA,wBAAAu2B,EAAAlpC,KAAA,EACepwB,EAAKu5D,mBAAmB76B,GAAU,OAA3C,GAARghB,EAAQ4Z,EAAAnnB,MACV9rC,EAAM,CAAFizD,EAAAlpC,KAAA,eAAAkpC,EAAAv2B,OAAA,oBACQ,MAAZ2c,EAAgB,CAAA4Z,EAAAlpC,KAAA,gBAAAkpC,EAAAv2B,OAAA,kBAGC,GAAdxY,EAAkBm1B,EAAlBn1B,QACM,OADGzsB,EAAS4hD,EAAT5hD,OACC,CAAAw7D,EAAAlpC,KAAA,gBAAAkpC,EAAAv2B,OAAA,qBAGb,OAAAjlC,QAAA,IAAAA,IAAAA,EAAOyI,IAAG,CAAA+yD,EAAAlpC,KAAA,SACZutB,EAAO7/C,EAAMyI,KAAK+yD,EAAAlpC,KAAA,iBAAAkpC,EAAAjpC,GAEVklB,EAAU+jB,EAAAlpC,KACX,cADWkpC,EAAAjpC,IAEX,WADWipC,EAAAjpC,IAEX,iBADQipC,EAAAjpC,GADG,GAQX,cANcipC,EAAAjpC,IAOd,QADWipC,EAAAjpC,IAEX,SADKipC,EAAAjpC,GADM,IAYX,cAVMipC,EAAAjpC,IAUKipC,EAAAjpC,GAAA,IACH,iBAlBsB,cAA7BvyB,EAAMooD,mBAAkC,CAAAoT,EAAAlpC,KAAA,gBAAAkpC,EAAAv2B,OAAA,yBAAAu2B,EAAAv2B,OAAA,uBASb,cAA7BjlC,EAAMooD,oBACuB,cAA7BpoD,EAAMooD,mBAAkC,CAAAoT,EAAAlpC,KAAA,gBAAAkpC,EAAAv2B,OAAA,yBAAAu2B,EAAAv2B,OAAA,oBAU9C18B,GAAO,EACP2vC,EAAQ,CACN+iB,OAAQ/pB,GAAkBgqB,UAC1BtZ,SAAU,CACRn1B,QAAAA,EACAzsB,MAAAA,KAED,yBAAAw7D,EAAA/oC,OAAA,GAAA8oC,EAAA,IA9CP12B,GAiDA,MAAOp8B,GACPo3C,EAAOp3C,EACT,CACF,IAYF,GAAC,CAAA1I,IAAA,uDAAAC,MAAA,eAAA07D,GAAA72B,EAAAA,GAAAA,GAAA3S,KAAAA,MAED,SAAAypC,EAAAC,GAAA,IAAAnkB,EAAAokB,EAAAhkB,EAAApG,EAAA7Q,EAAAr4B,EAAAuzD,EAAAC,EAAAlB,EAAAE,EAAAiB,EAAA58C,EAAA68C,EAAAx5D,EAAA,YAAAyvB,KAAAA,MAAA,SAAAgqC,GAAA,cAAAA,EAAA7pC,KAAA6pC,EAAA5pC,MAAA,OAiCsE,OAhCpEmlB,EAAUmkB,EAAVnkB,WAAUokB,EAAAD,EACVhC,SAAW/hB,EAAWgkB,EAAXhkB,YAAapG,EAAoBoqB,EAApBpqB,qBAAsB7Q,EAASi7B,EAATj7B,UAK1Cr4B,GAAgB,EACduzD,EAAgB,IAAI7jB,SAEvB,SAAAC,GACD,IAAMikB,EAAgB,eAAAlyB,GAAApF,EAAAA,GAAAA,GAAA3S,KAAAA,MAAG,SAAAkqC,IAAA,IAAApZ,EAAA,OAAA9wB,KAAAA,MAAA,SAAAmqC,GAAA,cAAAA,EAAAhqC,KAAAgqC,EAAA/pC,MAAA,cAAA+pC,EAAAhqC,KAAA,EAAAgqC,EAAA/pC,KAAA,EAEK7vB,EAAKurD,eAAevW,GAAW,OAAxC,OAAXuL,EAAWqZ,EAAAhoB,KAAAgoB,EAAAp3B,OAAA,SACV+d,GAAW,cAAAqZ,EAAAhqC,KAAA,EAAAgqC,EAAA9pC,GAAA8pC,EAAA,SAAAA,EAAAp3B,OAAA,UAEV,GAAC,yBAAAo3B,EAAA5pC,OAAA,GAAA2pC,EAAA,kBAEZ,kBAPqB,OAAAnyB,EAAAjpC,MAAA,KAAAC,UAAA,MAQtB4jC,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAAoqC,IAAA,IAAAC,EAAA,OAAArqC,KAAAA,MAAA,SAAAsqC,GAAA,cAAAA,EAAAnqC,KAAAmqC,EAAAlqC,MAAA,cAAAkqC,EAAAlqC,KAAA,EACgC6pC,IAAkB,OAA3B,GAAlBI,EAAkBC,EAAAnoB,MAClB9rC,EAAM,CAAFi0D,EAAAlqC,KAAA,eAAAkqC,EAAAv3B,OAAA,sBACDs3B,GAAsB9qB,GAAoB,CAAA+qB,EAAAlqC,KAAA,gBAAAkqC,EAAAlqC,KAAA,EACzCylB,GAAM,KAAK,WACbxvC,EAAM,CAAFi0D,EAAAlqC,KAAA,gBAAAkqC,EAAAv3B,OAAA,yBAAAu3B,EAAAlqC,KAAA,GACmB6pC,IAAkB,QAA3B,GAAlBI,EAAkBC,EAAAnoB,MACd9rC,EAAM,CAAFi0D,EAAAlqC,KAAA,gBAAAkqC,EAAAv3B,OAAA,kBAAAu3B,EAAAlqC,KAAA,gBAEV4lB,EAAQ,CAAC+iB,OAAQ/pB,GAAkBurB,uBAAuB,yBAAAD,EAAA/pC,OAAA,GAAA6pC,EAAA,IAT5Dz3B,EAWF,IAAEk3B,EAEA/pD,KAAK0qD,kCAAkC,CAACjlB,WAAAA,EAAY7W,UAAAA,IAD/Ci6B,EAAiBkB,EAAjBlB,kBAAmBE,EAAmBgB,EAAnBhB,oBAEpBiB,EAAsBhqD,KAAK2qD,uBAAuB9kB,GAAYqkB,EAAA7pC,KAAA,EAAA6pC,EAAA5pC,KAAA,EAG5C2lB,QAAQ2kB,KAAK,CACjCZ,EACAjB,EACAe,IACA,OAJW,IAAPG,EAAOC,EAAA7nB,MAKD4mB,SAAW/pB,GAAkBgqB,UAAS,CAAAgB,EAAA5pC,KAAA,SAChDlT,EAAS68C,EAAQra,SAASsa,EAAA5pC,KAAA,uBAEpB,IAAI8T,GAA2CxF,GAAU,QAI7C,OAJ6Cs7B,EAAA7pC,KAAA,GAGjE9pB,GAAO,EACPsyD,IAAoBqB,EAAA1pC,OAAA,mBAAA0pC,EAAAj3B,OAAA,SAEf7lB,GAAM,yBAAA88C,EAAAzpC,OAAA,GAAAkpC,EAAA,uBACd,gBAAAkB,GAAA,OAAAnB,EAAA16D,MAAA,KAAAC,UAAA,EArDA,IAqDA,CAAAlB,IAAA,8CAAAC,MAAA,eAAA88D,GAAAj4B,EAAAA,GAAAA,GAAA3S,KAAAA,MAED,SAAA6qC,EAAA7yB,GAAA,IAAAuN,EAAAulB,EAAAnlB,EAAA/F,EAAAwF,EAAAQ,EAAAlX,EAAAr4B,EAAAuzD,EAAAmB,EAAApC,EAAAE,EAAAiB,EAAA58C,EAAA68C,EAAAiB,EAAAC,EAAAC,EAAA/lB,EAAAgmB,EAAAjV,EAAAtlD,EAAA,YAAAovB,KAAAA,MAAA,SAAAorC,GAAA,cAAAA,EAAAjrC,KAAAirC,EAAAhrC,MAAA,OA2DsE,OA1DpEmlB,EAAUvN,EAAVuN,WAAUulB,EAAA9yB,EACV0vB,SACE/hB,EAAWmlB,EAAXnlB,YACA/F,EAAckrB,EAAdlrB,eACAwF,EAAkB0lB,EAAlB1lB,mBACAQ,EAAUklB,EAAVllB,WACAlX,EAASo8B,EAATp8B,UAMEr4B,GAAgB,EACduzD,EAAgB,IAAI7jB,SAGvB,SAAAC,GACD,IAAIqlB,EAAwCzlB,EACxC0lB,EAAiC,KAC/BC,EAAoB,eAAAC,GAAA74B,EAAAA,GAAAA,GAAA3S,KAAAA,MAAG,SAAAyrC,IAAA,IAAAC,EAAAC,EAAAhlB,EAAA,OAAA3mB,KAAAA,MAAA,SAAA4rC,GAAA,cAAAA,EAAAzrC,KAAAyrC,EAAAxrC,MAAA,cAAAwrC,EAAAzrC,KAAA,EAAAyrC,EAAAxrC,KAAA,EAEoBxvB,EAAKi7D,mBAChDzmB,EACA,CACEG,WAAAA,EACA3F,eAAAA,IAEH,OAC8B,OAD9B8rB,EAAAE,EAAAzpB,KANMwpB,EAAOD,EAAPnxC,QAAgBosB,EAAY+kB,EAAnB59D,MAOhBw9D,EAAkBK,EAAQ/gB,KAAKghB,EAAA74B,OACxB,SAAY,OAAZ4T,QAAY,IAAZA,OAAY,EAAZA,EAAclT,OAAK,eAAAm4B,EAAAzrC,KAAA,GAAAyrC,EAAAvrC,GAAAurC,EAAA,SAAAA,EAAA74B,OAAA,SAInBs4B,GAAiB,yBAAAO,EAAArrC,OAAA,GAAAkrC,EAAA,mBAE3B,kBAhByB,OAAAD,EAAA18D,MAAA,KAAAC,UAAA,MAiB1B4jC,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAA8rC,IAAA,OAAA9rC,KAAAA,MAAA,SAAA+rC,GAAA,cAAAA,EAAA5rC,KAAA4rC,EAAA3rC,MAAA,cAAA2rC,EAAA3rC,KAAA,EAC2BmrC,IAAsB,OAA/B,GAAjBF,EAAiBU,EAAA5pB,MACb9rC,EAAM,CAAF01D,EAAA3rC,KAAA,eAAA2rC,EAAAh5B,OAAA,iBAED,GAED6S,IAAeylB,EAAiB,CAAAU,EAAA3rC,KAAA,QAI/B,OAHH4lB,EAAQ,CACN+iB,OAAQ/pB,GAAkBgtB,cAC1BC,2BAA4BX,IAC3BS,EAAAh5B,OAAA,wBAAAg5B,EAAA3rC,KAAA,GAGCylB,GAAM,KAAK,YACbxvC,EAAM,CAAF01D,EAAA3rC,KAAA,gBAAA2rC,EAAAh5B,OAAA,yBAAAg5B,EAAA3rC,KAAA,GACkBmrC,IAAsB,QAA/B,GAAjBF,EAAiBU,EAAA5pB,MACb9rC,EAAM,CAAF01D,EAAA3rC,KAAA,gBAAA2rC,EAAAh5B,OAAA,kBAAAg5B,EAAA3rC,KAAA,iCAAA2rC,EAAAxrC,OAAA,GAAAurC,EAAA,IAhBZn5B,EAmBF,IAAEo4B,EAEAjrD,KAAK0qD,kCAAkC,CAACjlB,WAAAA,EAAY7W,UAAAA,IAD/Ci6B,EAAiBoC,EAAjBpC,kBAAmBE,EAAmBkC,EAAnBlC,oBAEpBiB,EAAsBhqD,KAAK2qD,uBAAuB9kB,GAAYylB,EAAAjrC,KAAA,EAAAirC,EAAAhrC,KAAA,EAG5C2lB,QAAQ2kB,KAAK,CACjCZ,EACAjB,EACAe,IACA,OAJW,IAAPG,EAAOqB,EAAAjpB,MAKD4mB,SAAW/pB,GAAkBgqB,UAAS,CAAAoC,EAAAhrC,KAAA,SAChDlT,EAAS68C,EAAQra,SAAS0b,EAAAhrC,KAAA,iBAQnB,OAAAgrC,EAAAhrC,KAAA,GAEgBtgB,KAAKypD,mBAAmB76B,GAAU,QAA3C,GACE,OADRyW,EAAMimB,EAAAjpB,MACM,CAAAipB,EAAAhrC,KAAA,gBAAAgrC,EAAAr4B,OAAA,yBAIhBoS,EAAO5qB,QAAQqwB,MACoB,QADhBsgB,EAClBnB,EAAQkC,kCAA0B,IAAAf,EAAAA,EAAItrB,IAAe,CAAAwrB,EAAAhrC,KAAA,gBAAAgrC,EAAAhrC,KAAA,GAEhDylB,GAAM,KAAI,eAAAulB,EAAAr4B,OAAA,uBAGO,OAAzBk4B,EAAkB9lB,EAAOimB,EAAAr4B,OAAA,uBAGR,QAHQi4B,EAGvBC,SAAA,IAAeD,IAAfA,EAAiBl9D,MAAK,CAAAs9D,EAAAhrC,KAAA,SAClB+qC,EAAsB5lB,GAAc,YACnC2Q,EAAsB+U,EAAgBn9D,MAAtCooD,mBAAkBkV,EAAA/qC,GACjB8qC,EAAmBC,EAAAhrC,KACpB,cADoBgrC,EAAA/qC,IAEpB,WADW+qC,EAAA/qC,GAAA,GAUX,cATQ+qC,EAAA/qC,IAUR,WADW+qC,EAAA/qC,IAEX,iBADQ+qC,EAAA/qC,GADG,GAUX,cARc+qC,EAAA/qC,IASd,QADW+qC,EAAA/qC,IAEX,SADK+qC,EAAA/qC,GADM,GAEL,oBAnBgB,cAAvB61B,GACuB,cAAvBA,GACuB,cAAvBA,EAAkC,CAAAkV,EAAAhrC,KAAA,eAE5B,IAAIqU,GAAoC/F,GAAU,QAUA,QAOA,eAAA08B,EAAAr4B,OAAA,YAjBA,WAOjC,cAAvBmjB,GACuB,cAAvBA,EAAkC,CAAAkV,EAAAhrC,KAAA,eAE5B,IAAIqU,GAAoC/F,GAAU,WAM/B,cAAvBwnB,EAAkC,CAAAkV,EAAAhrC,KAAA,eAC9B,IAAIqU,GAAoC/F,GAAU,QAMlB,QAE5CxhB,EAAS,CACPqN,QAAS0wC,EAAgB1wC,QACzBzsB,MAAO,CAACyI,IAAK00D,EAAgBn9D,MAAMyI,MACnC60D,EAAAhrC,KAAA,uBAEI,IAAIqU,GAAoC/F,GAAU,QAKxC,OALwC08B,EAAAjrC,KAAA,GAI5D9pB,GAAO,EACPsyD,IAAoByC,EAAA9qC,OAAA,mBAAA8qC,EAAAr4B,OAAA,SAEf7lB,GAAM,yBAAAk+C,EAAA7qC,OAAA,GAAAsqC,EAAA,uBACd,gBAAAqB,GAAA,OAAAtB,EAAA97D,MAAA,KAAAC,UAAA,EA/IA,IA+IA,CAAAlB,IAAA,+CAAAC,MAAA,eAAAq+D,GAAAx5B,EAAAA,GAAAA,GAAA3S,KAAAA,MAED,SAAAosC,EAAAC,GAAA,IAAA9mB,EAAA7W,EAAA49B,EAAA1C,EAAA2C,EAAA5D,EAAAE,EAAA37C,EAAA68C,EAAA74D,EAAA,YAAA8uB,KAAAA,MAAA,SAAAwsC,GAAA,cAAAA,EAAArsC,KAAAqsC,EAAApsC,MAAA,OAgC+C,OA/B7CmlB,EAAU8mB,EAAV9mB,WACA7W,EAAS29B,EAAT39B,UAMMk7B,EAAgB,IAAI7jB,SAGvB,SAAAC,GACD,IAAIymB,EAAYv7D,EAAKopD,mCAAqC,IAC1D,OAAQ/U,GACN,IAAK,YACL,IAAK,SACL,IAAK,SACL,IAAK,YACL,IAAK,eACHknB,EAAYv7D,EAAKopD,mCAAqC,IAQ1DgS,EAAYrmB,YACV,kBAAMD,EAAQ,CAAC+iB,OAAQ/pB,GAAkB0tB,UAAWD,UAAAA,GAAW,GAC/DA,EAEJ,IAAEF,EAEAzsD,KAAK0qD,kCAAkC,CACrCjlB,WAAAA,EACA7W,UAAAA,IAHGi6B,EAAiB4D,EAAjB5D,kBAAmBE,EAAmB0D,EAAnB1D,oBAAmB2D,EAAArsC,KAAA,EAAAqsC,EAAApsC,KAAA,EAOrB2lB,QAAQ2kB,KAAK,CAAC7B,EAAqBe,IAAe,OAA3D,IAAPG,EAAOyC,EAAArqB,MACD4mB,SAAW/pB,GAAkBgqB,UAAS,CAAAwD,EAAApsC,KAAA,SAChDlT,EAAS68C,EAAQra,SAAS8c,EAAApsC,KAAA,uBAEpB,IAAIiU,GACR3F,EACAq7B,EAAQ0C,UAAY,KACrB,QAIiB,OAJjBD,EAAArsC,KAAA,GAGHwsC,aAAaL,GACb3D,IAAoB6D,EAAAlsC,OAAA,mBAAAksC,EAAAz5B,OAAA,SAEf7lB,GAAM,yBAAAs/C,EAAAjsC,OAAA,GAAA6rC,EAAA,uBACd,gBAAAQ,GAAA,OAAAT,EAAAr9D,MAAA,KAAAC,UAAA,EAvDA,IAyDD,CAAAlB,IAAA,kBAAAC,MAAA,eAAA++D,GAAAl6B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA8sC,IAAA,IAAAxQ,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA+sC,GAAA,cAAAA,EAAA5sC,KAAA4sC,EAAA3sC,MAAA,cAAA2sC,EAAA3sC,KAAA,EAC0BtgB,KAAK26C,YAAY,kBAAmB,IAAG,OACO,GADhE6B,EAASyQ,EAAA5qB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcxmC,GAAMmsC,QAChC,CAAA8X,EAAA3sC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,+BAA8B,cAAAuxC,EAAAh6B,OAEjE,SAAA1wB,EAAI6K,QAAM,wBAAA6/C,EAAAxsC,OAAA,GAAAusC,EAAA,UAClB,yBAAAD,EAAA/9D,MAAA,KAAAC,UAAA,EAVD,IAYA,CAAAlB,IAAA,kBAAAC,MAAA,eAAAk/D,GAAAr6B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAitC,EAAsB1nB,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAktC,GAAA,cAAAA,EAAA/sC,KAAA+sC,EAAA9sC,MAAA,OACC,OAAtC6Z,EAAOn6B,KAAKs8C,WAAW,GAAI7W,GAAW2nB,EAAA9sC,KAAA,EACpBtgB,KAAK26C,YAAY,kBAAmBxgB,GAAK,OACnB,GADxCqiB,EAAS4Q,EAAA/qB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW1G,MACZ,CAAAsX,EAAA9sC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,+BAA8B,cAAA0xC,EAAAn6B,OAEjE,SAAA1wB,EAAI6K,QAAM,wBAAAggD,EAAA3sC,OAAA,GAAA0sC,EAAA,UAClB,gBAAAE,GAAA,OAAAH,EAAAl+D,MAAA,KAAAC,UAAA,EAXD,IAaA,CAAAlB,IAAA,UAAAC,MAAA,eAAAs/D,GAAAz6B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAqtC,EACEpe,GAA+C,IAAAqe,EAAA/nB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAutC,GAAA,cAAAA,EAAAptC,KAAAotC,EAAAntC,MAAA,OAS9C,OAT8CktC,EAG7Cte,GAA4BC,GADvB1J,EAAU+nB,EAAV/nB,WAAYjC,EAAMgqB,EAANhqB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,GACA7W,OACAj2C,EACAg0C,GACDiqB,EAAAntC,KAAA,EACuBtgB,KAAK26C,YAAY,UAAWxgB,GAAK,OACH,GADhDqiB,EAASiR,EAAAprB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcjyC,SAC1B,CAAAkwD,EAAAntC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,sBAAqB,cAAA+xC,EAAAx6B,OAExD,SAAA1wB,EAAI6K,QAAM,wBAAAqgD,EAAAhtC,OAAA,GAAA8sC,EAAA,UAClB,gBAAAG,GAAA,OAAAJ,EAAAt+D,MAAA,KAAAC,UAAA,EApBD,IAsBA,CAAAlB,IAAA,gBAAAC,MAAA,eAAA2/D,GAAA96B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA0tC,EACEze,GAAqD,IAAA0e,EAAApoB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA4tC,GAAA,cAAAA,EAAAztC,KAAAytC,EAAAxtC,MAAA,OASpD,OAToDutC,EAGnD3e,GAA4BC,GADvB1J,EAAUooB,EAAVpoB,WAAYjC,EAAMqqB,EAANrqB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,GACA7W,OACAj2C,EACAg0C,GACDsqB,EAAAxtC,KAAA,EACuBtgB,KAAK26C,YAAY,gBAAiBxgB,GAAK,OACT,GADhDqiB,EAASsR,EAAAzrB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAc9jC,SAC1B,CAAAoiD,EAAAxtC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,6BAA4B,cAAAoyC,EAAA76B,OAE/D,SAAA1wB,EAAI6K,QAAM,wBAAA0gD,EAAArtC,OAAA,GAAAmtC,EAAA,UAClB,gBAAAG,GAAA,OAAAJ,EAAA3+D,MAAA,KAAAC,UAAA,EApBD,IAsBA,CAAAlB,IAAA,iBAAAC,MAAA,eAAAggE,GAAAn7B,EAAAA,GAAAA,GAAA3S,KAAAA,MAMA,SAAA+tC,EACEC,EACAC,GAAa,IAAAh0B,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAkuC,GAAA,cAAAA,EAAA/tC,KAAA+tC,EAAA9tC,MAAA,OAEkB,OAAzB6Z,EAAO,CAAC+zB,EAAWC,GAAMC,EAAA9tC,KAAA,EACPtgB,KAAK26C,YAAY,iBAAkBxgB,GAAK,OACQ,GADlEqiB,EAAS4R,EAAA/rB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcxmC,GAAM+lC,QAChC,CAAAqf,EAAA9tC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,8BAA6B,cAAA0yC,EAAAn7B,OAEhE,SAAA1wB,EAAI6K,QAAM,wBAAAghD,EAAA3tC,OAAA,GAAAwtC,EAAA,UAClB,gBAAAI,EAAAC,GAAA,OAAAN,EAAAh/D,MAAA,KAAAC,UAAA,EAjBD,IAmBA,CAAAlB,IAAA,qBAAAC,MAAA,eAAAugE,GAAA17B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAsuC,EACE5/B,EACA4U,GAA8B,IAAAirB,EAAAh0C,EAAAhsB,EAAAT,EAAA,OAAAkyB,KAAAA,MAAA,SAAAwuC,GAAA,cAAAA,EAAAruC,KAAAquC,EAAApuC,MAAA,cAAAouC,EAAApuC,KAAA,EAEStgB,KAAK2uD,qBAC1C,CAAC//B,GACD4U,GACD,OAEsB,OAFtBirB,EAAAC,EAAArsB,KAHM5nB,EAAOg0C,EAAPh0C,QAIP8H,GAAyB,KAJF9zB,EAAMggE,EAAbzgE,OAIFP,QACRO,EAAQS,EAAO,GAAEigE,EAAAz7B,OAChB,UAACxY,QAAAA,EAASzsB,MAAAA,IAAM,wBAAA0gE,EAAAjuC,OAAA,GAAA+tC,EAAA,UACxB,gBAAAI,EAAAC,GAAA,OAAAN,EAAAv/D,MAAA,KAAAC,UAAA,EAdD,IAgBA,CAAAlB,IAAA,uBAAAC,MAAA,eAAA8gE,GAAAj8B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA6uC,EACExvB,EACAiE,GAA8B,IAAA4E,EAAAoU,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA8uC,GAAA,cAAAA,EAAA3uC,KAAA2uC,EAAA1uC,MAAA,OAK7B,OAHK8nB,EAAgB,CAAC7I,GACnBiE,GACF4E,EAAO9yC,KAAKkuC,GACbwrB,EAAA1uC,KAAA,EACuBtgB,KAAK26C,YAAY,uBAAwBvS,GAAO,OACZ,GADtDoU,EAASwS,EAAA3sB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWnG,MACZ,CAAA2Y,EAAA1uC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,kCAAiC,cAAAszC,EAAA/7B,OAEpE,SAAA1wB,EAAI6K,QAAM,wBAAA4hD,EAAAvuC,OAAA,GAAAsuC,EAAA,UAClB,gBAAAE,EAAAC,GAAA,OAAAJ,EAAA9/D,MAAA,KAAAC,UAAA,EAjBD,IAmBA,CAAAlB,IAAA,sBAAAC,MAAA,eAAAmhE,GAAAt8B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAkvC,EACEjgB,GAA2D,IAAAkgB,EAAA5pB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAovC,GAAA,cAAAA,EAAAjvC,KAAAivC,EAAAhvC,MAAA,OAS1D,OAT0D+uC,EAGzDngB,GAA4BC,GADvB1J,EAAU4pB,EAAV5pB,WAAYjC,EAAM6rB,EAAN7rB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,GACA7W,OACAj2C,EACAg0C,GACD8rB,EAAAhvC,KAAA,EACuBtgB,KAAK26C,YAAY,sBAAuBxgB,GAAK,OACf,GADhDqiB,EAAS8S,EAAAjtB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcjyC,SAC1B,CAAA+xD,EAAAhvC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,mCACD,cAAA4zC,EAAAr8B,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAkiD,EAAA7uC,OAAA,GAAA2uC,EAAA,UAClB,gBAAAG,GAAA,OAAAJ,EAAAngE,MAAA,KAAAC,UAAA,EAvBD,IAyBA,CAAAlB,IAAA,iBAAAC,MAAA,eAAAwhE,GAAA38B,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAuvC,EAAqBhqB,GAAuB,IAAAr4B,EAAA,OAAA8S,KAAAA,MAAA,SAAAwvC,GAAA,cAAAA,EAAArvC,KAAAqvC,EAAApvC,MAAA,cAAAovC,EAAApvC,KAAA,EACrBtgB,KAAK2vD,UAAU,CAClClqB,WAAAA,EACAmqB,mCAAmC,IACnC,OAHU,OAANxiD,EAAMsiD,EAAArtB,KAAAqtB,EAAAz8B,OAAA,SAIL7lB,EAAOpf,MAAM2iD,OAAK,wBAAA+e,EAAAjvC,OAAA,GAAAgvC,EAAA,UAC1B,gBAAAI,GAAA,OAAAL,EAAAxgE,MAAA,KAAAC,UAAA,EAXD,IAaA,CAAAlB,IAAA,uBAAAC,MAAA,eAAA8hE,GAAAj9B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA6vC,EACEtqB,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA8vC,GAAA,cAAAA,EAAA3vC,KAAA2vC,EAAA1vC,MAAA,OAEqB,OAAtC6Z,EAAOn6B,KAAKs8C,WAAW,GAAI7W,GAAWuqB,EAAA1vC,KAAA,EACpBtgB,KAAK26C,YAAY,uBAAwBxgB,GAAK,OACV,GADtDqiB,EAASwT,EAAA3tB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWvK,MACZ,CAAA+d,EAAA1vC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,2BAA0B,cAAAs0C,EAAA/8B,OAE7D,SAAA1wB,EAAI6K,QAAM,wBAAA4iD,EAAAvvC,OAAA,GAAAsvC,EAAA,UAClB,gBAAAE,GAAA,OAAAH,EAAA9gE,MAAA,KAAAC,UAAA,EAbD,IAeA,CAAAlB,IAAA,qBAAAC,MAAA,eAAAkiE,GAAAr9B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAiwC,EACE33B,EACAwT,EACAmD,GAA0D,IAAAihB,EAAA3qB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAmwC,GAAA,cAAAA,EAAAhwC,KAAAgwC,EAAA/vC,MAAA,OAYzD,OAZyD8vC,EAGxDlhB,GAA4BC,GADvB1J,EAAU2qB,EAAV3qB,WAAYjC,EAAM4sB,EAAN5sB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,CAAC9jB,EAAUpzB,KAAI,SAAA4wB,GAAM,OAAIA,EAAOxD,eAChCiT,OACAj2C,EAAU+kB,GAAAA,GAAA,GAELivB,GAAM,IACTwI,MAAgB,MAATA,EAAgBA,EAAQ,OAAAxI,QAAA,IAAAA,OAAA,EAAAA,EAAQwI,SAE1CqkB,EAAA/vC,KAAA,EACuBtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OACb,GADjDqiB,EAAS6T,EAAAhuB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWrM,MACZ,CAAAkgB,EAAA/vC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,kCAAiC,cAAA20C,EAAAp9B,OAEpE,SAAA1wB,EAAI6K,QAAM,wBAAAijD,EAAA5vC,OAAA,GAAA0vC,EAAA,UAClB,gBAAAG,EAAAC,EAAAC,GAAA,OAAAN,EAAAlhE,MAAA,KAAAC,UAAA,EAzBD,IA2BA,CAAAlB,IAAA,mBAAAC,MAAA,eAAAyiE,GAAA59B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAwwC,IAAA,IAAAlU,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAywC,GAAA,cAAAA,EAAAtwC,KAAAswC,EAAArwC,MAAA,cAAAqwC,EAAArwC,KAAA,EAC0BtgB,KAAK26C,YAAY,mBAAoB,IAAG,OACR,GADlD6B,EAASmU,EAAAtuB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWtK,MACZ,CAAAye,EAAArwC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,gCAA+B,cAAAi1C,EAAA19B,OAElE,SAAA1wB,EAAI6K,QAAM,wBAAAujD,EAAAlwC,OAAA,GAAAiwC,EAAA,UAClB,yBAAAD,EAAAzhE,MAAA,KAAAC,UAAA,EAVD,IAYA,CAAAlB,IAAA,eAAAC,MAAA,eAAA4iE,GAAA/9B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA2wC,EACE1hB,GAAoD,IAAA2hB,EAAArrB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA6wC,GAAA,cAAAA,EAAA1wC,KAAA0wC,EAAAzwC,MAAA,OASnD,OATmDwwC,EAGlD5hB,GAA4BC,GADvB1J,EAAUqrB,EAAVrrB,WAAYjC,EAAMstB,EAANttB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,GACA7W,OACAj2C,EACAg0C,GACDutB,EAAAzwC,KAAA,EACuBtgB,KAAK26C,YAAY,eAAgBxgB,GAAK,OACV,GAD9CqiB,EAASuU,EAAA1uB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWpK,MACZ,CAAA2e,EAAAzwC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,4BAA2B,cAAAq1C,EAAA99B,OAE9D,SAAA1wB,EAAI6K,QAAM,wBAAA2jD,EAAAtwC,OAAA,GAAAowC,EAAA,UAClB,gBAAAG,GAAA,OAAAJ,EAAA5hE,MAAA,KAAAC,UAAA,EApBD,IAsBA,CAAAlB,IAAA,mBAAAC,MAAA,eAAAijE,GAAAp+B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAgxC,IAAA,IAAA1U,EAAAj6C,EAAA4uD,EAAA,OAAAjxC,KAAAA,MAAA,SAAAkxC,GAAA,cAAAA,EAAA/wC,KAAA+wC,EAAA9wC,MAAA,cAAA8wC,EAAA9wC,KAAA,EAC0BtgB,KAAK26C,YAAY,mBAAoB,IAAG,OACR,GADlD6B,EAAS4U,EAAA/uB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWnK,MACZ,CAAA+e,EAAA9wC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,gCAA+B,OAEzC,OAA1By1C,EAAgB5uD,EAAI6K,OAAMgkD,EAAAn+B,OACzB,aAAIwY,GACT0lB,EAAczlB,cACdylB,EAAcxlB,yBACdwlB,EAAcvlB,OACdulB,EAActlB,iBACdslB,EAAcrlB,kBACf,wBAAAslB,EAAA3wC,OAAA,GAAAywC,EAAA,UACF,yBAAAD,EAAAjiE,MAAA,KAAAC,UAAA,EAjBD,IAmBA,CAAAlB,IAAA,oBAAAC,MAAA,eAAAqjE,GAAAx+B,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAAoxC,IAAA,IAAA9U,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAqxC,GAAA,cAAAA,EAAAlxC,KAAAkxC,EAAAjxC,MAAA,cAAAixC,EAAAjxC,KAAA,EAC0BtgB,KAAK26C,YAAY,oBAAqB,IAAG,OACR,GADnD6B,EAAS+U,EAAAlvB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWlK,MACZ,CAAAif,EAAAjxC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,iCAAgC,cAAA61C,EAAAt+B,OAEnE,SAAA1wB,EAAI6K,QAAM,wBAAAmkD,EAAA9wC,OAAA,GAAA6wC,EAAA,UAClB,yBAAAD,EAAAriE,MAAA,KAAAC,UAAA,EAXD,IAaA,CAAAlB,IAAA,oCAAAC,MAAA,eAAAwjE,GAAA3+B,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAAuxC,EACEx2B,EACAwK,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAwxC,GAAA,cAAAA,EAAArxC,KAAAqxC,EAAApxC,MAAA,OAE+B,OAAhD6Z,EAAOn6B,KAAKs8C,WAAW,CAACrhB,GAAawK,GAAWisB,EAAApxC,KAAA,EAC9BtgB,KAAK26C,YAC3B,oCACAxgB,GACD,OACwE,GAJnEqiB,EAASkV,EAAArvB,OAKX,UADE9/B,EAAMlU,GAAOmuD,EAAWlG,MACZ,CAAAob,EAAApxC,KAAA,QACmD,OAAnE+f,QAAQC,KAAK,sDAAsDoxB,EAAAz+B,OAAA,SAC5D,GAAC,cAAAy+B,EAAAz+B,OAEH,SAAA1wB,EAAI6K,QAAM,wBAAAskD,EAAAjxC,OAAA,GAAAgxC,EAAA,UAClB,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAxiE,MAAA,KAAAC,UAAA,EAnBD,IAqBA,CAAAlB,IAAA,+BAAAC,MAAA,eAAA6jE,GAAAh/B,EAAAA,GAAAA,GAAA3S,KAAAA,MAMA,SAAA4xC,EAAmCrsB,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA6xC,GAAA,cAAAA,EAAA1xC,KAAA0xC,EAAAzxC,MAAA,OAMZ,OAAtC6Z,EAAOn6B,KAAKs8C,WAAW,GAAI7W,GAAWssB,EAAAzxC,KAAA,EACpBtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OACA,GAD9DqiB,EAASuV,EAAA1vB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWxD,MACZ,CAAA+Y,EAAAzxC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,kCAAiC,cAAAq2C,EAAA9+B,OAEpE,SAAA1wB,EAAI6K,QAAM,wBAAA2kD,EAAAtxC,OAAA,GAAAqxC,EAAA,UAClB,gBAAAE,GAAA,OAAAH,EAAA7iE,MAAA,KAAAC,UAAA,EAnBD,IAqBA,CAAAlB,IAAA,8BAAAC,MAAA,eAAAikE,GAAAp/B,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAAgyC,EACE/D,GAAc,IAAA3R,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAiyC,GAAA,cAAAA,EAAA9xC,KAAA8xC,EAAA7xC,MAAA,cAAA6xC,EAAA7xC,KAAA,EAEUtgB,KAAK26C,YAC3B,8BACAwT,EAAQ,CAACA,GAAS,IACnB,OACkE,GAJ7D3R,EAAS2V,EAAA9vB,OAKX,UADE9/B,EAAMlU,GAAOmuD,EAAWpD,MACZ,CAAA+Y,EAAA7xC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,4CACD,cAAAy2C,EAAAl/B,OAGI,SAAA1wB,EAAI6K,QAAM,wBAAA+kD,EAAA1xC,OAAA,GAAAyxC,EAAA,UAClB,gBAAAE,GAAA,OAAAH,EAAAjjE,MAAA,KAAAC,UAAA,EApBD,IAsBA,CAAAlB,IAAA,+BAAAC,MAAA,eAAAqkE,GAAAx/B,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAoyC,EACEvyB,EACA0F,GAAuB,IAAAtL,EAAAqiB,EAAAj6C,EAAAgwD,EAAA93C,EAAAzsB,EAAA,OAAAkyB,KAAAA,MAAA,SAAAsyC,GAAA,cAAAA,EAAAnyC,KAAAmyC,EAAAlyC,MAAA,OAE8B,OAA/C6Z,EAAOn6B,KAAKs8C,WAAW,CAACvc,GAAY0F,GAAW+sB,EAAAlyC,KAAA,EAC7BtgB,KAAK26C,YAC3B,+BACAxgB,GACD,OAEuD,GALlDqiB,EAASgW,EAAAnwB,OAMX,UADE9/B,EAAMlU,GAAOmuD,EAAWhD,MACZ,CAAAgZ,EAAAlyC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,gCAA+B,OAEpD,OAFoD62C,EAEhDhwD,EAAI6K,OAAtBqN,EAAO83C,EAAP93C,QAASzsB,EAAKukE,EAALvkE,MAAKwkE,EAAAv/B,OACd,UACLxY,QAAAA,EACAzsB,MAAiB,OAAVA,EAAiBA,EAAM44C,cAAgB,OAC/C,wBAAA4rB,EAAA/xC,OAAA,GAAA6xC,EAAA,UACF,gBAAAG,EAAAC,GAAA,OAAAL,EAAArjE,MAAA,KAAAC,UAAA,EAxBD,IA0BA,CAAAlB,IAAA,mBAAAC,MAAA,eAAA2kE,GAAA9/B,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA0yC,EACE/zC,EACA4mB,GAAuB,IAAAotB,EAAA14B,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA4yC,GAAA,cAAAA,EAAAzyC,KAAAyyC,EAAAxyC,MAAA,OAGgC,OADjDuyC,EAAczhC,GAASvS,EAAQ0S,aAAaj1B,SAAS,UACrD69B,EAAOn6B,KAAKs8C,WAAW,CAACuW,GAAcptB,GAAWqtB,EAAAxyC,KAAA,EAC/BtgB,KAAK26C,YAAY,mBAAoBxgB,GAAK,OAEQ,GAFpEqiB,EAASsW,EAAAzwB,OAGX,UADE9/B,EAAMlU,GAAOmuD,EAAW/M,GAAwBhsB,GAASlmB,UAC7C,CAAAu1D,EAAAxyC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,iCAAgC,UAEvD,OAAfnZ,EAAI6K,OAAe,CAAA0lD,EAAAxyC,KAAA,eACf,IAAIpxB,MAAM,qBAAoB,eAAA4jE,EAAA7/B,OAE/B,SAAA1wB,EAAI6K,QAAM,yBAAA0lD,EAAAryC,OAAA,GAAAmyC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAA3jE,MAAA,KAAAC,UAAA,EAnBD,IAqBA,CAAAlB,IAAA,8BAAAC,MAAA,eAAAilE,GAAApgC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAgzC,EACE1vB,GAA0C,IAAA2vB,EAAA34B,EAAAL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAkzC,GAAA,cAAAA,EAAA/yC,KAAA+yC,EAAA9yC,MAAA,OAGK,OADzCka,EAAiB,OAANgJ,QAAM,IAANA,GAA8B,QAAxB2vB,EAAN3vB,EAAQ6vB,8BAAR,IAA8BF,OAAxB,EAANA,EAAgC/tD,KAAI,SAAArX,GAAG,OAAIA,EAAIykC,cAC1D2H,EAAO,OAAAK,QAAA,IAAAA,GAAAA,EAAU/sC,OAAS,CAAC+sC,GAAY,GAAE44B,EAAA9yC,KAAA,EACvBtgB,KAAK26C,YAC3B,8BACAxgB,GACD,OACkE,GAJ7DqiB,EAAS4W,EAAA/wB,OAKX,UADE9/B,EAAMlU,GAAOmuD,EAAWrK,MACZ,CAAAihB,EAAA9yC,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,4CACD,cAAA03C,EAAAngC,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAgmD,EAAA3yC,OAAA,GAAAyyC,EAAA,UAClB,gBAAAI,GAAA,OAAAL,EAAAjkE,MAAA,KAAAC,UAAA,EApBD,IAqBA,CAAAlB,IAAA,qBAAAC,MAAA,eAAAulE,GAAA1gC,EAAAA,GAAAA,GAAA3S,KAAAA,MAMA,SAAAszC,EACE/tB,GAAuB,IAAAljC,EAAA,OAAA2d,KAAAA,MAAA,SAAAuzC,GAAA,cAAAA,EAAApzC,KAAAozC,EAAAnzC,MAAA,cAAAmzC,EAAApzC,KAAA,EAAAozC,EAAAnzC,KAAA,EAGHtgB,KAAK0zD,6BAA6BjuB,GAAW,OAAtD,OAAHljC,EAAGkxD,EAAApxB,KAAAoxB,EAAAxgC,OACF,SAAA1wB,EAAIvU,OAAK,aAAAylE,EAAApzC,KAAA,EAAAozC,EAAAlzC,GAAAkzC,EAAA,SAEV,IAAIvkE,MAAM,mCAAkCukE,EAAAlzC,IAAK,yBAAAkzC,EAAAhzC,OAAA,GAAA+yC,EAAA,kBAE1D,gBAAAG,GAAA,OAAAJ,EAAAvkE,MAAA,KAAAC,UAAA,EAfD,IAiBA,CAAAlB,IAAA,qBAAAC,MAAA,eAAA4lE,GAAA/gC,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAA2zC,EACE1kB,GAA0D,IAAA5sC,EAAA,OAAA2d,KAAAA,MAAA,SAAA4zC,GAAA,cAAAA,EAAAzzC,KAAAyzC,EAAAxzC,MAAA,cAAAwzC,EAAAzzC,KAAA,EAAAyzC,EAAAxzC,KAAA,EAGtCtgB,KAAK+zD,6BAA6B5kB,GAAmB,OAA9D,OAAH5sC,EAAGuxD,EAAAzxB,KAAAyxB,EAAA7gC,OACF,SAAA1wB,EAAIvU,OAAK,aAAA8lE,EAAAzzC,KAAA,EAAAyzC,EAAAvzC,GAAAuzC,EAAA,SAEV,IAAI5kE,MAAM,mCAAkC4kE,EAAAvzC,IAAK,yBAAAuzC,EAAArzC,OAAA,GAAAozC,EAAA,kBAE1D,gBAAAG,GAAA,OAAAJ,EAAA5kE,MAAA,KAAAC,UAAA,EAbD,IAeA,CAAAlB,IAAA,+BAAAC,MAAA,eAAAimE,GAAAphC,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAAg0C,EACE/kB,GAA0D,IAAAglB,EAAA1uB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAk0C,GAAA,cAAAA,EAAA/zC,KAAA+zC,EAAA9zC,MAAA,OASzD,OATyD6zC,EAGxDjlB,GAA4BC,GADvB1J,EAAU0uB,EAAV1uB,WAAYjC,EAAM2wB,EAAN3wB,OAEbrJ,EAAOn6B,KAAKs8C,WAChB,GACA7W,OACAj2C,EACAg0C,GACD4wB,EAAA9zC,KAAA,EACuBtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OACV,GADpDqiB,EAAS4X,EAAA/xB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWtD,MACZ,CAAAkb,EAAA9zC,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,kCAAiC,cAAA04C,EAAAnhC,OAEpE,SAAA1wB,EAAI6K,QAAM,wBAAAgnD,EAAA3zC,OAAA,GAAAyzC,EAAA,UAClB,gBAAAG,GAAA,OAAAJ,EAAAjlE,MAAA,KAAAC,UAAA,EArBD,IAuBA,CAAAlB,IAAA,mBAAAC,MAAA,eAAAsmE,GAAAzhC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAq0C,EACEx0B,EACAilB,GAAkC,IAAAwP,EAAA/uB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAu0C,GAAA,cAAAA,EAAAp0C,KAAAo0C,EAAAn0C,MAAA,OAQjC,OARiCk0C,EAELtlB,GAA4B8V,GAAlDvf,EAAU+uB,EAAV/uB,WAAYjC,EAAMgxB,EAANhxB,OACbrJ,EAAOn6B,KAAKs8C,WAChB,CAACvc,GACD0F,OACAj2C,EACAg0C,GACDixB,EAAAn0C,KAAA,EACuBtgB,KAAK26C,YAAY,mBAAoBxgB,GAAK,OACV,GADlDqiB,EAASiY,EAAApyB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWrD,MACZ,CAAAsb,EAAAn0C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,yCAA2CqkB,EAAY,aACxD,cAAA00B,EAAAxhC,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAqnD,EAAAh0C,OAAA,GAAA8zC,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAAtlE,MAAA,KAAAC,UAAA,EAvBD,IAyBA,CAAAlB,IAAA,aAAAC,MAAA,eAAA4mE,GAAA/hC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA20C,IAAA,IAAArY,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA40C,GAAA,cAAAA,EAAAz0C,KAAAy0C,EAAAx0C,MAAA,cAAAw0C,EAAAx0C,KAAA,EAC0BtgB,KAAK26C,YAAY,aAAc,IAAG,OACC,GADrD6B,EAASsY,EAAAzyB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAc+B,OAC1B,CAAAujB,EAAAx0C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,yBAAwB,cAAAo5C,EAAA7hC,OAE3D,SAAA1wB,EAAI6K,QAAM,wBAAA0nD,EAAAr0C,OAAA,GAAAo0C,EAAA,UAClB,yBAAAD,EAAA5lE,MAAA,KAAAC,UAAA,EAVD,IAYA,CAAAlB,IAAA,iBAAAC,MAAA,eAAA+mE,GAAAliC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA80C,IAAA,IAAAxY,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA+0C,GAAA,cAAAA,EAAA50C,KAAA40C,EAAA30C,MAAA,cAAA20C,EAAA30C,KAAA,EAC0BtgB,KAAK26C,YAAY,iBAAkB,IAAG,OACR,GADhD6B,EAASyY,EAAA5yB,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAc9jC,SAC1B,CAAAupD,EAAA30C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,8BAA6B,cAAAu5C,EAAAhiC,OAEhE,SAAA1wB,EAAI6K,QAAM,wBAAA6nD,EAAAx0C,OAAA,GAAAu0C,EAAA,UAClB,yBAAAD,EAAA/lE,MAAA,KAAAC,UAAA,EAVD,IAYA,CAAAlB,IAAA,WAAAC,MAuDA,eAAAknE,GAAAriC,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAAi1C,EACErqB,EACAka,GAAmC,IAAAoQ,EAAA3vB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA8yD,EAAAC,EAAAloD,EAAA,OAAA8S,KAAAA,MAAA,SAAAq1C,GAAA,cAAAA,EAAAl1C,KAAAk1C,EAAAj1C,MAAA,OAalC,OAbkC80C,EAONlmB,GAA4B8V,GAAlDvf,EAAU2vB,EAAV3vB,WAAYjC,EAAM4xB,EAAN5xB,OACbrJ,EAAOn6B,KAAKw1D,2BAChB,CAAC1qB,GACDrF,OACAj2C,EACAg0C,GACD+xB,EAAAj1C,KAAA,EACuBtgB,KAAK26C,YAAY,WAAYxgB,GAAK,OAApDqiB,EAAS+Y,EAAAlzB,KAAAkzB,EAAAl1C,KAAG,EAAHk1C,EAAAh1C,GAEC,OAANijB,QAAM,IAANA,OAAM,EAANA,EAAQiyB,mBAAkBF,EAAAj1C,KAC3B,aAD2Bi1C,EAAAh1C,GACjB,EAOV,SAPUg1C,EAAAh1C,GAOJ,mBANmD,KACxD,UADEhe,EAAMlU,GAAOmuD,EAAWhE,MACZ,CAAA+c,EAAAj1C,KAAA,eACV/d,EAAImZ,MAAK,eAAA65C,EAAAtiC,OAEV,SAAA1wB,EAAI6K,QAAM,QAGuC,KACpD,UADEioD,EAAMhnE,GAAOmuD,EAAWjE,MACZ,CAAAgd,EAAAj1C,KAAA,eACV+0C,EAAI35C,MAAK,eAAA65C,EAAAtiC,OAEV,SAAAoiC,EAAIjoD,QAAM,QAG+B,KAC5C,UADEkoD,EAAMjnE,GAAOmuD,EAAWrE,MACZ,CAAAod,EAAAj1C,KAAA,eACVg1C,EAAI55C,MAAK,QAEJ,OAANtO,EAAUkoD,EAAVloD,OAAMmoD,EAAAtiC,OACN,SAAA7lB,EAAMmH,GAAAA,GAAA,GAEJnH,GAAM,IACTu8B,aAAcv8B,EAAOu8B,aAAavkC,KAChC,SAAAgzB,GAAA,IAAEkD,EAAWlD,EAAXkD,YAAavF,EAAIqC,EAAJrC,KAAMkJ,EAAO7G,EAAP6G,QAAO,MAAO,CACjClJ,KAAAA,EACAuF,YAAW/mB,GAAAA,GAAA,GACN+mB,GAAW,IACdzc,QAAS8wB,GACP1Q,EACA3D,EAAYzc,WAGhBogB,QAAAA,QAIN,MAAI,QAAAs2B,EAAAj1C,KAAA,uBAAAi1C,EAAAl1C,KAAA,GAAAk1C,EAAA1zC,GAAA0zC,EAAA,SAIN,IAAI/oB,GAAkB+oB,EAAA1zC,GAE1B,iCACD,yBAAA0zC,EAAA90C,OAAA,GAAA00C,EAAA,mBAEJ,gBAAAO,EAAAC,GAAA,OAAAT,EAAAlmE,MAAA,KAAAC,UAAA,EAlED,IAoEA,CAAAlB,IAAA,iBAAAC,MAmBA,eAAA4nE,GAAA/iC,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAA21C,EACE/qB,EACAka,GAAmC,IAAA8Q,EAAArwB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAAwzD,EAAAC,EAAA,OAAA91C,KAAAA,MAAA,SAAA+1C,GAAA,cAAAA,EAAA51C,KAAA41C,EAAA31C,MAAA,OAalC,OAbkCw1C,EAON5mB,GAA4B8V,GAAlDvf,EAAUqwB,EAAVrwB,WAAYjC,EAAMsyB,EAANtyB,OACbrJ,EAAOn6B,KAAKw1D,2BAChB,CAAC1qB,GACDrF,EACA,aACAjC,GACDyyB,EAAA31C,KAAA,EACuBtgB,KAAK26C,YAAY,WAAYxgB,GAAK,OAApDqiB,EAASyZ,EAAA5zB,KAAA4zB,EAAA51C,KAAG,EAAH41C,EAAA11C,GAEC,OAANijB,QAAM,IAANA,OAAM,EAANA,EAAQiyB,mBAAkBQ,EAAA31C,KAC3B,aAD2B21C,EAAA11C,GACjB,EAOV,SAPU01C,EAAA11C,GAOJ,mBANyD,KAC9D,UADEhe,EAAMlU,GAAOmuD,EAAW9D,MACZ,CAAAud,EAAA31C,KAAA,eACV/d,EAAImZ,MAAK,eAAAu6C,EAAAhjC,OAEV,SAAA1wB,EAAI6K,QAAM,QAG6C,KAC1D,UADE2oD,EAAM1nE,GAAOmuD,EAAW7D,MACZ,CAAAsd,EAAA31C,KAAA,eACVy1C,EAAIr6C,MAAK,eAAAu6C,EAAAhjC,OAEV,SAAA8iC,EAAI3oD,QAAM,QAGqC,KAClD,UADE4oD,EAAM3nE,GAAOmuD,EAAW/D,MACZ,CAAAwd,EAAA31C,KAAA,eACV01C,EAAIt6C,MAAK,eAAAu6C,EAAAhjC,OAEV,SAAA+iC,EAAI5oD,QAAM,QAAA6oD,EAAA31C,KAAA,uBAAA21C,EAAA51C,KAAA,GAAA41C,EAAAp0C,GAAAo0C,EAAA,SAIf,IAAIzpB,GAAkBypB,EAAAp0C,GAAoB,uBAAsB,yBAAAo0C,EAAAx1C,OAAA,GAAAo1C,EAAA,mBAEzE,gBAAAK,EAAAC,GAAA,OAAAP,EAAA5mE,MAAA,KAAAC,UAAA,EA7CD,IA6CC,CAAAlB,IAAA,qBAAAC,MAwCD,eAAAooE,GAAAvjC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAm2C,EACE3P,GAA0D,IAAA4P,EAAA7wB,EAAA/zB,EAAAoN,EAAAqb,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAq2C,GAAA,cAAAA,EAAAl2C,KAAAk2C,EAAAj2C,MAAA,OAaG,MAR3B,kBAAvBomC,EACTjhB,EAAaihB,EACJA,IACUh1C,EAAcg1C,EAA1BjhB,WAAkB3mB,GAAIC,EAAAA,GAAAA,GAAI2nC,EAAkB8P,IACnD/wB,EAAa/zB,EACb4kD,EAAQx3C,GAGJqb,EAAOn6B,KAAKs8C,WAAW,GAAI7W,EAAY,SAAU6wB,GAAMC,EAAAj2C,KAAA,EACrCtgB,KAAK26C,YAAY,qBAAsBxgB,GAAK,OACR,GADtDqiB,EAAS+Z,EAAAl0B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW5K,MACZ,CAAA2kB,EAAAj2C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,8CACD,cAAA66C,EAAAtjC,OAGI,SAAA1wB,EAAI6K,QAAM,wBAAAmpD,EAAA91C,OAAA,GAAA41C,EAAA,UAClB,gBAAAI,GAAA,OAAAL,EAAApnE,MAAA,KAAAC,UAAA,EA5BD,IA8BA,CAAAlB,IAAA,iBAAAC,MAwBA,eAAA0oE,GAAA7jC,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAAy2C,EACE/nC,EACAo2B,GAAyC,IAAA4R,EAAAnxB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA6K,EAAA,OAAA8S,KAAAA,MAAA,SAAA22C,GAAA,cAAAA,EAAAx2C,KAAAw2C,EAAAv2C,MAAA,OAQxC,OARwCs2C,EAEZ1nB,GAA4B8V,GAAlDvf,EAAUmxB,EAAVnxB,WAAYjC,EAAMozB,EAANpzB,OACbrJ,EAAOn6B,KAAKw1D,2BAChB,CAAC5mC,GACD6W,OACAj2C,EACAg0C,GACDqzB,EAAAv2C,KAAA,EACuBtgB,KAAK26C,YAAY,iBAAkBxgB,GAAK,OACV,GADhDqiB,EAASqa,EAAAx0B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW1D,MACZ,CAAA+d,EAAAv2C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,6BAA4B,OAG7C,GAAnBtO,EAAS7K,EAAI6K,OACN,CAAFypD,EAAAv2C,KAAA,gBAAAu2C,EAAA5jC,OAAA,SAAS7lB,GAAM,eAAAypD,EAAA5jC,OAAA,SAAA1e,GAAAA,GAAA,GAGrBnH,GAAM,IACTkuB,YAAW/mB,GAAAA,GACN,GAAAnH,EAAOkuB,aAAW,IACrBzc,QAAS8wB,GACPviC,EAAO6xB,QACP7xB,EAAOkuB,YAAYzc,cAEtB,yBAAAg4C,EAAAp2C,OAAA,GAAAk2C,EAAA,UAEJ,gBAAAG,EAAAC,GAAA,OAAAL,EAAA1nE,MAAA,KAAAC,UAAA,EA/BD,IAiCA,CAAAlB,IAAA,uBAAAC,MAAA,eAAAgpE,GAAAnkC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA+2C,EACEroC,EACAugB,GAA6D,IAAA+nB,EAAAzxB,EAAAjC,EAAArJ,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAi3C,GAAA,cAAAA,EAAA92C,KAAA82C,EAAA72C,MAAA,OAS5D,OAT4D42C,EAG3DhoB,GAA4BC,GADvB1J,EAAUyxB,EAAVzxB,WAAYjC,EAAM0zB,EAAN1zB,OAEbrJ,EAAOn6B,KAAKw1D,2BAChB,CAAC5mC,GACD6W,EACA,aACAjC,GACD2zB,EAAA72C,KAAA,EACuBtgB,KAAK26C,YAAY,iBAAkBxgB,GAAK,OACJ,GADtDqiB,EAAS2a,EAAA90B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWzD,MACZ,CAAAoe,EAAA72C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,6BAA4B,cAAAy7C,EAAAlkC,OAE/D,SAAA1wB,EAAI6K,QAAM,wBAAA+pD,EAAA12C,OAAA,GAAAw2C,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAAhoE,MAAA,KAAAC,UAAA,EArBD,IAuBA,CAAAlB,IAAA,wBAAAC,MAAA,eAAAspE,GAAAzkC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAq3C,EACEh4B,EACA4P,GAA6D,IAAAqoB,EAAA/xB,EAAAjC,EAAAwb,EAAAxC,EAAAj6C,EAAA7Q,EAAA,YAAAwuB,KAAAA,MAAA,SAAAu3C,GAAA,cAAAA,EAAAp3C,KAAAo3C,EAAAn3C,MAAA,OAe3D,OAf2Dk3C,EAG3DtoB,GAA4BC,GADvB1J,EAAU+xB,EAAV/xB,WAAYjC,EAAMg0B,EAANh0B,OAEbwb,EAAQzf,EAAWn6B,KAAI,SAAAwpB,GAO3B,MAAO,CACLqwB,WAAY,iBACZ9kB,KARWzoC,EAAK8jE,2BAChB,CAAC5mC,GACD6W,EACA,aACAjC,GAMJ,IAAEi0B,EAAAn3C,KAAA,EAEsBtgB,KAAK46C,iBAAiBoE,GAAM,OAOlD,OAPIxC,EAASib,EAAAp1B,KACT9/B,EAAMi6C,EAAUp3C,KAAI,SAACo3C,GACzB,IAAMj6C,EAAMlU,GAAOmuD,EAAWzD,IAC9B,GAAI,UAAWx2C,EACb,MAAM,IAAIiqC,GAAmBjqC,EAAImZ,MAAO,8BAE1C,OAAOnZ,EAAI6K,MACb,IAAEqqD,EAAAxkC,OAAA,SAEK1wB,GAAG,wBAAAk1D,EAAAh3C,OAAA,GAAA82C,EAAA,UACX,gBAAAG,EAAAC,GAAA,OAAAL,EAAAtoE,MAAA,KAAAC,UAAA,EAhCD,IAkCA,CAAAlB,IAAA,kBAAAC,MA6BA,eAAA4pE,GAAA/kC,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAA23C,EACEt4B,EACA4P,GAA4D,IAAA2oB,EAAAryB,EAAAjC,EAAAwb,EAAAxC,EAAAj6C,EAAAtN,EAAA,YAAAirB,KAAAA,MAAA,SAAA63C,GAAA,cAAAA,EAAA13C,KAAA03C,EAAAz3C,MAAA,OAe1D,OAf0Dw3C,EAG1D5oB,GAA4BC,GADvB1J,EAAUqyB,EAAVryB,WAAYjC,EAAMs0B,EAANt0B,OAEbwb,EAAQzf,EAAWn6B,KAAI,SAAAwpB,GAO3B,MAAO,CACLqwB,WAAY,iBACZ9kB,KARWllC,EAAKugE,2BAChB,CAAC5mC,GACD6W,OACAj2C,EACAg0C,GAMJ,IAAEu0B,EAAAz3C,KAAA,EAEsBtgB,KAAK46C,iBAAiBoE,GAAM,OAmBlD,OAnBIxC,EAASub,EAAA11B,KACT9/B,EAAMi6C,EAAUp3C,KAAI,SAACo3C,GACzB,IAAMj6C,EAAMlU,GAAOmuD,EAAW1D,IAC9B,GAAI,UAAWv2C,EACb,MAAM,IAAIiqC,GAAmBjqC,EAAImZ,MAAO,8BAE1C,IAAMtO,EAAS7K,EAAI6K,OACnB,OAAKA,EAELmH,GAAAA,GAAA,GACKnH,GAAM,IACTkuB,YAAW/mB,GAAAA,GACN,GAAAnH,EAAOkuB,aAAW,IACrBzc,QAAS8wB,GACPviC,EAAO6xB,QACP7xB,EAAOkuB,YAAYzc,aARLzR,CAYtB,IAAE2qD,EAAA9kC,OAAA,SAEK1wB,GAAG,wBAAAw1D,EAAAt3C,OAAA,GAAAo3C,EAAA,UACX,gBAAAG,EAAAC,GAAA,OAAAL,EAAA5oE,MAAA,KAAAC,UAAA,EA1CD,IA4CA,CAAAlB,IAAA,oBAAAC,MAAA,eAAAkqE,GAAArlC,EAAAA,GAAAA,GAAA3S,KAAAA,MAMA,SAAAi4C,EACErtB,EACArF,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA6K,EAAAgrD,EAAA,OAAAl4C,KAAAA,MAAA,SAAAm4C,GAAA,cAAAA,EAAAh4C,KAAAg4C,EAAA/3C,MAAA,OAE2C,OAA1D6Z,EAAOn6B,KAAKw1D,2BAA2B,CAAC1qB,GAAOrF,GAAW4yB,EAAA/3C,KAAA,EACxCtgB,KAAK26C,YAAY,oBAAqBxgB,GAAK,OACV,GADnDqiB,EAAS6b,EAAAh2B,OAGX,UAFE9/B,EAAMlU,GAAOmuD,EAAW5D,MAEZ,CAAAyf,EAAA/3C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,iCAAgC,OAGjD,GAAnBtO,EAAS7K,EAAI6K,OACN,CAAFirD,EAAA/3C,KAAA,eACH,IAAIpxB,MAAM,mBAAqB47C,EAAO,cAAa,QAcvD,OAXEstB,EAAK7jD,GAAAA,GAAA,GACNnH,GAAM,IACTu8B,aAAcv8B,EAAOu8B,aAAavkC,KAAI,SAAAkzD,GAAyB,IAAvBh9B,EAAWg9B,EAAXh9B,YAAavF,EAAIuiC,EAAJviC,KAC7ClX,EAAU,IAAIqb,GAAQoB,EAAYzc,SACxC,MAAO,CACLkX,KAAAA,EACAuF,YAAW/mB,GAAAA,GAAA,GACN+mB,GAAW,IACdzc,QAAAA,UAGJw5C,EAAAplC,OAAA,SAAA1e,GAAAA,GAAA,GAIC6jD,GAAK,IACRzuB,aAAcyuB,EAAMzuB,aAAavkC,KAAI,SAAAmzD,GAAyB,IAAvBj9B,EAAWi9B,EAAXj9B,YACrC,MAAO,CACLvF,KAFoDwiC,EAAJxiC,KAGhDuF,YAAagE,GAAY0E,SACvB1I,EAAYzc,QACZyc,EAAYiE,mBAGhB,yBAAA84B,EAAA53C,OAAA,GAAA03C,EAAA,UAEL,gBAAAK,EAAAC,GAAA,OAAAP,EAAAlpE,MAAA,KAAAC,UAAA,EAjDD,IAmDA,CAAAlB,IAAA,YAAAC,MAAA,eAAA0qE,GAAA7lC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAy4C,EACEzK,EACA0K,EACAnzB,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA24C,GAAA,cAAAA,EAAAx4C,KAAAw4C,EAAAv4C,MAAA,OAKpB,OAHK6Z,EAAOn6B,KAAKw1D,gCACJhmE,IAAZopE,EAAwB,CAAC1K,EAAW0K,GAAW,CAAC1K,GAChDzoB,GACDozB,EAAAv4C,KAAA,EACuBtgB,KAAK26C,YAAY,YAAaxgB,GAAK,OACE,GADvDqiB,EAASqc,EAAAx2B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhN,GAAcxmC,GAAMzL,UAChC,CAAAs7D,EAAAv4C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,wBAAuB,cAAAm9C,EAAA5lC,OAE1D,SAAA1wB,EAAI6K,QAAM,wBAAAyrD,EAAAp4C,OAAA,GAAAk4C,EAAA,UAClB,gBAAAG,EAAAC,EAAAC,GAAA,OAAAN,EAAA1pE,MAAA,KAAAC,UAAA,EAlBD,IAoBA,CAAAlB,IAAA,qBAAAC,MAAA,eAAAirE,GAAApmC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAg5C,EACEpuB,EACArF,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA6K,EAAA,OAAA8S,KAAAA,MAAA,SAAAi5C,GAAA,cAAAA,EAAA94C,KAAA84C,EAAA74C,MAAA,OAUpB,OARK6Z,EAAOn6B,KAAKw1D,2BAChB,CAAC1qB,GACDrF,OACAj2C,EACA,CACEimE,mBAAoB,aACpBnd,SAAS,IAEZ6gB,EAAA74C,KAAA,EACuBtgB,KAAK26C,YAAY,WAAYxgB,GAAK,OACA,GADpDqiB,EAAS2c,EAAA92B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW3D,MACZ,CAAAsgB,EAAA74C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,uBAAsB,OAEvC,GAAnBtO,EAAS7K,EAAI6K,OACN,CAAF+rD,EAAA74C,KAAA,eACH,IAAIpxB,MAAM,SAAW47C,EAAO,cAAa,eAAAquB,EAAAlmC,OAAA,SAE1C7lB,GAAM,yBAAA+rD,EAAA14C,OAAA,GAAAy4C,EAAA,UACd,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAjqE,MAAA,KAAAC,UAAA,EA1BD,IA4BA,CAAAlB,IAAA,8BAAAC,MAAA,eAAAsrE,GAAAzmC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAq5C,EACEzuB,EACArF,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA6K,EAAA,OAAA8S,KAAAA,MAAA,SAAAs5C,GAAA,cAAAA,EAAAn5C,KAAAm5C,EAAAl5C,MAAA,OAUpB,OARK6Z,EAAOn6B,KAAKw1D,2BAChB,CAAC1qB,GACDrF,OACAj2C,EACA,CACEimE,mBAAoB,aACpBnd,SAAS,IAEZkhB,EAAAl5C,KAAA,EACuBtgB,KAAK26C,YAAY,oBAAqBxgB,GAAK,OACT,GADpDqiB,EAASgd,EAAAn3B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW3D,MACZ,CAAA2gB,EAAAl5C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,iCAAgC,OAEjD,GAAnBtO,EAAS7K,EAAI6K,OACN,CAAFosD,EAAAl5C,KAAA,eACH,IAAIpxB,MAAM,mBAAqB47C,EAAO,cAAa,eAAA0uB,EAAAvmC,OAAA,SAEpD7lB,GAAM,yBAAAosD,EAAA/4C,OAAA,GAAA84C,EAAA,UACd,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAtqE,MAAA,KAAAC,UAAA,EA5BD,IA8BA,CAAAlB,IAAA,0BAAAC,MAAA,eAAA2rE,GAAA9mC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAA05C,EACEhrC,EACA6W,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA6K,EAAAyR,EAAA0gB,EAAA,OAAArf,KAAAA,MAAA,SAAA25C,GAAA,cAAAA,EAAAx5C,KAAAw5C,EAAAv5C,MAAA,OAEgD,OAA/D6Z,EAAOn6B,KAAKw1D,2BAA2B,CAAC5mC,GAAY6W,GAAWo0B,EAAAv5C,KAAA,EAC7CtgB,KAAK26C,YAAY,0BAA2BxgB,GAAK,OACnB,GADhDqiB,EAASqd,EAAAx3B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW1D,MACZ,CAAA+gB,EAAAv5C,KAAA,cACV,IAAIksB,GAAmBjqC,EAAImZ,MAAO,6BAA4B,OAG7C,GAAnBtO,EAAS7K,EAAI6K,OACN,CAAFysD,EAAAv5C,KAAA,gBAAAu5C,EAAA5mC,OAAA,SAAS7lB,GAAM,QAGsB,OAD1CyR,EAAU,IAAIqb,GAAQ9sB,EAAOkuB,YAAYzc,SACzC0gB,EAAanyB,EAAOkuB,YAAYiE,WAAUs6B,EAAA5mC,OAAA,SAAA1e,GAAAA,GAAA,GAE3CnH,GAAM,IACTkuB,YAAagE,GAAY0E,SAASnlB,EAAS0gB,MAAW,yBAAAs6B,EAAAp5C,OAAA,GAAAm5C,EAAA,UAEzD,gBAAAE,EAAAC,GAAA,OAAAJ,EAAA3qE,MAAA,KAAAC,UAAA,EAzBD,IA2BA,CAAAlB,IAAA,gCAAAC,MAAA,eAAAgsE,GAAAnnC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAA+5C,EACErrC,EACA6W,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAg6C,GAAA,cAAAA,EAAA75C,KAAA65C,EAAA55C,MAAA,OAMpB,OAJK6Z,EAAOn6B,KAAKw1D,2BAChB,CAAC5mC,GACD6W,EACA,cACDy0B,EAAA55C,KAAA,EACuBtgB,KAAK26C,YAAY,0BAA2BxgB,GAAK,OACb,GADtDqiB,EAAS0d,EAAA73B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWzD,MACZ,CAAAmhB,EAAA55C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,uCACD,cAAAw+C,EAAAjnC,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA8sD,EAAAz5C,OAAA,GAAAw5C,EAAA,UAClB,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAhrE,MAAA,KAAAC,UAAA,EAvBD,IAyBA,CAAAlB,IAAA,iCAAAC,MAAA,eAAAqsE,GAAAxnC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAo6C,EACE/6B,EACAkG,GAAqB,IAAAuZ,EAAAxC,EAAAj6C,EAAAxM,EAAA,YAAAmqB,KAAAA,MAAA,SAAAq6C,GAAA,cAAAA,EAAAl6C,KAAAk6C,EAAAj6C,MAAA,OAYnB,OAVI0+B,EAAQzf,EAAWn6B,KAAI,SAAAwpB,GAM3B,MAAO,CACLqwB,WAAY,0BACZ9kB,KAPWpkC,EAAKy/D,2BAChB,CAAC5mC,GACD6W,EACA,cAMJ,IAAE80B,EAAAj6C,KAAA,EAEsBtgB,KAAK46C,iBAAiBoE,GAAM,OAUlD,OAVIxC,EAAS+d,EAAAl4B,KACT9/B,EAAMi6C,EAAUp3C,KAAI,SAACo3C,GACzB,IAAMj6C,EAAMlU,GAAOmuD,EAAWzD,IAC9B,GAAI,UAAWx2C,EACb,MAAM,IAAIiqC,GACRjqC,EAAImZ,MACJ,wCAGJ,OAAOnZ,EAAI6K,MACb,IAAEmtD,EAAAtnC,OAAA,SAEK1wB,GAAG,wBAAAg4D,EAAA95C,OAAA,GAAA65C,EAAA,UACX,gBAAAE,EAAAC,GAAA,OAAAJ,EAAArrE,MAAA,KAAAC,UAAA,EAlCD,IAoCA,CAAAlB,IAAA,mCAAAC,MAAA,eAAA0sE,GAAA7nC,EAAAA,GAAAA,GAAA3S,KAAAA,MAUA,SAAAy6C,EACEjnC,EACAw6B,EACA0K,GAAe,IAAA19C,EAAA0/C,EAAAxC,EAAAyC,EAAAC,EAAAC,EAAA,OAAA76C,KAAAA,MAAA,SAAA86C,GAAA,cAAAA,EAAA36C,KAAA26C,EAAA16C,MAAA,OAEM,OAAjBpF,EAAe,CAAC,EAAC8/C,EAAA16C,KAAA,EAEWtgB,KAAKi7D,yBAAwB,OAAzDL,EAAmBI,EAAA34B,KAAA,UACd,UAAWnnB,EAAO,CAAA8/C,EAAA16C,KAAA,SACb,OAAZ4tC,GACiB,GAAKA,EAAY0M,GAAmB,CAAAI,EAAA16C,KAAA,eAAA06C,EAAA/nC,OAAA,0BAAA+nC,EAAA36C,KAAA,EAAA26C,EAAA16C,KAAA,GAK/BtgB,KAAKk7D,4BACvBhN,EACA,aACD,SAHKkK,EAAK4C,EAAA34B,MAID9C,WAAW9xC,OAAS,IAC5BytB,EAAQigD,MACN/C,EAAM74B,WAAW64B,EAAM74B,WAAW9xC,OAAS,GAAG6O,YACjD0+D,EAAA16C,KAAA,oBAAA06C,EAAA36C,KAAA,GAAA26C,EAAAz6C,GAAAy6C,EAAA,WAEGA,EAAAz6C,cAAerxB,OAAS8rE,EAAAz6C,GAAI1B,QAAQ/gB,SAAS,YAAU,CAAAk9D,EAAA16C,KAAA,gBAAA06C,EAAA/nC,OAAA,4BAAA+nC,EAAAz6C,GAAA,QAAAy6C,EAAA16C,KAAA,uBAAA06C,EAAA16C,KAAA,GAQ9BtgB,KAAK6qC,QAAQ,aAAY,QAAtDgwB,EAAoBG,EAAA34B,KAAA,WACf,WAAYnnB,EAAO,CAAA8/C,EAAA16C,KAAA,SAChB,OAAVs4C,EACciC,GAAoB,CAAAG,EAAA16C,KAAA,gBAAA06C,EAAA/nC,OAAA,2BAAA+nC,EAAA36C,KAAA,GAAA26C,EAAA16C,KAAA,GAKZtgB,KAAKk7D,4BAA4BtC,GAAQ,SAAvDkC,EAAKE,EAAA34B,MACD9C,WAAW9xC,OAAS,IAC5BytB,EAAQkgD,OACNN,EAAMv7B,WAAWu7B,EAAMv7B,WAAW9xC,OAAS,GAAG6O,YACjD0+D,EAAA16C,KAAA,oBAAA06C,EAAA36C,KAAA,GAAA26C,EAAAn5C,GAAAm5C,EAAA,YAEGA,EAAAn5C,cAAe3yB,OAAS8rE,EAAAn5C,GAAIhD,QAAQ/gB,SAAS,YAAU,CAAAk9D,EAAA16C,KAAA,gBAAA06C,EAAA/nC,OAAA,6BAAA+nC,EAAAn5C,GAAA,QAAAm5C,EAAA16C,KAAA,wBAAA06C,EAAA16C,KAAA,GAQ1BtgB,KAAKq7D,kCACxC3nC,EACAxY,GACD,QAH2B,OAAtB6/C,EAAsBC,EAAA34B,KAAA24B,EAAA/nC,OAAA,SAIrB8nC,EAAuB31D,KAAI,SAAAq4C,GAAI,OAAIA,EAAK7uB,cAAU,yBAAAosC,EAAAv6C,OAAA,GAAAk6C,EAAA,2BAC1D,gBAAAW,EAAAC,EAAAC,GAAA,OAAAd,EAAA1rE,MAAA,KAAAC,UAAA,EArED,IAuEA,CAAAlB,IAAA,oCAAAC,MAAA,eAAAytE,GAAA5oC,EAAAA,GAAAA,GAAA3S,KAAAA,MAQA,SAAAw7C,EACEhoC,EACAxY,EACAuqB,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAy7C,GAAA,cAAAA,EAAAt7C,KAAAs7C,EAAAr7C,MAAA,OAOpB,OALK6Z,EAAOn6B,KAAKw1D,2BAChB,CAAC9hC,EAAQlB,YACTiT,OACAj2C,EACA0rB,GACDygD,EAAAr7C,KAAA,EACuBtgB,KAAK26C,YAC3B,oCACAxgB,GACD,OACwE,GAJnEqiB,EAASmf,EAAAt5B,OAKX,UADE9/B,EAAMlU,GAAOmuD,EAAW1I,MACZ,CAAA6nB,EAAAr7C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,kDACD,cAAAigD,EAAA1oC,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAuuD,EAAAl7C,OAAA,GAAAi7C,EAAA,UAClB,gBAAAE,EAAAC,EAAAC,GAAA,OAAAL,EAAAzsE,MAAA,KAAAC,UAAA,EA/BD,IAiCA,CAAAlB,IAAA,0BAAAC,MAAA,eAAA+tE,GAAAlpC,EAAAA,GAAAA,GAAA3S,KAAAA,MAQA,SAAA87C,EACEtoC,EACAxY,EACAuqB,GAAqB,IAAAtL,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA+7C,GAAA,cAAAA,EAAA57C,KAAA47C,EAAA37C,MAAA,OAOpB,OALK6Z,EAAOn6B,KAAKw1D,2BAChB,CAAC9hC,EAAQlB,YACTiT,OACAj2C,EACA0rB,GACD+gD,EAAA37C,KAAA,EACuBtgB,KAAK26C,YAAY,0BAA2BxgB,GAAK,OACV,GADzDqiB,EAASyf,EAAA55B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWvI,MACZ,CAAAgoB,EAAA37C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MACJ,wCACD,cAAAugD,EAAAhpC,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA6uD,EAAAx7C,OAAA,GAAAu7C,EAAA,UAClB,gBAAAE,EAAAC,EAAAC,GAAA,OAAAL,EAAA/sE,MAAA,KAAAC,UAAA,EA5BD,IA4BC,CAAAlB,IAAA,wBAAAC,MAAA,eAAAquE,GAAAxpC,EAAAA,GAAAA,GAAA3S,KAAAA,MAED,SAAAo8C,EACEpjC,EACAsK,GAA6B,IAAA+4B,EAAA9hD,EAAA+hD,EAAAxuE,EAAA,OAAAkyB,KAAAA,MAAA,SAAAu8C,GAAA,cAAAA,EAAAp8C,KAAAo8C,EAAAn8C,MAAA,cAAAm8C,EAAAn8C,KAAA,EAEetgB,KAAK0kD,yBAC/CxrB,EACAsK,GACD,OAQA,OARA+4B,EAAAE,EAAAp6B,KAHM5nB,EAAO8hD,EAAP9hD,QAAgB+hD,EAAWD,EAAlBvuE,MAKZA,EAAQ,KACQ,OAAhBwuE,IACFxuE,EAAQ,IAAIigD,GAA0B,CACpClgD,IAAKmrC,EACL92B,MAAO6rC,GAA0Bxc,YAAY+qC,EAAYh9D,SAE5Di9D,EAAAxpC,OAEM,UACLxY,QAAAA,EACAzsB,MAAAA,IACD,wBAAAyuE,EAAAh8C,OAAA,GAAA67C,EAAA,UACF,gBAAAI,EAAAC,GAAA,OAAAN,EAAArtE,MAAA,KAAAC,UAAA,EAvBA,IAyBD,CAAAlB,IAAA,qBAAAC,MAAA,eAAA4uE,GAAA/pC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA28C,EACEh2B,EACAsI,GAA0D,IAAA2tB,EAAAriD,EAAA+hD,EAAAxuE,EAAA,OAAAkyB,KAAAA,MAAA,SAAA68C,GAAA,cAAAA,EAAA18C,KAAA08C,EAAAz8C,MAAA,cAAAy8C,EAAAz8C,KAAA,EAEdtgB,KAAK0kD,yBAC/C7d,EACAsI,GACD,OAKA,OALA2tB,EAAAC,EAAA16B,KAHM5nB,EAAOqiD,EAAPriD,QAAgB+hD,EAAWM,EAAlB9uE,MAKZA,EAAQ,KACQ,OAAhBwuE,IACFxuE,EAAQ04C,GAAas2B,gBAAgBR,EAAYh9D,OAClDu9D,EAAA9pC,OAEM,UACLxY,QAAAA,EACAzsB,MAAAA,IACD,wBAAA+uE,EAAAt8C,OAAA,GAAAo8C,EAAA,UACF,gBAAAI,EAAAC,GAAA,OAAAN,EAAA5tE,MAAA,KAAAC,UAAA,EArBD,IAuBA,CAAAlB,IAAA,WAAAC,MAAA,eAAAmvE,GAAAtqC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAk9C,EACEv2B,EACAsI,GAAgD,OAAAjvB,KAAAA,MAAA,SAAAm9C,GAAA,cAAAA,EAAAh9C,KAAAg9C,EAAA/8C,MAAA,cAAA+8C,EAAA/8C,KAAA,EAEnCtgB,KAAK+rD,mBAAmBllB,EAAcsI,GAChDoR,MAAK,SAAA/yC,GAAC,OAAIA,EAAExf,KAAK,IACZ,OAAC,SAAA0I,GACL,MAAM,IAAIxH,MACR,mCACE23C,EAAarU,WACb,KACA97B,EAEN,IAAE,cAAA2mE,EAAApqC,OAAA,SAAAoqC,EAAAh7B,MAAA,wBAAAg7B,EAAA58C,OAAA,GAAA28C,EAAA,UACL,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAnuE,MAAA,KAAAC,UAAA,EAjBD,IAmBA,CAAAlB,IAAA,iBAAAC,MAAA,eAAAwvE,GAAA3qC,EAAAA,GAAAA,GAAA3S,KAAAA,MAcA,SAAAu9C,EACEh7D,EACA4lC,GAAgB,IAAAmU,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAAw9C,GAAA,cAAAA,EAAAr9C,KAAAq9C,EAAAp9C,MAAA,cAAAo9C,EAAAp9C,KAAA,EAEQtgB,KAAK26C,YAAY,iBAAkB,CACzDl4C,EAAG+vB,WACH6V,IACA,OACoD,GAJhDmU,EAASkhB,EAAAr7B,OAKX,UADE9/B,EAAMlU,GAAOmuD,EAAW/C,MACZ,CAAAikB,EAAAp9C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,cAAAje,OACKgF,EAAG+vB,WAAU,YAC5B,cAAAkrC,EAAAzqC,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAAswD,EAAAj9C,OAAA,GAAAg9C,EAAA,UAClB,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAxuE,MAAA,KAAAC,UAAA,EA9BD,IAgCA,CAAAlB,IAAA,kCAAAC,MAAA,eAAA6vE,GAAAhrC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA49C,EACEC,GAAqB,IAAAC,EAAAC,EAAA,OAAA/9C,KAAAA,MAAA,SAAAg+C,GAAA,cAAAA,EAAA79C,KAAA69C,EAAA59C,MAAA,UAEhBy9C,EAAc,CAAFG,EAAA59C,KAAA,oBAERtgB,KAAKm7C,kBAAmB,CAAF+iB,EAAA59C,KAAA,eAAA49C,EAAA59C,KAAA,EACrBylB,GAAM,KAAI,OAAAm4B,EAAA59C,KAAA,eAG0C,GADtD09C,EAAiBG,KAAKC,MAAQp+D,KAAKo7C,eAAeE,UAClD2iB,EAAUD,GAp3KoB,IAq3KQ,OAAxCh+D,KAAKo7C,eAAeC,iBAA6B4iB,EAAO,CAAAC,EAAA59C,KAAA,gBAAA49C,EAAAjrC,OAAA,SACnDjzB,KAAKo7C,eAAeC,iBAAe,eAAA6iB,EAAA59C,KAAA,GAIjCtgB,KAAKq+D,oBAAmB,eAAAH,EAAAjrC,OAAA,SAAAirC,EAAA77B,MAAA,yBAAA67B,EAAAz9C,OAAA,GAAAq9C,EAAA,UACtC,gBAAAQ,GAAA,OAAAT,EAAA7uE,MAAA,KAAAC,UAAA,EAnBD,IAqBA,CAAAlB,IAAA,oBAAAC,MAAA,eAAAuwE,GAAA1rC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAs+C,IAAA,IAAAC,EAAAC,EAAAC,EAAAtpE,EAAAgmD,EAAA,OAAAn7B,KAAAA,MAAA,SAAA0+C,GAAA,cAAAA,EAAAv+C,KAAAu+C,EAAAt+C,MAAA,OACEtgB,KAAKm7C,mBAAoB,EAAKyjB,EAAAv+C,KAAA,EAEtBo+C,EAAYN,KAAKC,MACjBM,EAAwB1+D,KAAKo7C,eAAeC,gBAC5CsjB,EAAkBD,EACpBA,EAAsB3+B,UACtB,KACK1qC,EAAI,EAAC,YAAEA,EAAI,IAAE,CAAAupE,EAAAt+C,KAAA,gBAAAs+C,EAAAt+C,KAAA,EACUtgB,KAAK6+D,mBAAmB,aAAY,OAA7C,GAAfxjB,EAAeujB,EAAAv8B,KAEjBs8B,IAAoBtjB,EAAgBtb,UAAS,CAAA6+B,EAAAt+C,KAAA,SAM7C,OALFtgB,KAAKo7C,eAAiB,CACpBC,gBAAAA,EACAC,UAAW6iB,KAAKC,MAChB7iB,sBAAuB,GACvBC,oBAAqB,IACrBojB,EAAA3rC,OAAA,SACKooB,GAAe,eAAAujB,EAAAt+C,KAAA,GAIlBylB,GAAMgF,KAAgB,QAdN11C,IAAGupE,EAAAt+C,KAAA,sBAiBrB,IAAIpxB,MAAM,0CAADuO,OAC6B0gE,KAAKC,MAAQK,EAAS,OACjE,QAE8B,OAF9BG,EAAAv+C,KAAA,GAEDrgB,KAAKm7C,mBAAoB,EAAMyjB,EAAAp+C,OAAA,6BAAAo+C,EAAAn+C,OAAA,GAAA+9C,EAAA,uBAElC,yBAAAD,EAAAvvE,MAAA,KAAAC,UAAA,EAlCD,IAoCA,CAAAlB,IAAA,4BAAAC,MAAA,eAAA8wE,GAAAjsC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAA6+C,EACEv7B,GAAwC,IAAAw7B,EAAAv5B,EAAA4b,EAAAlnB,EAAAqiB,EAAAj6C,EAAA,OAAA2d,KAAAA,MAAA,SAAA++C,GAAA,cAAAA,EAAA5+C,KAAA4+C,EAAA3+C,MAAA,OAGyB,OAHzB0+C,EAEA9vB,GAA4B1L,GAA7DiC,EAAUu5B,EAAVv5B,WAAoB4b,EAAS2d,EAAjBx7B,OACbrJ,EAAOn6B,KAAKs8C,WAAW,GAAI7W,EAAY,SAAU4b,GAAU4d,EAAA3+C,KAAA,EACzCtgB,KAAK26C,YAAY,4BAA6BxgB,GAAK,OACX,GAD1DqiB,EAASyiB,EAAA58B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW/M,GAAwBlyC,SACpC,CAAA0hE,EAAA3+C,KAAA,cACV,IAAIksB,GACRjqC,EAAImZ,MAAK,0CAEV,cAAAujD,EAAAhsC,OAEI,SAAA1wB,EAAI6K,QAAM,wBAAA6xD,EAAAx+C,OAAA,GAAAs+C,EAAA,UAClB,gBAAAG,GAAA,OAAAJ,EAAA9vE,MAAA,KAAAC,UAAA,EAjBD,IAmBA,CAAAlB,IAAA,sBAAAC,MAwBA,eAAAmxE,GAAAtsC,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAAk/C,EACEC,EACAC,EACAC,GAA4C,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvkC,EAAAwkC,EAAA3/B,EAAA0J,EAAAk0B,EAAA/zB,EAAAqR,EAAA0kB,EAAAlhD,EAAA0c,EAAAuI,EAAAk8B,EAAAx8B,EAAAhL,EAAA2B,EAAAqiB,EAAAj6C,EAAA09D,EAAAC,EAAAC,EAAA,OAAAjgD,KAAAA,MAAA,SAAAkgD,GAAA,cAAAA,EAAA//C,KAAA+/C,EAAA9/C,MAAA,YAExC,YAAa++C,GAAoB,CAAAe,EAAA9/C,KAAA,SAIc,GAF3Ck/C,EADcH,EACgB9tC,YAC9BkuC,EACJpyE,EAAAA,OAAOC,KAAKkyE,GAAiBljE,SAAS,WACpCtG,MAAMC,QAAQqpE,SAAwC9vE,IAApB+vE,EAA6B,CAAAa,EAAA9/C,KAAA,cAC3D,IAAIpxB,MAAM,qBAAoB,OASG,OANnCwwE,EAAcJ,GAAmB,CAAC,GACjC1Y,SAAW,SACZ,eAAgB8Y,IACpBA,EAAOj6B,WAAazlC,KAAKylC,YAGrBk6B,EAAO,CAACF,EAAoBC,GAAOU,EAAA9/C,KAAA,GACjBtgB,KAAK26C,YAAY,sBAAuBglB,GAAK,QACJ,GAD3DC,EAASQ,EAAA/9B,OAEX,UADEw9B,EAAMxxE,GAAOuxE,EAAWpuB,MACZ,CAAA4uB,EAAA9/C,KAAA,eACV,IAAIpxB,MAAM,mCAAqC2wE,EAAInkD,MAAMmD,SAAQ,eAAAuhD,EAAAntC,OAElE,SAAA4sC,EAAIzyD,QAAM,QAelB,GAXGiyD,aAAgC//B,IAC9BwgC,EAA0BT,GAC9B/jC,EAAc,IAAIgE,IACNE,SAAWsgC,EAAWtgC,SAClClE,EAAY/F,aAAe8pC,EAAqB9pC,aAChD+F,EAAYoE,UAAYogC,EAAWpgC,UACnCpE,EAAYiE,WAAaugC,EAAWvgC,aAEpCjE,EAAcgE,GAAY0E,SAASq7B,IAEvBz/B,SAAWtE,EAAYuE,WAAQrwC,OAGrBA,IAApB8vE,GAAkCtpE,MAAMC,QAAQqpE,GAAgB,CAAAc,EAAA9/C,KAAA,eAC5D,IAAIpxB,MAAM,qBAAoB,QAGP,GAAzBixC,EAAUm/B,GACZhkC,EAAYoE,YAAaS,EAAO,CAAAigC,EAAA9/C,KAAA,UAClCupB,EAAAvO,GAAYrgB,KAAIjsB,MAAA66C,GAAAlnC,EAAAA,EAAAA,GAAIw9B,IAASigC,EAAA9/C,KAAA,iBAEzBy9C,EAAe/9D,KAAKk7C,yBAAwB,eAAAklB,EAAA9/C,KAAA,GAEhBtgB,KAAKqgE,gCACjCtC,GACD,QAEuD,GAJlD1iB,EAAe+kB,EAAA/9B,KAGrB/G,EAAYmE,qBAAuB4b,EAAgB5b,qBACnDnE,EAAYjB,gBAAkBghB,EAAgBtb,UAEzCI,EAAS,CAAFigC,EAAA9/C,KAAA,gBAAA8/C,EAAAntC,OAAA,oBAEiB,IAA7B+W,EAAA1O,GAAYrgB,KAAIjsB,MAAAg7C,GAAArnC,EAAAA,EAAAA,GAAIw9B,IACf7E,EAAY1M,UAAW,CAAFwxC,EAAA9/C,KAAA,eAClB,IAAIpxB,MAAM,cAAa,QAG2B,GAApD6wE,EAAYzkC,EAAY1M,UAAUtyB,SAAS,UAE9C0D,KAAKo7C,eAAeI,oBAAoB19C,SAASiiE,IACjD//D,KAAKo7C,eAAeG,sBAAsBz9C,SAASiiE,GAAU,CAAAK,EAAA9/C,KAAA,SAIN,OAAxDtgB,KAAKo7C,eAAeI,oBAAoBlmD,KAAKyqE,GAAWK,EAAAntC,OAAA,oBAOxD8qC,GAAe,EAAK,QAAAqC,EAAA9/C,KAAA,iBA+Be,OA1BnCzB,EAAUyc,EAAY2G,WACtB1G,EAAW1c,EAAQ0S,YACnBuS,EAAkBxI,EAAYqI,WAAWpI,GACzCykC,EAAqBl8B,EAAgBxnC,SAAS,UAC9CknC,EAAc,CAClBojB,SAAU,SACVnhB,WAAYzlC,KAAKylC,YAGf85B,IACI/mC,GACJxiC,MAAMC,QAAQspE,GACVA,EACA1gD,EAAQyhD,iBACZl7D,KAAI,SAAArX,GAAG,OAAIA,EAAIykC,cAEjBgR,EAAiB,SAAI,CACnBojB,SAAU,SACVpuB,UAAAA,IAIA2H,IACFqD,EAAO+8B,WAAY,GAGfpmC,EAAO,CAAC6lC,EAAoBx8B,GAAO48B,EAAA9/C,KAAA,GACjBtgB,KAAK26C,YAAY,sBAAuBxgB,GAAK,QACJ,GAD3DqiB,EAAS4jB,EAAA/9B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAWhL,MACZ,CAAA4uB,EAAA9/C,KAAA,SASf,KAPG,SAAU/d,EAAImZ,QAChBukD,EAAO19D,EAAImZ,MAAMlc,KAAK+sC,OACVv2C,MAAMC,QAAQgqE,KAElBE,GADAD,EAAc,UACWD,EAAK/gD,KAAKghD,GACzC7/B,QAAQ3kB,MAAMnZ,EAAImZ,MAAMmD,QAASshD,IAG/B,IAAI9zB,GACR,mCAAqC9pC,EAAImZ,MAAMmD,QAC/CohD,GACD,eAAAG,EAAAntC,OAEI,SAAA1wB,EAAI6K,QAAM,yBAAAgzD,EAAA3/C,OAAA,GAAA2+C,EAAA,UAClB,gBAAAoB,EAAAC,EAAAC,GAAA,OAAAvB,EAAAnwE,MAAA,KAAAC,UAAA,EAnID,IAqIA,CAAAlB,IAAA,kBAAAC,MAwBA,eAAA2yE,GAAA9tC,EAAAA,GAAAA,GAAA3S,KAAAA,MACA,SAAA0gD,EACEtlC,EACAulC,EACA3lD,GAAqB,IAAA4lD,EAAA3gC,EAAA49B,EAAA1iB,EAAA0lB,EAAAj9B,EAAA,OAAA5jB,KAAAA,MAAA,SAAA8gD,GAAA,cAAAA,EAAA3gD,KAAA2gD,EAAA1gD,MAAA,YAEjB,YAAagb,GAAW,CAAA0lC,EAAA1gD,KAAA,YACtBugD,IAAoB7qE,MAAMC,QAAQ4qE,GAAiB,CAAAG,EAAA1gD,KAAA,cAC/C,IAAIpxB,MAAM,qBAAoB,OAGS,OAAzC4xE,EAAkBxlC,EAAY/J,YAAWyvC,EAAA1gD,KAAA,EAClCtgB,KAAKihE,mBAAmBH,EAAiBD,GAAiB,cAAAG,EAAA/tC,OAAA,SAAA+tC,EAAA3+B,MAAA,eAGhD7yC,IAArBqxE,GAAmC7qE,MAAMC,QAAQ4qE,GAAiB,CAAAG,EAAA1gD,KAAA,cAC9D,IAAIpxB,MAAM,qBAAoB,OAGN,GAA1BixC,EAAU0gC,GACZvlC,EAAYoE,UAAW,CAAFshC,EAAA1gD,KAAA,SACvBgb,EAAYrgB,KAAIjsB,MAAhBssC,GAAW34B,EAAAA,EAAAA,GAASw9B,IAAS6gC,EAAA1gD,KAAA,iBAEzBy9C,EAAe/9D,KAAKk7C,yBAAwB,eAAA8lB,EAAA1gD,KAAA,GAEhBtgB,KAAKqgE,gCACjCtC,GACD,QAG4B,GALvB1iB,EAAe2lB,EAAA3+B,KAGrB/G,EAAYmE,qBAAuB4b,EAAgB5b,qBACnDnE,EAAYjB,gBAAkBghB,EAAgBtb,UAC9CzE,EAAYrgB,KAAIjsB,MAAhBssC,GAAW34B,EAAAA,EAAAA,GAASw9B,IACf7E,EAAY1M,UAAW,CAAFoyC,EAAA1gD,KAAA,eAClB,IAAIpxB,MAAM,cAAa,QAG2B,GAApD6xE,EAAYzlC,EAAY1M,UAAUtyB,SAAS,UAC5C0D,KAAKo7C,eAAeG,sBAAsBz9C,SAASijE,GAAY,CAAFC,EAAA1gD,KAAA,SAGN,OAA1DtgB,KAAKo7C,eAAeG,sBAAsBjmD,KAAKyrE,GAAWC,EAAA/tC,OAAA,oBAO1D8qC,GAAe,EAAK,QAAAiD,EAAA1gD,KAAA,iBAKqB,OAAzCwjB,EAAkBxI,EAAY/J,YAAWyvC,EAAA1gD,KAAA,GAClCtgB,KAAKihE,mBAAmBn9B,EAAiB5oB,GAAQ,eAAA8lD,EAAA/tC,OAAA,SAAA+tC,EAAA3+B,MAAA,yBAAA2+B,EAAAvgD,OAAA,GAAAmgD,EAAA,UAC/D,gBAAAM,EAAAC,EAAAC,GAAA,OAAAT,EAAA3xE,MAAA,KAAAC,UAAA,EArDD,IAuDA,CAAAlB,IAAA,qBAAAC,MAAA,eAAAqzE,GAAAxuC,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAAohD,EACEC,EACArmD,GAAqB,IAAA8kD,EAAA5yD,EAAA,OAAA8S,KAAAA,MAAA,SAAAshD,GAAA,cAAAA,EAAAnhD,KAAAmhD,EAAAlhD,MAAA,OAEiD,OAAhE0/C,EAAqB5uC,GAASmwC,GAAgBjlE,SAAS,UAASklE,EAAAlhD,KAAA,EACjDtgB,KAAKyhE,uBACxBzB,EACA9kD,GACD,OAHW,OAAN9N,EAAMo0D,EAAAn/B,KAAAm/B,EAAAvuC,OAAA,SAIL7lB,GAAM,wBAAAo0D,EAAA/gD,OAAA,GAAA6gD,EAAA,UACd,gBAAAI,EAAAC,GAAA,OAAAN,EAAAryE,MAAA,KAAAC,UAAA,EAdD,IAgBA,CAAAlB,IAAA,yBAAAC,MAAA,eAAA4zE,GAAA/uC,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAA2hD,EACE7B,EACA9kD,GAAqB,IAAAsoB,EAAA+B,EAAAC,EAAArL,EAAAqiB,EAAAj6C,EAAAu/D,EAAA,OAAA5hD,KAAAA,MAAA,SAAA6hD,GAAA,cAAAA,EAAA1hD,KAAA0hD,EAAAzhD,MAAA,OAoBoB,OAlBnCkjB,EAAc,CAACojB,SAAU,UACzBrhB,EAAgBrqB,GAAWA,EAAQqqB,cACnCC,EACHtqB,GAAWA,EAAQsqB,qBAAwBxlC,KAAKylC,WAE/CvqB,GAAiC,MAAtBA,EAAQwqB,aACrBlC,EAAOkC,WAAaxqB,EAAQwqB,YAE1BxqB,GAAqC,MAA1BA,EAAQ4kB,iBACrB0D,EAAO1D,eAAiB5kB,EAAQ4kB,gBAE9ByF,IACF/B,EAAO+B,cAAgBA,GAErBC,IACFhC,EAAOgC,oBAAsBA,GAGzBrL,EAAO,CAAC6lC,EAAoBx8B,GAAOu+B,EAAAzhD,KAAA,GACjBtgB,KAAK26C,YAAY,kBAAmBxgB,GAAK,QACV,GADjDqiB,EAASulB,EAAA1/B,OAEX,UADE9/B,EAAMlU,GAAOmuD,EAAW9C,MACZ,CAAAqoB,EAAAzhD,KAAA,SAIf,KAFG,SAAU/d,EAAImZ,QAChBomD,EAAOv/D,EAAImZ,MAAMlc,KAAK+sC,MAElB,IAAIF,GACR,+BAAiC9pC,EAAImZ,MAAMmD,QAC3CijD,GACD,eAAAC,EAAA9uC,OAEI,SAAA1wB,EAAI6K,QAAM,yBAAA20D,EAAAthD,OAAA,GAAAohD,EAAA,UAClB,gBAAAG,EAAAC,GAAA,OAAAL,EAAA5yE,MAAA,KAAAC,UAAA,EAxCD,IA0CA,CAAAlB,IAAA,YAAAC,MAGA,WAAY,IAAAkK,EAAA,KACV8H,KAAK86C,wBAAyB,EAC9B96C,KAAK+6C,uBAAyBmnB,aAAY,YAExCrvC,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAAiiD,IAAA,OAAAjiD,KAAAA,MAAA,SAAAkiD,GAAA,cAAAA,EAAA/hD,KAAA+hD,EAAA9hD,MAAA,cAAA8hD,EAAA/hD,KAAA,EAAA+hD,EAAA9hD,KAAA,EAESpoB,EAAK2iD,cAAcwnB,OAAO,QAAO,OAAAD,EAAA9hD,KAAA,eAAA8hD,EAAA/hD,KAAA,EAAA+hD,EAAA7hD,GAAA6hD,EAAA,iCAAAA,EAAA3hD,OAAA,GAAA0hD,EAAA,iBAF3CtvC,KAMC,KACH7yB,KAAKsiE,sBACP,GAEA,CAAAv0E,IAAA,aAAAC,MAGA,SAAWyI,GACTuJ,KAAK86C,wBAAyB,EAC9Bza,QAAQ3kB,MAAM,YAAajlB,EAAIooB,QACjC,GAEA,CAAA9wB,IAAA,aAAAC,MAGA,SAAW0+C,GAAc,IAAAl0C,EAAA,KACvBwH,KAAK86C,wBAAyB,EAC9B96C,KAAKi7C,yBACFj7C,KAAKi7C,wBAA0B,GAAKptD,OAAO00E,iBAC1CviE,KAAKg7C,2BACP6R,aAAa7sD,KAAKg7C,0BAClBh7C,KAAKg7C,yBAA2B,MAE9Bh7C,KAAK+6C,yBACPynB,cAAcxiE,KAAK+6C,wBACnB/6C,KAAK+6C,uBAAyB,MAGnB,MAATrO,GAOJ1sC,KAAK67C,6CAA+C,CAAC,EACrDztD,OAAOse,QACL1M,KAAK87C,sBACLj8C,SAAQ,SAAA4iE,GAA0B,IAAAC,GAAAp9D,EAAAA,EAAAA,GAAAm9D,EAAA,GAAxB1kE,EAAI2kE,EAAA,GAAEvuB,EAAYuuB,EAAA,GAC5BlqE,EAAKmqE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf/xC,MAAO,YAEX,KAbEpC,KAAKsiE,sBAcT,GAEA,CAAAv0E,IAAA,mBAAAC,MAGA,SACE+P,EACA6kE,GACA,IAAAC,EACMC,EAA2C,QAAlCD,EAAG7iE,KAAK87C,qBAAqB/9C,UAA1B,IAA+B8kE,OAA/B,EAAAA,EAAiCzgE,MAEnD,GADApC,KAAK87C,qBAAqB/9C,GAAQ6kE,EAC9BE,IAAcF,EAAiBxgE,MAAO,CACxC,IAAM2gE,EACJ/iE,KAAK47C,wCAAwC79C,GAC3CglE,GACFA,EAAqBljE,SAAQ,SAAAmjE,GAC3B,IACEA,EAAGJ,EAAiBxgE,MAEtB,CAAE,MAAA6gE,GAAO,CACX,GAEJ,CACF,GAEA,CAAAl1E,IAAA,6BAAAC,MAGA,SACEk1E,EACAjlB,GACkC,IAAAklB,EAAAnpE,EAAA,KAC5B+D,EACJiC,KAAK27C,wCAAwCunB,GAC/C,GAAY,MAARnlE,EACF,OAAO,WAAO,EAEhB,IAAMglE,GAAwBI,EAAAnjE,KAAK47C,yCACjC79C,KAD4BolE,EAC5BplE,GACI,IAAI6jB,KAEV,OADAmhD,EAAqB5+D,IAAI85C,GAClB,WACL8kB,EAAoB,OAAQ9kB,GACM,IAA9B8kB,EAAqBpsC,aAChB38B,EAAK4hD,wCAAwC79C,GAG1D,GAEA,CAAAhQ,IAAA,uBAAAC,MAAA,eAAAo1E,GAAAvwC,EAAAA,GAAAA,GAAA3S,KAAAA,MAGA,SAAAmjD,IAAA,IAAAC,EAAAC,EAAA/oE,EAAA,YAAA0lB,KAAAA,MAAA,SAAAsjD,GAAA,cAAAA,EAAAnjD,KAAAmjD,EAAAljD,MAAA,UACwD,IAAlDlyB,OAAO21B,KAAK/jB,KAAK87C,sBAAsBruD,OAAY,CAAA+1E,EAAAljD,KAAA,QAgBpD,OAfGtgB,KAAK86C,yBACP96C,KAAK86C,wBAAyB,EAC9B96C,KAAKg7C,yBAA2B7U,YAAW,WACzC3rC,EAAKwgD,yBAA2B,KAChC,IACExgD,EAAKqgD,cAAc4oB,QACnB,MAAOhtE,GAEHA,aAAevH,OACjBmxC,QAAQoe,IAAI,yCAADhhD,OACgChH,EAAIooB,SAGnD,IACC,MACJ2kD,EAAAvwC,OAAA,iBAQF,GAJqC,OAAlCjzB,KAAKg7C,2BACP6R,aAAa7sD,KAAKg7C,0BAClBh7C,KAAKg7C,yBAA2B,KAChCh7C,KAAK86C,wBAAyB,GAG3B96C,KAAK86C,uBAAwB,CAAF0oB,EAAAljD,KAAA,QACD,OAA7BtgB,KAAK66C,cAAc6oB,UAAUF,EAAAvwC,OAAA,iBAO9B,OAHKqwC,EAA4BtjE,KAAKi7C,wBACjCsoB,EAAiC,WACrC,OAAOD,IAA8B9oE,EAAKygD,yBAC3CuoB,EAAAljD,KAAA,GAEK2lB,QAAQ2E,IAKZx8C,OAAO21B,KAAK/jB,KAAK87C,sBAAsB12C,IAAG,eAAAu+D,GAAA9wC,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAA0jD,EAAM7lE,GAAI,IAAAo2C,EAAA,OAAAj0B,KAAAA,MAAA,SAAA2jD,GAAA,cAAAA,EAAAxjD,KAAAwjD,EAAAvjD,MAAA,OACC,QAC/B9wB,KADf2kD,EAAe35C,EAAKshD,qBAAqB/9C,IACjB,CAAA8lE,EAAAvjD,KAAA,eAAAujD,EAAA5wC,OAAA,iBAAA4wC,EAAAtjD,GAItB4zB,EAAa/xC,MAAKyhE,EAAAvjD,KACnB,YADmBujD,EAAAtjD,IAEnB,iBADSsjD,EAAAtjD,GAAA,EA+DT,eA9DcsjD,EAAAtjD,GA8DF,GA2DZ,gBA3DYsjD,EAAAtjD,IA4DZ,kBADasjD,EAAAtjD,GAAA,GACE,mBAzHkB,IAAhC4zB,EAAa2vB,UAAUntC,KAAU,CAAAktC,EAAAvjD,KAAA,SAmBlC,cALM9lB,EAAKshD,qBAAqB/9C,GACN,iBAAvBo2C,EAAa/xC,cACR5H,EAAKqhD,6CACV1H,EAAa4vB,sBAEhBF,EAAAvjD,KAAA,GACK9lB,EAAK8nE,uBAAsB,eAAAuB,EAAA5wC,OAAA,yBAAA4wC,EAAAvjD,KAAA,IAG7BuS,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAA8jD,IAAA,IAAA7pC,EAAAkkB,EAAA4lB,EAAA,OAAA/jD,KAAAA,MAAA,SAAAgkD,GAAA,cAAAA,EAAA7jD,KAAA6jD,EAAA5jD,MAAA,OAMA,OALE6Z,EAAgBga,EAAhBha,KAAMkkB,EAAUlK,EAAVkK,OAAM6lB,EAAA7jD,KAAA,EAEjB7lB,EAAKmoE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf/xC,MAAO,iBACN8hE,EAAA5jD,KAAA,EAEM9lB,EAAKqgD,cAAcprD,KAAK4uD,EAAQlkB,GAAK,OAQnB,OATrB8pC,EAA0CC,EAAA7hC,KAEhD7nC,EAAKmoE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf4vB,qBAAAE,EACA7hE,MAAO,gBAET5H,EAAKqhD,6CACHooB,GACE9vB,EAAa2vB,UAAUI,EAAA5jD,KAAA,GACrB9lB,EAAK8nE,uBAAsB,QAAA4B,EAAA5jD,KAAA,iBAQhC,GARgC4jD,EAAA7jD,KAAA,GAAA6jD,EAAA3jD,GAAA2jD,EAAA,SAE7BA,EAAA3jD,cAAarxB,OACfmxC,QAAQ3kB,MAAM,GAADje,OACR4gD,EAAM,uBACTlkB,EACA+pC,EAAA3jD,GAAE1B,SAGD0kD,IAAkC,CAAFW,EAAA5jD,KAAA,gBAAA4jD,EAAAjxC,OAAA,kBAOlC,OAHHz4B,EAAKmoE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf/xC,MAAO,aACN8hE,EAAA5jD,KAAA,GACG9lB,EAAK8nE,uBAAsB,yBAAA4B,EAAAzjD,OAAA,GAAAujD,EAAA,kBAlC/BnxC,GAoCF,QA0DE,uBAAAgxC,EAAA5wC,OAAA,YA1DF,WAGgC,IAAhCkhB,EAAa2vB,UAAUntC,KAAU,CAAAktC,EAAAvjD,KAAA,gBAAAujD,EAAAvjD,KAAA,IAI7BuS,EAAAA,GAAAA,GAAA3S,KAAAA,MAAC,SAAAikD,IAAA,IAAAJ,EAAAK,EAAA,OAAAlkD,KAAAA,MAAA,SAAAmkD,GAAA,cAAAA,EAAAhkD,KAAAgkD,EAAA/jD,MAAA,OACyC,GAAvCyjD,EAA2C5vB,EAA3C4vB,qBAAsBK,EAAqBjwB,EAArBiwB,mBAE3B5pE,EAAKuhD,gCAAgCrhB,IAAIqpC,GAAqB,CAAAM,EAAA/jD,KAAA,QAW9D9lB,EAAKuhD,gCAAsC,OACzCgoB,GACAM,EAAA/jD,KAAA,gBASC,OAPH9lB,EAAKmoE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf/xC,MAAO,mBAET5H,EAAKmoE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf/xC,MAAO,mBACNiiE,EAAAhkD,KAAA,EAAAgkD,EAAA/jD,KAAA,GAEK9lB,EAAKqgD,cAAcprD,KAAK20E,EAAmB,CAC/CL,IACA,QAAAM,EAAA/jD,KAAA,iBAID,GAJC+jD,EAAAhkD,KAAA,GAAAgkD,EAAA9jD,GAAA8jD,EAAA,SAEEA,EAAA9jD,cAAarxB,OACfmxC,QAAQ3kB,MAAM,GAADje,OAAI2mE,EAA4B,WAAAC,EAAA9jD,GAAE1B,SAE5C0kD,IAAkC,CAAFc,EAAA/jD,KAAA,gBAAA+jD,EAAApxC,OAAA,kBAOlC,OAHHz4B,EAAKmoE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf/xC,MAAO,gBACNiiE,EAAA/jD,KAAA,GACG9lB,EAAK8nE,uBAAsB,eAAA+B,EAAApxC,OAAA,kBAOlC,OAHHz4B,EAAKmoE,iBAAiB5kE,EAAIwW,GAAAA,GAAA,GACrB4/B,GAAY,IACf/xC,MAAO,kBACNiiE,EAAA/jD,KAAA,GACG9lB,EAAK8nE,uBAAsB,yBAAA+B,EAAA5jD,OAAA,GAAA0jD,EAAA,kBAlD7BtxC,GAmDF,yBAAAgxC,EAAApjD,OAAA,GAAAmjD,OAOX,gBAAAU,GAAA,OAAAX,EAAA30E,MAAA,KAAAC,UAAA,EArIyC,KAsI3C,yBAAAu0E,EAAA/iD,OAAA,GAAA4iD,EAAA,UACF,yBAAAD,EAAAp0E,MAAA,KAAAC,UAAA,EApLD,IAsLA,CAAAlB,IAAA,4BAAAC,MAGA,SAGE+1E,EACAQ,GAEA,IAAMT,EACJ9jE,KAAK67C,6CAA6CkoB,QAClCv0E,IAAds0E,GAGJA,EAAUjkE,SAAQ,SAAAmjE,GAChB,IACEA,EAAEh0E,WAAC,GAAD2T,EAAAA,EAAAA,GAKG4hE,IAEL,MAAO7tE,GACP2pC,QAAQ3kB,MAAMhlB,EAChB,CACF,GACF,GAEA,CAAA3I,IAAA,2BAAAC,MAGA,SAAyBw2E,GACvB,IAAAC,EAA+Bp2E,GAC7Bm2E,EACAtwB,IAFK9mC,EAAMq3D,EAANr3D,OAAQ+mC,EAAYswB,EAAZtwB,aAIfn0C,KAAK0kE,0BAAiDvwB,EAAc,CAClE/mC,EAAOpf,MACPof,EAAOqN,SAEX,GAEA,CAAA1sB,IAAA,oBAAAC,MAGA,SACE22E,EAyBAxqC,GACsB,IAAAj+B,EAAA,KAChBgnE,EAAuBljE,KAAKy7C,4BAC5B19C,EAAOw+C,GACX,CAACooB,EAAmBtmB,OAAQlkB,IAC5B,GAEIyqC,EAAuB5kE,KAAK87C,qBAAqB/9C,GA4BvD,YA3B6BvO,IAAzBo1E,EACF5kE,KAAK87C,qBAAqB/9C,GAAKwW,GAAAA,GAAA,GAC1BowD,GAAkB,IACrBxqC,KAAAA,EACA2pC,UAAW,IAAIliD,IAAI,CAAC+iD,EAAmB1mB,WACvC77C,MAAO,YAGTwiE,EAAqBd,UAAU3/D,IAAIwgE,EAAmB1mB,UAExDj+C,KAAK27C,wCAAwCunB,GAAwBnlE,EACrEiC,KAAK07C,oDACHwnB,IACDrwC,EAAAA,GAAAA,GAAA3S,KAAAA,MAAG,SAAA2kD,IAAA,IAAA1wB,EAAA,OAAAj0B,KAAAA,MAAA,SAAA4kD,GAAA,cAAAA,EAAAzkD,KAAAykD,EAAAxkD,MAAA,OAUyD,cATpDpkB,EAAKw/C,oDACVwnB,UAEKhnE,EAAKy/C,wCAAwCunB,GAEpD3gD,QACmB/yB,KAFb2kD,EAAej4C,EAAK4/C,qBAAqB/9C,IAEnB,0EAAAN,OACkDylE,IAE9E/uB,EAAa2vB,UAAS,OAAQa,EAAmB1mB,UAAU6mB,EAAAxkD,KAAA,EACrDpkB,EAAKomE,uBAAsB,wBAAAwC,EAAArkD,OAAA,GAAAokD,OAEnC7kE,KAAKsiE,uBACEY,CACT,GAEA,CAAAn1E,IAAA,kBAAAC,MAQA,SACEutB,EACA0iC,EACAxY,GAEA,IAAMtL,EAAOn6B,KAAKs8C,WAChB,CAAC/gC,EAAUiX,YACXiT,GAAczlC,KAAKu6C,aAAe,YAClC,UAEF,OAAOv6C,KAAK+kE,kBACV,CACE9mB,SAAAA,EACAI,OAAQ,mBACR+lB,kBAAmB,sBAErBjqC,EAEJ,GAEA,CAAApsC,IAAA,8BAAAC,MAAA,eAAAg3E,GAAAnyC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAA+kD,EACE/B,GAA0C,OAAAhjD,KAAAA,MAAA,SAAAglD,GAAA,cAAAA,EAAA7kD,KAAA6kD,EAAA5kD,MAAA,cAAA4kD,EAAA5kD,KAAA,EAEpCtgB,KAAKmlE,+BACTjC,EACA,kBACD,wBAAAgC,EAAAzkD,OAAA,GAAAwkD,EAAA,UACF,gBAAAG,GAAA,OAAAJ,EAAAh2E,MAAA,KAAAC,UAAA,EAZD,IAcA,CAAAlB,IAAA,kCAAAC,MAGA,SAAgCw2E,GAC9B,IAAAa,EAA+Bh3E,GAC7Bm2E,EACAnwB,IAFKjnC,EAAMi4D,EAANj4D,OAAQ+mC,EAAYkxB,EAAZlxB,aAIfn0C,KAAK0kE,0BAAwDvwB,EAAc,CACzE,CACEmxB,UAAWl4D,EAAOpf,MAAMgoC,OACxBwmC,YAAapvD,EAAOpf,MAAMusC,SAE5BntB,EAAOqN,SAEX,GAEA,CAAA1sB,IAAA,yBAAAC,MAUA,SACE+kC,EACAkrB,EACAxY,EACA8/B,GAEA,IAAMprC,EAAOn6B,KAAKs8C,WAChB,CAACvpB,EAAUP,YACXiT,GAAczlC,KAAKu6C,aAAe,YAClC,SACAgrB,EAAU,CAACA,QAASA,QAAW/1E,GAEjC,OAAOwQ,KAAK+kE,kBACV,CACE9mB,SAAAA,EACAI,OAAQ,mBACR+lB,kBAAmB,sBAErBjqC,EAEJ,GAEA,CAAApsC,IAAA,qCAAAC,MAAA,eAAAw3E,GAAA3yC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAulD,EACEvC,GAA0C,OAAAhjD,KAAAA,MAAA,SAAAwlD,GAAA,cAAAA,EAAArlD,KAAAqlD,EAAAplD,MAAA,cAAAolD,EAAAplD,KAAA,EAEpCtgB,KAAKmlE,+BACTjC,EACA,0BACD,wBAAAwC,EAAAjlD,OAAA,GAAAglD,EAAA,UACF,gBAAAE,GAAA,OAAAH,EAAAx2E,MAAA,KAAAC,UAAA,EAZD,IAcA,CAAAlB,IAAA,SAAAC,MAGA,SACEopC,EACA6mB,EACAxY,GAEA,IAAMtL,EAAOn6B,KAAKs8C,WAChB,CAAmB,YAAlBspB,EAAAA,GAAAA,GAAOxuC,GAAsB,CAACyuC,SAAU,CAACzuC,EAAO96B,aAAe86B,GAChEqO,GAAczlC,KAAKu6C,aAAe,aAEpC,OAAOv6C,KAAK+kE,kBACV,CACE9mB,SAAAA,EACAI,OAAQ,gBACR+lB,kBAAmB,mBAErBjqC,EAEJ,GAEA,CAAApsC,IAAA,uBAAAC,MAAA,eAAA83E,GAAAjzC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAA6lD,EACE7C,GAA0C,OAAAhjD,KAAAA,MAAA,SAAA8lD,GAAA,cAAAA,EAAA3lD,KAAA2lD,EAAA1lD,MAAA,cAAA0lD,EAAA1lD,KAAA,EAEpCtgB,KAAKmlE,+BAA+BjC,EAAsB,QAAO,wBAAA8C,EAAAvlD,OAAA,GAAAslD,EAAA,UACxE,gBAAAE,GAAA,OAAAH,EAAA92E,MAAA,KAAAC,UAAA,EATD,IAWA,CAAAlB,IAAA,wBAAAC,MAGA,SAAsBw2E,GACpB,IAAA0B,EAA+B73E,GAAOm2E,EAAc5qB,IAA7CxsC,EAAM84D,EAAN94D,OAAQ+mC,EAAY+xB,EAAZ/xB,aACfn0C,KAAK0kE,0BAAwCvwB,EAAc,CACzD/mC,EAAOpf,MACPof,EAAOqN,SAEX,GAEA,CAAA1sB,IAAA,wBAAAC,MAGA,SAAsBw2E,GACpB,IAAA2B,EAA+B93E,GAAOm2E,EAAchwB,IAA7CpnC,EAAM+4D,EAAN/4D,OAAQ+mC,EAAYgyB,EAAZhyB,aACfn0C,KAAK0kE,0BAA8CvwB,EAAc,CAAC/mC,GACpE,GAEA,CAAArf,IAAA,eAAAC,MAMA,SAAaiwD,GACX,OAAOj+C,KAAK+kE,kBACV,CACE9mB,SAAAA,EACAI,OAAQ,gBACR+lB,kBAAmB,mBAErB,GAEJ,GAEA,CAAAr2E,IAAA,2BAAAC,MAAA,eAAAo4E,GAAAvzC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAmmD,EACEnD,GAA0C,OAAAhjD,KAAAA,MAAA,SAAAomD,GAAA,cAAAA,EAAAjmD,KAAAimD,EAAAhmD,MAAA,cAAAgmD,EAAAhmD,KAAA,EAEpCtgB,KAAKmlE,+BACTjC,EACA,eACD,wBAAAoD,EAAA7lD,OAAA,GAAA4lD,EAAA,UACF,gBAAAE,GAAA,OAAAH,EAAAp3E,MAAA,KAAAC,UAAA,EAZD,IAcA,CAAAlB,IAAA,+BAAAC,MAGA,SAA6Bw2E,GAC3B,IAAAgC,EAA+Bn4E,GAC7Bm2E,EACAxvB,IAFK5nC,EAAMo5D,EAANp5D,OAAQ+mC,EAAYqyB,EAAZryB,aAIfn0C,KAAK0kE,0BAA8CvwB,EAAc,CAAC/mC,GACpE,GAEA,CAAArf,IAAA,eAAAC,MAOA,SAAaiwD,GACX,OAAOj+C,KAAK+kE,kBACV,CACE9mB,SAAAA,EACAI,OAAQ,wBACR+lB,kBAAmB,2BAErB,GAEJ,GAEA,CAAAr2E,IAAA,2BAAAC,MAAA,eAAAy4E,GAAA5zC,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAwmD,EACExD,GAA0C,OAAAhjD,KAAAA,MAAA,SAAAymD,GAAA,cAAAA,EAAAtmD,KAAAsmD,EAAArmD,MAAA,cAAAqmD,EAAArmD,KAAA,EAEpCtgB,KAAKmlE,+BACTjC,EACA,eACD,wBAAAyD,EAAAlmD,OAAA,GAAAimD,EAAA,UACF,gBAAAE,GAAA,OAAAH,EAAAz3E,MAAA,KAAAC,UAAA,EAZD,IAcA,CAAAlB,IAAA,iCAAAC,MAAA,eAAA64E,GAAAh0C,EAAAA,GAAAA,GAAA3S,KAAAA,MAIA,SAAA4mD,EACE5D,EACA6D,GAAwB,IAAAC,EAAA,OAAA9mD,KAAAA,MAAA,SAAA+mD,GAAA,cAAAA,EAAA5mD,KAAA4mD,EAAA3mD,MAAA,OAKrB,KAHG0mD,EACJhnE,KAAK07C,oDACHwnB,IAES,CAAF+D,EAAA3mD,KAAA,eAAA2mD,EAAA3mD,KAAA,EACH0mD,IAAS,OAAAC,EAAA3mD,KAAA,eAEf+f,QAAQC,KACN,sEAAqE,IAAA7iC,OAC9DylE,EAAoB,WAAAzlE,OAAWspE,EAA2B,aAC/D,uBACF,wBAAAE,EAAAxmD,OAAA,GAAAqmD,EAAA,UAEL,gBAAAI,EAAAC,GAAA,OAAAN,EAAA73E,MAAA,KAAAC,UAAA,EArBD,IAqBC,CAAAlB,IAAA,aAAAC,MAED,SACEmsC,EACAitC,EACAxgB,EACA0P,GAEA,IAAM7wB,EAAa2hC,GAAYpnE,KAAKu6C,YACpC,GAAI9U,GAAcmhB,GAAY0P,EAAO,CACnC,IAAI+Q,EAAe,CAAC,EAChBzgB,IACFygB,EAAQzgB,SAAWA,GAEjBnhB,IACF4hC,EAAQ5hC,WAAaA,GAEnB6wB,IACF+Q,EAAUj5E,OAAOI,OAAO64E,EAAS/Q,IAEnCn8B,EAAK7kC,KAAK+xE,EACZ,CACA,OAAOltC,CACT,GAEA,CAAApsC,IAAA,6BAAAC,MAGA,SACEmsC,EACAitC,EACAxgB,EACA0P,GAEA,IAAM7wB,EAAa2hC,GAAYpnE,KAAKu6C,YACpC,GAAI9U,IAAe,CAAC,YAAa,aAAa3nC,SAAS2nC,GACrD,MAAM,IAAIv2C,MACR,8CACE8Q,KAAKu6C,YACL,+CAGN,OAAOv6C,KAAKs8C,WAAWniB,EAAMitC,EAAUxgB,EAAU0P,EACnD,GAEA,CAAAvoE,IAAA,6BAAAC,MAGA,SAA2Bw2E,GACzB,IAAA8C,EAA+Bj5E,GAC7Bm2E,EACAvvB,IAFK7nC,EAAMk6D,EAANl6D,OAAQ+mC,EAAYmzB,EAAZnzB,aAIM,sBAAjB/mC,EAAOpf,OAcTgS,KAAK+7C,gCAAgC53C,IAAIgwC,GAE3Cn0C,KAAK0kE,0BACHvwB,EACiB,sBAAjB/mC,EAAOpf,MACH,CAAC,CAACqe,KAAM,YAAae,EAAOqN,SAC5B,CAAC,CAACpO,KAAM,SAAUe,OAAQA,EAAOpf,OAAQof,EAAOqN,SAExD,GAEA,CAAA1sB,IAAA,cAAAC,MAQA,SACE4gC,EACA24C,EACA9hC,GACsB,IAAAxoC,EAAA,KAChBk9B,EAAOn6B,KAAKs8C,WAChB,CAAC1tB,GACD6W,GAAczlC,KAAKu6C,aAAe,aAE9B2oB,EAAuBljE,KAAK+kE,kBAChC,CACE9mB,SAAU,SAACumB,EAAc/pD,GACvB,GAA0B,WAAtB+pD,EAAan4D,KAAmB,CAClCk7D,EAAS/C,EAAap3D,OAAQqN,GAG9B,IACExd,EAAK6rD,wBAAwBoa,GAE7B,MAAOsE,GACP,CAEJ,GAEFnpB,OAAQ,qBACR+lB,kBAAmB,wBAErBjqC,GAEF,OAAO+oC,CACT,GAEA,CAAAn1E,IAAA,yBAAAC,MAUA,SACE4gC,EACA64C,EACAvsD,GACsB,IAAA7d,EAAA,KACtBqqE,EAAAnzD,GAAAA,GAAA,GACK2G,GAAO,IACVuqB,WACGvqB,GAAWA,EAAQuqB,YAAezlC,KAAKu6C,aAAe,cAHpD9U,EAAUiiC,EAAVjiC,WAAe6wB,GAAKv3C,EAAAA,GAAAA,GAAA2oD,EAAAC,IAKrBxtC,EAAOn6B,KAAKs8C,WAChB,CAAC1tB,GACD6W,OACAj2C,EACA8mE,GAEI4M,EAAuBljE,KAAK+kE,kBAChC,CACE9mB,SAAU,SAACumB,EAAc/pD,GACvBgtD,EAASjD,EAAc/pD,GAGvB,IACEpd,EAAKyrD,wBAAwBoa,GAE7B,MAAOsE,GACP,GAGJnpB,OAAQ,qBACR+lB,kBAAmB,wBAErBjqC,GAEF,OAAO+oC,CACT,GAEA,CAAAn1E,IAAA,0BAAAC,MAAA,eAAA45E,GAAA/0C,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAA2nD,EACE3E,GAA0C,OAAAhjD,KAAAA,MAAA,SAAA4nD,GAAA,cAAAA,EAAAznD,KAAAynD,EAAAxnD,MAAA,cAAAwnD,EAAAxnD,KAAA,EAEpCtgB,KAAKmlE,+BACTjC,EACA,oBACD,wBAAA4E,EAAArnD,OAAA,GAAAonD,EAAA,UACF,gBAAAE,GAAA,OAAAH,EAAA54E,MAAA,KAAAC,UAAA,EAZD,IAcA,CAAAlB,IAAA,wBAAAC,MAGA,SAAsBw2E,GACpB,IAAAwD,EAA+B35E,GAAOm2E,EAActvB,IAA7C9nC,EAAM46D,EAAN56D,OAAQ+mC,EAAY6zB,EAAZ7zB,aACfn0C,KAAK0kE,0BAA8CvwB,EAAc,CAAC/mC,GACpE,GAEA,CAAArf,IAAA,eAAAC,MAMA,SAAaiwD,GACX,OAAOj+C,KAAK+kE,kBACV,CACE9mB,SAAAA,EACAI,OAAQ,gBACR+lB,kBAAmB,mBAErB,GAEJ,GAEA,CAAAr2E,IAAA,2BAAAC,MAAA,eAAAi6E,GAAAp1C,EAAAA,GAAAA,GAAA3S,KAAAA,MAKA,SAAAgoD,EACEhF,GAA0C,OAAAhjD,KAAAA,MAAA,SAAAioD,GAAA,cAAAA,EAAA9nD,KAAA8nD,EAAA7nD,MAAA,cAAA6nD,EAAA7nD,KAAA,EAEpCtgB,KAAKmlE,+BACTjC,EACA,eACD,wBAAAiF,EAAA1nD,OAAA,GAAAynD,EAAA,UACF,gBAAAE,GAAA,OAAAH,EAAAj5E,MAAA,KAAAC,UAAA,EAZD,MAYC8qD,CAAA,CAjrHoB,GC38FVsuB,GAAO,WASlB,SAAAA,EAAYC,IAA0Bz7E,EAAAA,EAAAA,GAAA,KAAAw7E,GAAA,KAR9BE,cAAQ,EASdvoE,KAAKuoE,SAAkB,OAAPD,QAAO,IAAPA,EAAAA,EAAWv3C,IAC7B,CA0DC,OAxDDjkC,EAAAA,EAAAA,GAAAu7E,EAAA,EAAAt6E,IAAA,YAAAsU,IA+DA,WACE,OAAO,IAAI0vB,GAAU/xB,KAAKuoE,SAAShtD,UACrC,GAEA,CAAAxtB,IAAA,YAAAsU,IAIA,WACE,OAAO,IAAInV,WAAW8S,KAAKuoE,SAASt3C,UACtC,IAAC,EAAAljC,IAAA,WAAAC,MApED,WACE,OAAO,IAAIq6E,EAAQt3C,KACrB,GAEA,CAAAhjC,IAAA,gBAAAC,MAcA,SACEijC,EACA/V,GAEA,GAA6B,KAAzB+V,EAAUhyB,WACZ,MAAM,IAAI/P,MAAM,uBAElB,IAAMqsB,EAAY0V,EAAU90B,MAAM,GAAI,IACtC,IAAK+e,IAAYA,EAAQstD,eAGvB,IAFA,IAAMx3C,EAAgBC,EAAU90B,MAAM,EAAG,IACnCssE,EAAoBztD,GAAagW,GAC9B03C,EAAK,EAAGA,EAAK,GAAIA,IACxB,GAAIntD,EAAUmtD,KAAQD,EAAkBC,GACtC,MAAM,IAAIx5E,MAAM,iCAItB,OAAO,IAAIm5E,EAAQ,CAAC9sD,UAAAA,EAAW0V,UAAAA,GACjC,GAEA,CAAAljC,IAAA,WAAAC,MAOA,SAAgBid,GACd,IAAMsQ,EAAYP,GAAa/P,GACzBgmB,EAAY,IAAI/jC,WAAW,IAGjC,OAFA+jC,EAAUnxB,IAAImL,GACdgmB,EAAUnxB,IAAIyb,EAAW,IAClB,IAAI8sD,EAAQ,CAAC9sD,UAAAA,EAAW0V,UAAAA,GACjC,KAACo3C,CAAA,CArEiB,GCwEPM,GAAmCv6E,OAAO+hB,OAAO,CAC5Dy4D,kBAAmB,CACjBzzC,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CACAA,GAAAA,GAAiB,eACjB9wB,GAAiB,cACjB8wB,GAAAA,GAAgB,eAGpB4yC,kBAAmB,CACjB1zC,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,kBAEtB6yC,kBAAmB,CACjB3zC,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CACAA,GAAAA,GAAiB,eACjB9wB,KACA8wB,GAAAA,GACE1a,KACA0a,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,gBAIN8yC,sBAAuB,CACrB5zC,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,kBAEtB+yC,iBAAkB,CAChB7zC,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAiB,oBAuIXgzC,GAAyB,WAIpC,SAAAA,KAAcp8E,EAAAA,EAAAA,GAAA,KAAAo8E,EAAC,CAuKd,OAvKen8E,EAAAA,EAAAA,GAAAm8E,EAAA,OAAAl7E,IAAA,oBAAAC,MAMhB,SAAyBo6C,GACvB,IAAA8gC,EAAuCn3C,GAAU+B,uBAC/C,CAACsU,EAAOyG,UAAUzd,YAAYgW,EAAAA,GAAAA,IAAWzlC,OAAOymC,EAAO+gC,YAAa,IACpEnpE,KAAK+yB,WACNq2C,GAAA9jE,EAAAA,EAAAA,GAAA4jE,EAAA,GAHMG,EAAkBD,EAAA,GAAEE,EAAQF,EAAA,GAM7B5pE,EAAO4mC,GADAuiC,GAAiCC,kBAChB,CAC5BO,WAAYxnE,OAAOymC,EAAO+gC,YAC1BG,SAAUA,IAGNvlD,EAAO,CACX,CACEiS,OAAQqzC,EACRhyC,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQoS,EAAOyG,UACfxX,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQoS,EAAOpR,MACfK,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQmS,GAAcpV,UACtBsE,UAAU,EACVC,YAAY,IAIhB,MAAO,CACL,IAAI8H,GAAuB,CACzBrM,UAAW/yB,KAAK+yB,UAChBhP,KAAMA,EACNvkB,KAAMA,IAER6pE,EAEJ,GAAC,CAAAt7E,IAAA,oBAAAC,MAED,SAAyBo6C,GACvB,IACM5oC,EAAO4mC,GADAuiC,GAAiCE,mBAGxC9kD,EAAO,CACX,CACEiS,OAAQoS,EAAO/P,YACfhB,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQoS,EAAOyG,UACfxX,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAI8H,GAAuB,CAChCrM,UAAW/yB,KAAK+yB,UAChBhP,KAAMA,EACNvkB,KAAMA,GAEV,GAAC,CAAAzR,IAAA,oBAAAC,MAED,SAAyBo6C,GACvB,IACM5oC,EAAO4mC,GADAuiC,GAAiCG,kBAChB,CAC5BtwC,UAAW4P,EAAO5P,UAAUpzB,KAAI,SAAAmkE,GAAI,OAAIA,EAAKhqE,SAAS,MAGlDwkB,EAAO,CACX,CACEiS,OAAQoS,EAAO/P,YACfhB,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQoS,EAAOyG,UACfxX,UAAU,EACVC,YAAY,IAmBhB,OAfI8Q,EAAOpR,OACTjT,EAAKzuB,KACH,CACE0gC,OAAQoS,EAAOpR,MACfK,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQmS,GAAcpV,UACtBsE,UAAU,EACVC,YAAY,IAKX,IAAI8H,GAAuB,CAChCrM,UAAW/yB,KAAK+yB,UAChBhP,KAAMA,EACNvkB,KAAMA,GAEV,GAAC,CAAAzR,IAAA,wBAAAC,MAED,SAA6Bo6C,GAC3B,IACM5oC,EAAO4mC,GADAuiC,GAAiCI,uBAGxChlD,EAAO,CACX,CACEiS,OAAQoS,EAAO/P,YACfhB,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQoS,EAAOyG,UACfxX,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAI8H,GAAuB,CAChCrM,UAAW/yB,KAAK+yB,UAChBhP,KAAMA,EACNvkB,KAAMA,GAEV,GAAC,CAAAzR,IAAA,mBAAAC,MAED,SAAwBo6C,GACtB,IACM5oC,EAAO4mC,GADAuiC,GAAiCK,kBAGxCjlD,EAAO,CACX,CACEiS,OAAQoS,EAAO/P,YACfhB,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQoS,EAAOyG,UACfxX,UAAU,EACVC,YAAY,GAEd,CACEtB,OAAQoS,EAAOohC,UACfnyC,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAI8H,GAAuB,CAChCrM,UAAW/yB,KAAK+yB,UAChBhP,KAAMA,EACNvkB,KAAMA,GAEV,KAACypE,CAAA,CA3KmC,GAAzBA,GAMJl2C,UAAuB,IAAIhB,GAChC,+CC9PJ,IAoKa03C,GAAqCr7E,OAAO+hB,OAItD,CACDu5D,aAAc,CACZv0C,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CACAA,GAAAA,GAAgB,eAChBA,GAAAA,GAAiB,SACjBA,GAAAA,GAAiB,oBAGrB0zC,iBAAkB,CAChBx0C,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAgB,eAAgBA,GAAAA,GAAiB,YAEtD2zC,oBAAqB,CACnBz0C,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAgB,eAAgBA,GAAAA,GAAiB,YAEtD4zC,oBAAqB,CACnB10C,MAAO,EACPllC,OAAQgmC,GAAAA,GAEN,CAACA,GAAAA,GAAgB,eAAgB9wB,GAAI,sBAO9B2kE,GAAoB,WAI/B,SAAAA,KAAcj9E,EAAAA,EAAAA,GAAA,KAAAi9E,EAAC,CA0Dd,OAxDDh9E,EAAAA,EAAAA,GAAAg9E,EAAA,OAAA/7E,IAAA,eAAAC,MAUA,SAAoBo6C,GAClB,IACM5oC,EAAO4mC,GADAqjC,GAAmCC,aAClBthC,GAC9B,OAAO,IAAIhJ,GAAuB,CAChCrb,KAAM,GACNgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAAC,CAAAzR,IAAA,mBAAAC,MAED,SACEo6C,GAEA,IACM5oC,EAAO4mC,GADAqjC,GAAmCE,iBAClBvhC,GAC9B,OAAO,IAAIhJ,GAAuB,CAChCrb,KAAM,GACNgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAAC,CAAAzR,IAAA,sBAAAC,MAED,SACEo6C,GAEA,IACM5oC,EAAO4mC,GADAqjC,GAAmCG,oBAClBxhC,GAC9B,OAAO,IAAIhJ,GAAuB,CAChCrb,KAAM,GACNgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAAC,CAAAzR,IAAA,sBAAAC,MAED,SACEo6C,GAEA,IACM5oC,EAAO4mC,GADAqjC,GAAmCI,oBAClB,CAC5BE,cAAepoE,OAAOymC,EAAO2hC,iBAE/B,OAAO,IAAI3qC,GAAuB,CAChCrb,KAAM,GACNgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,KAACsqE,CAAA,CA9D8B,GAApBA,GASJ/2C,UAAuB,IAAIhB,GAChC,+CC1NJ,IAuBMi4C,GAA6B/zC,GAAAA,GAYjC,CACAA,GAAAA,GAAgB,iBAChBA,GAAAA,GAAgB,WAChBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAiB,6BACjBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAiB,6BACjBA,GAAAA,GAAiB,qBACjBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAiB,6BAGNg0C,GAAc,WAIzB,SAAAA,KAAcp9E,EAAAA,EAAAA,GAAA,KAAAo9E,EAAC,CA+Fd,OA7FDn9E,EAAAA,EAAAA,GAAAm9E,EAAA,OAAAl8E,IAAA,iCAAAC,MAYA,SACEo6C,GAEA,IAAO7sB,EAAmD6sB,EAAnD7sB,UAAWsD,EAAwCupB,EAAxCvpB,QAAS+P,EAA+BwZ,EAA/BxZ,UAAWs7C,EAAoB9hC,EAApB8hC,iBAEtC3nD,GArEqB,KAsEnBhH,EAAU9tB,OAA2B,sBAAAgQ,OAtElB,GAuEmB,wBAAAA,OAAuB8d,EAAU9tB,OAAM,WAG/E80B,GAzEoB,KA0ElBqM,EAAUnhC,OAA0B,qBAAAgQ,OA1ElB,GA2EkB,wBAAAA,OAAuBmxB,EAAUnhC,OAAM,WAG7E,IAAM08E,EAAkBH,GAA2Br8E,KAC7Cy8E,EAAkBD,EAAkB5uD,EAAU9tB,OAC9C48E,EAAoBD,EAAkBx7C,EAAUnhC,OAGhDy7C,EAAkB77C,EAAAA,OAAOslC,MAAM03C,EAAoBxrD,EAAQpxB,QAE3D0nC,EACgB,MAApB+0C,EACI,MACAA,EAqBN,OAnBAF,GAA2B15E,OACzB,CACEg6E,cAXkB,EAYlBC,QAAS,EACTH,gBAAAA,EACAI,0BAA2Br1C,EAC3Bg1C,gBAAAA,EACAM,0BAA2Bt1C,EAC3Bk1C,kBAAAA,EACAK,gBAAiB7rD,EAAQpxB,OACzBk9E,wBAAyBx1C,GAE3B+T,GAGFA,EAAgB1nC,KAAK+Z,EAAW4uD,GAChCjhC,EAAgB1nC,KAAKotB,EAAWw7C,GAChClhC,EAAgB1nC,KAAKqd,EAASwrD,GAEvB,IAAIjrC,GAAuB,CAChCrb,KAAM,GACNgP,UAAWk3C,EAAel3C,UAC1BvzB,KAAM0pC,GAEV,GAEA,CAAAn7C,IAAA,kCAAAC,MAIA,SACEo6C,GAEA,IAAOhd,EAAyCgd,EAAzChd,WAAYvM,EAA6BupB,EAA7BvpB,QAASqrD,EAAoB9hC,EAApB8hC,iBAE5B3nD,GA/HsB,KAgIpB6I,EAAW39B,OAA4B,uBAAAgQ,OAhInB,GAiIoB,wBAAAA,OAAuB2tB,EAAW39B,OAAM,WAGlF,IACE,IAAM66E,EAAUD,GAAQuC,cAAcx/C,GAChC7P,EAAY+sD,EAAQ/sD,UAAUhc,UAC9BqvB,EAAY3T,GAAK4D,EAASypD,EAAQr3C,WAExC,OAAOjxB,KAAK6qE,+BAA+B,CACzCtvD,UAAAA,EACAsD,QAAAA,EACA+P,UAAAA,EACAs7C,iBAAAA,IAEF,MAAOxuD,GACP,MAAM,IAAIxsB,MAAM,+BAADuO,OAAgCie,GACjD,CACF,KAACuuD,CAAA,CAnGwB,GAAdA,GASJl3C,UAAuB,IAAIhB,GAChC,+CCzD6BxB,GAAU1V,MAAMoS,kBAC1C,IAAM69C,GAAkBv6C,GAAUvV,aCoCnC+vD,GAA+B90C,GAAAA,GAcnC,CACAA,GAAAA,GAAgB,iBAChBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAgB,6BAChBA,GAAAA,GAAiB,oBACjBA,GAAAA,GAAgB,8BAChBA,GAAAA,GAAiB,qBACjBA,GAAAA,GAAiB,mBACjBA,GAAAA,GAAgB,2BAChBA,GAAAA,GAAkB,GAAI,cACtBA,GAAAA,GAAkB,GAAI,aACtBA,GAAAA,GAAgB,gBAGL+0C,GAAgB,WAI3B,SAAAA,KAAcn+E,EAAAA,EAAAA,GAAA,KAAAm+E,EAAC,CAoJd,OAlJDl+E,EAAAA,EAAAA,GAAAk+E,EAAA,OAAAj9E,IAAA,wBAAAC,MAWA,SACEutB,GAEAgH,GAlFqB,KAmFnBhH,EAAU9tB,OAA2B,sBAAAgQ,OAnFlB,GAoFmB,wBAAAA,OAAuB8d,EAAU9tB,OAAM,WAG/E,IACE,OAAOJ,EAAAA,OAAOC,KAAKw5B,GAAWsK,GAAS7V,KAAapf,OAzF3B,IA4FzB,MAAOuf,GACP,MAAM,IAAIxsB,MAAM,wCAADuO,OAAyCie,GAC1D,CACF,GAEA,CAAA3tB,IAAA,iCAAAC,MAIA,SACEo6C,GAEA,IAAO7sB,EACL6sB,EADK7sB,UAAWsD,EAChBupB,EADgBvpB,QAAS+P,EACzBwZ,EADyBxZ,UAAWq8C,EACpC7iC,EADoC6iC,WAAYf,EAChD9hC,EADgD8hC,iBAElD,OAAOc,EAAiBE,gCAAgC,CACtDC,WAAYH,EAAiBI,sBAAsB7vD,GACnDsD,QAAAA,EACA+P,UAAAA,EACAq8C,WAAAA,EACAf,iBAAAA,GAEJ,GAEA,CAAAn8E,IAAA,kCAAAC,MAIA,SACEo6C,GAEA,IAQI+iC,EAPUE,EAKVjjC,EALF+iC,WACAtsD,EAIEupB,EAJFvpB,QACA+P,EAGEwZ,EAHFxZ,UACAq8C,EAEE7iC,EAFF6iC,WAAUK,EAERljC,EADF8hC,iBAAAA,OAAmB,IAAHoB,EAAG,EAACA,EActB/oD,GA7I2B,MAqIvB4oD,EAFsB,kBAAfE,EACLA,EAAWluB,WAAW,MACX9vD,EAAAA,OAAOC,KAAK+9E,EAAWE,OAAO,GAAI,OAElCl+E,EAAAA,OAAOC,KAAK+9E,EAAY,OAG1BA,GAIF59E,OAAiC,mBAAAgQ,OA9InB,GA+IgB,wBAAAA,OAAuB0tE,EAAW19E,OAAM,WAGnF,IAEM28E,EAFY,GAEkBe,EAAW19E,OACzC48E,EAAoBD,EAAkBx7C,EAAUnhC,OAAS,EAGzDy7C,EAAkB77C,EAAAA,OAAOslC,MAC7Bo4C,GAA6Bp9E,KAAOkxB,EAAQpxB,QAsB9C,OAnBAs9E,GAA6Bz6E,OAC3B,CACEg6E,cARkB,EASlBF,gBAAAA,EACAI,0BAA2BN,EAC3BsB,iBAfc,GAgBdC,2BAA4BvB,EAC5BG,kBAAAA,EACAK,gBAAiB7rD,EAAQpxB,OACzBk9E,wBAAyBT,EACzBt7C,UAAWwC,GAASxC,GACpBu8C,WAAY/5C,GAAS+5C,GACrBF,WAAAA,GAEF/hC,GAGFA,EAAgB1nC,KAAK4vB,GAASvS,GAAUksD,GAA6Bp9E,MAE9D,IAAIyxC,GAAuB,CAChCrb,KAAM,GACNgP,UAAWi4C,EAAiBj4C,UAC5BvzB,KAAM0pC,GAEV,GAEA,CAAAn7C,IAAA,kCAAAC,MAIA,SACEo6C,GAEA,IAAmBsjC,EAAmCtjC,EAA/Chd,WAAkBvM,EAA6BupB,EAA7BvpB,QAASqrD,EAAoB9hC,EAApB8hC,iBAElC3nD,GAhMsB,KAiMpBmpD,EAAKj+E,OAA4B,uBAAAgQ,OAjMb,GAkMoB,wBAAAA,OAAuBiuE,EAAKj+E,OAAM,WAG5E,IACE,IAAM29B,EAAagG,GAASs6C,GACtBnwD,EAAYuvD,GAChB1/C,GACA,GACAjvB,MAAM,GAERwvE,EDpNmB,SACvBr/C,EACAxS,GAEA,IAAM8U,EAAY2B,GAAUtV,KAAKqR,EAASxS,GAC1C,MAAO,CAAC8U,EAAUg9C,oBAAqBh9C,EAAUvC,SACnD,CC8MsCw/C,CADZx+E,EAAAA,OAAOC,KAAKw5B,GAAWsK,GAASvS,KACGuM,GAAW0gD,GAAAxmE,EAAAA,EAAAA,GAAAqmE,EAAA,GAA3D/8C,EAASk9C,EAAA,GAAEb,EAAUa,EAAA,GAE5B,OAAO9rE,KAAK6qE,+BAA+B,CACzCtvD,UAAAA,EACAsD,QAAAA,EACA+P,UAAAA,EACAq8C,WAAAA,EACAf,iBAAAA,IAEF,MAAOxuD,GACP,MAAM,IAAIxsB,MAAM,+BAADuO,OAAgCie,GACjD,CACF,KAACsvD,CAAA,CAxJ0B,GAAhBA,GASJj4C,UAAuB,IAAIhB,GAChC,mDC7DSg6C,GAAkB,IAAIh6C,GACjC,+CA+BWi6C,IAAMl/E,EAAAA,EAAAA,IAWjB,SAAAk/E,EAAYC,EAAuBjgC,EAAekgC,IAAsBr/E,EAAAA,EAAAA,GAAA,KAAAm/E,GAVxE,KACAC,mBAAa,EACb,KACAjgC,WAAK,EACL,KACAkgC,eAAS,EAMPlsE,KAAKisE,cAAgBA,EACrBjsE,KAAKgsC,MAAQA,EACbhsC,KAAKksE,UAAYA,CACnB,IAfWF,GAAM,QAoBQ,IAAIA,GAAO,EAAG,EAAGj6C,GAAS,SAqIrD,IAgSao6C,GAA4B/9E,OAAO+hB,OAI7C,CACDi8D,WAAY,CACVj3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAA6D,CACnEA,GAAAA,GAAiB,elC1ZG,WAAqC,IAApCroC,EAAgBqB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,aAC5C,OAAOgnC,GAAAA,GAKL,CAAC1a,GAAU,UAAWA,GAAU,eAAgB3tB,EACpD,CkCoZMq7C,GlC/YgB,WAAiC,IAAhCr7C,EAAgBqB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,SACxC,OAAOgnC,GAAAA,GAOL,CACEA,GAAAA,GAAkB,iBAClBA,GAAAA,GAAkB,SAClB1a,GAAU,cAEZ3tB,EAEJ,CkCiYMy+E,MAGJC,UAAW,CACTn3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAA4D,CAClEA,GAAAA,GAAiB,eACjB1a,GAAiB,iBACjB0a,GAAAA,GAAiB,6BAGrBs2C,SAAU,CACRp3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAA2D,CACjEA,GAAAA,GAAiB,kBAGrBu2C,MAAO,CACLr3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAAwD,CAC9DA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,eAGtBw2C,SAAU,CACRt3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAA2D,CACjEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,eAGtBy2C,WAAY,CACVv3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAA6D,CACnEA,GAAAA,GAAiB,kBAGrB02C,MAAO,CACLx3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAAwD,CAC9DA,GAAAA,GAAiB,kBAGrB22C,kBAAmB,CACjBz3C,MAAO,EACPllC,OAAQgmC,GAAAA,GACN,CACEA,GAAAA,GAAiB,eACjB1a,GAAiB,iBACjB0a,GAAAA,GAAiB,0BACjBC,GAAkB,iBAClB3a,GAAiB,uBA6BZsxD,IAZ2Bz+E,OAAO+hB,OAAO,CACpD28D,OAAQ,CACN33C,MAAO,GAET43C,WAAY,CACV53C,MAAO,KAOc,WAIvB,SAAA03C,KAAchgF,EAAAA,EAAAA,GAAA,KAAAggF,EAAC,CAuVd,OArVD//E,EAAAA,EAAAA,GAAA+/E,EAAA,OAAA9+E,IAAA,aAAAC,MAmBA,SAAkBo6C,GAChB,IAAO4kC,EAAgD5kC,EAAhD4kC,YAAa/jC,EAAmCb,EAAnCa,WACdojC,EADiDjkC,EAAvBikC,QACML,GAAc,QAE9CxsE,EAAO4mC,GADA+lC,GAA0BC,WACT,CAC5BnjC,WAAY,CACVgkC,OAAQ77C,GAAS6X,EAAWgkC,OAAO77C,YACnC87C,WAAY97C,GAAS6X,EAAWikC,WAAW97C,aAE7Ci7C,OAAQ,CACNJ,cAAeI,EAAOJ,cACtBjgC,MAAOqgC,EAAOrgC,MACdkgC,UAAW96C,GAASi7C,EAAOH,UAAU96C,eAGnC8X,EAAkB,CACtBnlB,KAAM,CACJ,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQgP,GAAoB3N,UAAU,EAAOC,YAAY,IAE5DvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEF,OAAO,IAAI4/B,GAAuB8J,EACpC,GAEA,CAAAn7C,IAAA,wBAAAC,MAIA,SACEo6C,GAEA,IAAM9M,EAAc,IAAIgE,GACxBhE,EAAYn3B,IACVgkC,GAAcS,sBAAsB,CAClCL,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAO4kC,YACzBvkC,WAAYL,EAAOK,WACnBx9B,KAAMm9B,EAAOn9B,KACbo9B,SAAUD,EAAOC,SACjBC,MAAOtoC,KAAKsoC,MACZvV,UAAW/yB,KAAK+yB,aAIpB,IAAOi6C,EAAmC5kC,EAAnC4kC,YAAa/jC,EAAsBb,EAAtBa,WAAYojC,EAAUjkC,EAAVikC,OAChC,OAAO/wC,EAAYn3B,IAAInE,KAAKmtE,WAAW,CAACH,YAAAA,EAAa/jC,WAAAA,EAAYojC,OAAAA,IACnE,GAEA,CAAAt+E,IAAA,gBAAAC,MAGA,SAAqBo6C,GACnB,IAAM9M,EAAc,IAAIgE,GACxBhE,EAAYn3B,IACVgkC,GAAcW,cAAc,CAC1BP,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAO4kC,YACzB3kC,SAAUD,EAAOC,SACjBC,MAAOtoC,KAAKsoC,MACZvV,UAAW/yB,KAAK+yB,aAIpB,IAAOi6C,EAAmC5kC,EAAnC4kC,YAAa/jC,EAAsBb,EAAtBa,WAAYojC,EAAUjkC,EAAVikC,OAChC,OAAO/wC,EAAYn3B,IAAInE,KAAKmtE,WAAW,CAACH,YAAAA,EAAa/jC,WAAAA,EAAYojC,OAAAA,IACnE,GAEA,CAAAt+E,IAAA,WAAAC,MAKA,SAAgBo6C,GACd,IAAO4kC,EAA6C5kC,EAA7C4kC,YAAarmC,EAAgCyB,EAAhCzB,iBAAkB4O,EAAcnN,EAAdmN,WAGhC/1C,EAAO4mC,GADA+lC,GAA0BI,UAGvC,OAAO,IAAIjtC,IAAcn7B,IAAI,CAC3B4f,KAAM,CACJ,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQuf,EAAYle,UAAU,EAAOC,YAAY,GAClD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CACEtB,OAAQiP,GACR5N,UAAU,EACVC,YAAY,GAEd,CAACtB,OAAQ+1C,GAAiB10C,UAAU,EAAOC,YAAY,GACvD,CAACtB,OAAQ2Q,EAAkBtP,UAAU,EAAMC,YAAY,IAEzDvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,YAAAC,MAIA,SAAiBo6C,GACf,IACE4kC,EAKE5kC,EALF4kC,YACArmC,EAIEyB,EAJFzB,iBACAwC,EAGEf,EAHFe,oBACAikC,EAEEhlC,EAFFglC,uBACAC,EACEjlC,EADFilC,gBAII7tE,EAAO4mC,GADA+lC,GAA0BG,UACT,CAC5BgB,cAAel8C,GAAS+X,EAAoB/X,YAC5Cg8C,uBAAwBA,EAAuBj4C,QAG3CpR,EAAO,CACX,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CAACtB,OAAQ2Q,EAAkBtP,UAAU,EAAMC,YAAY,IASzD,OAPI+1C,GACFtpD,EAAKzuB,KAAK,CACR0gC,OAAQq3C,EACRh2C,UAAU,EACVC,YAAY,KAGT,IAAIgI,IAAcn7B,IAAI,CAC3B4f,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,oBAAAC,MAIA,SAAyBo6C,GACvB,IACE4kC,EAOE5kC,EAPF4kC,YACAO,EAMEnlC,EANFmlC,cACAC,EAKEplC,EALFolC,cACAC,EAIErlC,EAJFqlC,eACAtkC,EAGEf,EAHFe,oBACAikC,EAEEhlC,EAFFglC,uBACAC,EACEjlC,EADFilC,gBAII7tE,EAAO4mC,GADA+lC,GAA0BS,kBACT,CAC5BU,cAAel8C,GAAS+X,EAAoB/X,YAC5Cg8C,uBAAwBA,EAAuBj4C,MAC/Cq4C,cAAeA,EACfC,eAAgBr8C,GAASq8C,EAAer8C,cAGpCrN,EAAO,CACX,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQu3C,EAAel2C,UAAU,EAAMC,YAAY,GACpD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,IAS7D,OAPI+1C,GACFtpD,EAAKzuB,KAAK,CACR0gC,OAAQq3C,EACRh2C,UAAU,EACVC,YAAY,KAGT,IAAIgI,IAAcn7B,IAAI,CAC3B4f,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,mBAAAC,MAGA,SAAwBo6C,GACtB,IAAO4kC,EAA6D5kC,EAA7D4kC,YAAarmC,EAAgDyB,EAAhDzB,iBAAkB+mC,EAA8BtlC,EAA9BslC,iBAAkBrlC,EAAYD,EAAZC,SAElD7oC,EAAO4mC,GADA+lC,GAA0BK,MACT,CAACnkC,SAAAA,IAC/B,OAAO,IAAIjJ,GAAuB,CAChCrb,KAAM,CACJ,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQ03C,EAAkBr2C,UAAU,EAAOC,YAAY,GACxD,CAACtB,OAAQ2Q,EAAkBtP,UAAU,EAAMC,YAAY,IAEzDvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,QAAAC,MAGA,SAAao6C,GACX,IAAM9M,EAAc,IAAIgE,GAUxB,OATAhE,EAAYn3B,IACVgkC,GAAcW,cAAc,CAC1BP,WAAYH,EAAOzB,iBACnB6B,iBAAkBJ,EAAOslC,iBACzBrlC,SAAU,EACVC,MAAOtoC,KAAKsoC,MACZvV,UAAW/yB,KAAK+yB,aAGbuI,EAAYn3B,IAAInE,KAAK2tE,iBAAiBvlC,GAC/C,GAEA,CAAAr6C,IAAA,gBAAAC,MAIA,SAAqBo6C,GACnB,IACE4kC,EAME5kC,EANF4kC,YACArmC,EAKEyB,EALFzB,iBACA+mC,EAIEtlC,EAJFslC,iBACAjlC,EAGEL,EAHFK,WACAx9B,EAEEm9B,EAFFn9B,KACAo9B,EACED,EADFC,SAEI/M,EAAc,IAAIgE,GAUxB,OATAhE,EAAYn3B,IACVgkC,GAAcoC,SAAS,CACrB5B,cAAe+kC,EACfjlC,WAAAA,EACAx9B,KAAAA,EACAq9B,MAAOtoC,KAAKsoC,MACZvV,UAAW/yB,KAAK+yB,aAGbuI,EAAYn3B,IACjBnE,KAAK2tE,iBAAiB,CACpBX,YAAAA,EACArmC,iBAAAA,EACA+mC,iBAAAA,EACArlC,SAAAA,IAGN,GAEA,CAAAt6C,IAAA,QAAAC,MAGA,SAAao6C,GACX,IAAO4kC,EAAoD5kC,EAApD4kC,YAAaY,EAAuCxlC,EAAvCwlC,kBAAmBjnC,EAAoByB,EAApBzB,iBAEjCnnC,EAAO4mC,GADA+lC,GAA0BQ,OAGvC,OAAO,IAAIrtC,IAAcn7B,IAAI,CAC3B4f,KAAM,CACJ,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQ43C,EAAmBv2C,UAAU,EAAOC,YAAY,GACzD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CACEtB,OAAQiP,GACR5N,UAAU,EACVC,YAAY,GAEd,CAACtB,OAAQ2Q,EAAkBtP,UAAU,EAAMC,YAAY,IAEzDvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,WAAAC,MAGA,SAAgBo6C,GACd,IAAO4kC,EACL5kC,EADK4kC,YAAarmC,EAClByB,EADkBzB,iBAAkB+B,EACpCN,EADoCM,SAAUL,EAC9CD,EAD8CC,SAAUglC,EACxDjlC,EADwDilC,gBAGpD7tE,EAAO4mC,GADA+lC,GAA0BM,SACT,CAACpkC,SAAAA,IAEzBtkB,EAAO,CACX,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQ0S,EAAUrR,UAAU,EAAOC,YAAY,GAChD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CACEtB,OAAQiP,GACR5N,UAAU,EACVC,YAAY,GAEd,CAACtB,OAAQ2Q,EAAkBtP,UAAU,EAAMC,YAAY,IASzD,OAPI+1C,GACFtpD,EAAKzuB,KAAK,CACR0gC,OAAQq3C,EACRh2C,UAAU,EACVC,YAAY,KAGT,IAAIgI,IAAcn7B,IAAI,CAC3B4f,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,aAAAC,MAGA,SAAkBo6C,GAChB,IAAO4kC,EAAiC5kC,EAAjC4kC,YAAarmC,EAAoByB,EAApBzB,iBAEdnnC,EAAO4mC,GADA+lC,GAA0BO,YAGvC,OAAO,IAAIptC,IAAcn7B,IAAI,CAC3B4f,KAAM,CACJ,CAACiS,OAAQg3C,EAAa31C,UAAU,EAAOC,YAAY,GACnD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CAACtB,OAAQ2Q,EAAkBtP,UAAU,EAAMC,YAAY,IAEzDvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,KAACqtE,CAAA,CA3VsB,IAAZA,GASJ95C,UAAuB,IAAIhB,GAChC,+CAVS86C,GAoBJvkC,MAAgB,IC5kBZ,IAgRPulC,GAA2Bz/E,OAAO+hB,OAIrC,CACD29D,kBAAmB,CACjB34C,MAAO,EACPllC,OAAQgmC,GAAAA,GAAmE,CACzEA,GAAAA,GAAiB,enC5KC,WAAmC,IAAlCroC,EAAgBqB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,WAC1C,OAAOgnC,GAAAA,GAQL,CACE1a,GAAU,cACVA,GAAU,mBACVA,GAAU,wBACV0a,GAAAA,GAAgB,eAElBroC,EAEJ,CmC4JMmgF,MAGJzB,UAAW,CACTn3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAA2D,CACjEA,GAAAA,GAAiB,eACjB1a,GAAiB,iBACjB0a,GAAAA,GAAiB,4BAGrBw2C,SAAU,CACRt3C,MAAO,EACPllC,OAAQgmC,GAAAA,GAA0D,CAChEA,GAAAA,GAAiB,eACjBA,GAAAA,GAAkB,eAGtB22C,kBAAmB,CACjBz3C,MAAO,GACPllC,OAAQgmC,GAAAA,GAAmE,CACzEA,GAAAA,GAAiB,enC5KkB,WAEpC,IADHroC,EAAgBqB,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAG,4BAEnB,OAAOgnC,GAAAA,GACL,CACEA,GAAAA,GAAiB,yBACjB1a,GAAU,yCACV2a,GAAW,kCACX3a,GAAU,kBAEZ3tB,EAEJ,CmCiKMogF,QA4BOC,IAZ0B7/E,OAAO+hB,OAAO,CACnD+9D,MAAO,CACL/4C,MAAO,GAET43C,WAAY,CACV53C,MAAO,KAOa,WAItB,SAAA84C,KAAcphF,EAAAA,EAAAA,GAAA,KAAAohF,EAAC,CA4Ld,OA1LDnhF,EAAAA,EAAAA,GAAAmhF,EAAA,OAAAlgF,IAAA,oBAAAC,MAqBA,SACEo6C,GAEA,IAAOmN,EAAoCnN,EAApCmN,WAAYC,EAAwBpN,EAAxBoN,WAAYu4B,EAAY3lC,EAAZ2lC,SAEzBvuE,EAAO4mC,GADAynC,GAAyBC,kBACR,CAC5BC,SAAU,CACRv4B,WAAYpkB,GAAS28C,EAASv4B,WAAWpkB,YACzC+8C,gBAAiB/8C,GAAS28C,EAASI,gBAAgB/8C,YACnDg9C,qBAAsBh9C,GACpB28C,EAASK,qBAAqBh9C,YAEhCmf,WAAYw9B,EAASx9B,cAGnBrH,EAAkB,CACtBnlB,KAAM,CACJ,CAACiS,OAAQuf,EAAYle,UAAU,EAAOC,YAAY,GAClD,CAACtB,OAAQgP,GAAoB3N,UAAU,EAAOC,YAAY,GAC1D,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CAACtB,OAAQwf,EAAYne,UAAU,EAAMC,YAAY,IAEnDvE,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEF,OAAO,IAAI4/B,GAAuB8J,EACpC,GAEA,CAAAn7C,IAAA,gBAAAC,MAGA,SAAqBo6C,GACnB,IAAM9M,EAAc,IAAIgE,GAWxB,OAVAhE,EAAYn3B,IACVgkC,GAAcW,cAAc,CAC1BP,WAAYH,EAAOG,WACnBC,iBAAkBJ,EAAOmN,WACzBlN,SAAUD,EAAOC,SACjBC,MAAOtoC,KAAKsoC,MACZvV,UAAW/yB,KAAK+yB,aAIbuI,EAAYn3B,IACjBnE,KAAKquE,kBAAkB,CACrB94B,WAAYnN,EAAOmN,WACnBC,WAAYpN,EAAO2lC,SAASv4B,WAC5Bu4B,SAAU3lC,EAAO2lC,WAGvB,GAEA,CAAAhgF,IAAA,YAAAC,MAGA,SAAiBo6C,GACf,IACEmN,EAIEnN,EAJFmN,WACA5O,EAGEyB,EAHFzB,iBACAwC,EAEEf,EAFFe,oBACAmlC,EACElmC,EADFkmC,sBAII9uE,EAAO4mC,GADAynC,GAAyBvB,UACR,CAC5BgB,cAAel8C,GAAS+X,EAAoB/X,YAC5Ck9C,sBAAuBA,EAAsBn5C,QAGzCpR,EAAO,CACX,CAACiS,OAAQuf,EAAYle,UAAU,EAAOC,YAAY,GAClD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CAACtB,OAAQ2Q,EAAkBtP,UAAU,EAAMC,YAAY,IAGzD,OAAO,IAAIgI,IAAcn7B,IAAI,CAC3B4f,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,oBAAAC,MAIA,SAAyBo6C,GACvB,IACEmmC,EAMEnmC,EANFmmC,qCACAC,EAKEpmC,EALFomC,sCACAC,EAIErmC,EAJFqmC,+BACAtlC,EAGEf,EAHFe,oBACAmlC,EAEElmC,EAFFkmC,sBACA/4B,EACEnN,EADFmN,WAII/1C,EAAO4mC,GADAynC,GAAyBjB,kBACR,CAC5BoB,0BAA2B,CACzBQ,sCAAuCp9C,GACrCo9C,EAAsCp9C,YAExCq9C,+BAAgCA,EAChCnB,cAAel8C,GAAS+X,EAAoB/X,YAC5Ck9C,sBAAuBA,EAAsBn5C,SAI3CpR,EAAO,CACX,CAACiS,OAAQuf,EAAYle,UAAU,EAAOC,YAAY,GAClD,CAACtB,OAAQ8O,GAAqBzN,UAAU,EAAOC,YAAY,GAC3D,CACEtB,OAAQu4C,EACRl3C,UAAU,EACVC,YAAY,IAIhB,OAAO,IAAIgI,IAAcn7B,IAAI,CAC3B4f,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,WAAAC,MAGA,SAAgBo6C,GACd,IAAOmN,EAA8DnN,EAA9DmN,WAAYm5B,EAAkDtmC,EAAlDsmC,2BAA4BrmC,EAAsBD,EAAtBC,SAAUK,EAAYN,EAAZM,SAEnDlpC,EAAO4mC,GADAynC,GAAyBpB,SACR,CAACpkC,SAAAA,IAEzBtkB,EAAO,CACX,CAACiS,OAAQuf,EAAYle,UAAU,EAAOC,YAAY,GAClD,CAACtB,OAAQ0S,EAAUrR,UAAU,EAAOC,YAAY,GAChD,CAACtB,OAAQ04C,EAA4Br3C,UAAU,EAAMC,YAAY,IAGnE,OAAO,IAAIgI,IAAcn7B,IAAI,CAC3B4f,KAAAA,EACAgP,UAAW/yB,KAAK+yB,UAChBvzB,KAAAA,GAEJ,GAEA,CAAAzR,IAAA,eAAAC,MAQA,SACEo6C,EACAumC,EACAC,GAEA,GAAIxmC,EAAOC,SAAWsmC,EAA4BC,EAChD,MAAM,IAAI1/E,MACR,4DAGJ,OAAO++E,EAAYY,SAASzmC,EAC9B,KAAC6lC,CAAA,CAhMqB,IAAXA,GASJl7C,UAAuB,IAAIhB,GAChC,+CAVSk8C,GAsBJ3lC,MAAgB,KCvWS,IAAIvW,GACpC,+CAyBiB1lB,GAAK,CACtB1d,KAAM+c,KACNojE,QAASprD,GAAShY,MAClBqjE,QAASrrD,GAAShY,MAClBsjE,gBAAiBtrD,GAAShY,QCnCG,IAAIqmB,GACjC,+CAoEwBkE,GAAAA,GAAqC,CAC7D1a,GAAiB,cACjBA,GAAiB,wBACjB0a,GAAAA,GAAgB,cAChBA,GAAAA,KACAA,GAAAA,GACEA,GAAAA,GAAoB,CAClBA,GAAAA,GAAkB,QAClBA,GAAAA,GAAiB,uBAEnBA,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,SAEFA,GAAAA,GAAgB,iBAChBA,GAAAA,GAAkB,YAClBA,GAAAA,KACAA,GAAAA,GACEA,GAAAA,GAAoB,CAClBA,GAAAA,GAAkB,SAClB1a,GAAiB,qBAEnB0a,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,oBAEFA,GAAAA,GACE,CACEA,GAAAA,GACEA,GAAAA,GAAoB,CAClB1a,GAAiB,oBACjB0a,GAAAA,GAAkB,+BAClBA,GAAAA,GAAkB,iBAEpB,GACA,OAEFA,GAAAA,GAAkB,OAClBA,GAAAA,GAAgB,YAElB,eAEFA,GAAAA,KACAA,GAAAA,GACEA,GAAAA,GAAoB,CAClBA,GAAAA,GAAkB,SAClBA,GAAAA,GAAkB,WAClBA,GAAAA,GAAkB,iBAEpBA,GAAAA,GAAoBA,GAAAA,MAAqB,GACzC,gBAEFA,GAAAA,GACE,CAACA,GAAAA,GAAkB,QAASA,GAAAA,GAAkB,cAC9C,mkBC5HE,SAAUg5C,EAAwBC,GACtC,OAAO,SAACC,EAA2B5sE,EAA2B+d,EAA8B8uD,GAC1F,MAAmB,mBAAfD,EAAI9wB,QACN97C,EAAI6K,OAAS8hE,EACNE,KAEF9uD,IAEX,CAEM,SAAU+uD,EAA+BC,GAC7C,OAAO,SACLH,EACA5sE,EACA+d,EACA8uD,GAEA,MAAmB,2BAAfD,EAAI9wB,QACN97C,EAAI6K,OAASkiE,EACNF,KAEF9uD,IAEX,CAEM,SAAUivD,EAAuBD,GACrC,IAAQJ,EAAYI,EAAZJ,QAER,OAAOM,EAAAA,EAAAA,IAAgB,CAACP,EAAwBC,GAAUG,EAA+BC,IAC3F,CAEM,SAAUG,EAAoBH,GAIlC,IAAQI,EAAcJ,EAAdI,UACFt1B,GAAkBu1B,EAAAA,EAAAA,IAAsB,CAAED,UAAAA,IAEhD,MAAO,CAAEE,mBADiBJ,EAAAA,EAAAA,IAAgB,CAACD,EAAuBD,GAAiBl1B,IACvDA,gBAAAA,EAC9B,CC5BgB,SAAAy1B,EAA2B1sE,GAAmE,IAAhE2sE,EAAgE3sE,EAAhE2sE,YAC5C,OAAOC,EAAAA,EAAAA,IAAqB,eAAAr4C,GAAA7E,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAC,SAAAC,EAAOm9B,EAASpO,EAAUtvB,GAAI,IAAAka,EAAA,OAAAta,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACjD,GACO,gBADI09B,EAAXK,OACoB,CAAAj+B,EAAAE,KAAA,eAAAF,EAAA6S,OAAA,SAAS3S,KAAM,UAEtCwvD,EAAa,CAAF1vD,EAAAE,KAAA,cAAQ,IAAIpxB,MAAM,oDAAmD,cAAAkxB,EAAAE,KAAA,EAE9DwvD,EAAY9xB,GAAQ,OACjB,OADpBxjB,EAAQpa,EAAAiiB,KACduN,EAASxiC,OAASotB,EAAQpa,EAAA6S,OAAA,cACnBzjC,GAAS,yBAAA4wB,EAAAK,OAAA,GAAAI,EAAA,KACjB,gBAAAqS,EAAAC,EAAAC,GAAA,OAAAsE,EAAA1oC,MAAA,KAAAC,UAAA,EAT2B,GAU9B,CAEgB,SAAA+gF,EAA+B3qE,GAI9C,IAHC4qE,EAGD5qE,EAHC4qE,gBAIA,OAAOF,EAAAA,EAAAA,IAAqB,eAAAnuC,GAAA/O,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAC,SAAAwB,EAAO47B,EAASpO,EAAUtvB,GAAI,IAAAka,EAAA,OAAAta,EAAAA,EAAAA,KAAAC,MAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,OACjD,GACO,oBADI09B,EAAXK,OACwB,CAAA78B,EAAAlB,KAAA,eAAAkB,EAAAyR,OAAA,SAAS3S,KAAM,UAE1C2vD,EAAiB,CAAFzuD,EAAAlB,KAAA,cAAQ,IAAIpxB,MAAM,wDAAuD,cAAAsyB,EAAAlB,KAAA,EAEtE2vD,EAAgBjyB,GAAQ,OACrB,OADpBxjB,EAAQhZ,EAAA6gB,KACduN,EAASxiC,OAASotB,EAAQhZ,EAAAyR,OAAA,cACnBzjC,GAAS,yBAAAgyB,EAAAf,OAAA,GAAA2B,EAAA,KACjB,gBAAAoR,EAAAC,EAAAM,GAAA,OAAA6N,EAAA5yC,MAAA,KAAAC,UAAA,EAT2B,GAU9B,CAEgB,SAAAihF,EACdC,EACAC,GAEA,OAAOL,EAAAA,EAAAA,IAAqB,eAAAn4C,GAAA/E,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAa,SAAAkC,EAAOk7B,EAASpO,EAAUtvB,GAAI,IAAAlT,EAAA,OAAA8S,EAAAA,EAAAA,KAAAC,MAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OAC7D,GAAW09B,EAAXK,SACO8xB,EAAY,CAAA9tD,EAAA/B,KAAA,eAAA+B,EAAA4Q,OAAA,SAAS3S,KAAM,UAErC8vD,EAAS,CAAF/tD,EAAA/B,KAAA,cAAQ,IAAIpxB,MAAM,sBAADuO,OAAuB0yE,EAAY,kBAAgB,cAAA9tD,EAAA/B,KAAA,EAE3D8vD,EAAQpyB,GAAQ,OAEb,OAFlB5wC,EAAMiV,EAAAggB,KAEZuN,EAASxiC,OAASA,EAAMiV,EAAA4Q,OAAA,cACjBzjC,GAAS,yBAAA6yB,EAAA5B,OAAA,GAAAqC,EAAA,KACjB,gBAAAkR,EAAAwsB,EAAAC,GAAA,OAAA7oB,EAAA5oC,MAAA,KAAAC,UAAA,EAV2B,GAW9B,CAEM,SAAUohF,EAAuBC,GACrC,IAAQR,EACNQ,EADMR,YAAaG,EACnBK,EADmBL,gBAAiBM,EACpCD,EADoCC,gBAAiBC,EACrDF,EADqDE,uBAAwBC,EAC7EH,EAD6EG,oBAAqBC,EAClGJ,EADkGI,YAAaC,EAC/GL,EAD+GK,cAAeC,EAC9HN,EAD8HM,aAGhI,OAAOpB,EAAAA,EAAAA,IAAgB,CACrBQ,EAAgC,CAAEC,gBAAAA,IAClCJ,EAA4B,CAAEC,YAAAA,IAC9BI,EACE,kBACAK,GAEFL,EACE,yBACAM,GAEFN,EACE,sBACAO,GAEFP,EAAiE,cAAeQ,GAChFR,EAA0C,mBAAoBS,GAC9DT,EAA0C,cAAeS,GACzDT,EAA0C,kBAAmBU,IAEjE,0kBC9EsBC,EAAwB,SAAAC,IAAAnkF,EAAAA,EAAAA,GAAAkkF,EAAAC,GAAA,IAAA/hF,GAAAnC,EAAAA,EAAAA,GAAAikF,GAC5C,SAAAA,EAAA1tE,IAAwFtW,EAAAA,EAAAA,GAAA,KAAAgkF,GAAA,IAA1ErtC,EAA0ErgC,EAA1EqgC,OAAQphC,EAAkEe,EAAlEf,MAAkE,OAAArT,EAAAU,KAAA,KAChF,CAAE+zC,OAAQ,CAAEutC,YAAWC,EAAAA,EAAO,GAAAxtC,EAAOutC,aAAW,IAAEE,eAAgBC,EAAAA,GAAiBC,UAAY/uE,MAAAA,GACvG,CAoCA,OApCAtV,EAAAA,EAAAA,GAAA+jF,EAAA,EAAA9iF,IAAA,cAAAC,MAAA,eAAAojF,GAAAv+C,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAs7B,EAAkB1zC,GAAsB,OAAA0X,EAAAA,EAAAA,KAAAC,MAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,aACvC+wD,EAAAA,GAAiBC,qBAAqB,oDAAmD,wBAAAvuD,EAAAtC,OAAA,GAAAy7B,EAAA,KACjG,gBAAA0E,GAAA,OAAAwwB,EAAApiF,MAAA,KAAAC,UAAA,EAJA,IAIA,CAAAlB,IAAA,gBAAAC,MAAA,eAAAujF,GAAA1+C,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAo/B,EAAoBwxB,GAAmB,IAAAC,EAAAnB,EAAAoB,EAAAC,EAAAC,EAAAC,EAAA,OAAA3xD,EAAAA,EAAAA,KAAAC,MAAA,SAAA+/B,GAAA,cAAAA,EAAA7/B,KAAA6/B,EAAA5/B,MAAA,OAgBJ,OAflCmxD,EAAS,IAAIK,EAAAA,GAEbxB,EAAmBtwE,KAAK+xE,oBAAoBP,GAC5CE,EAAmBrB,EAAuBC,GAChDmB,EAAOn8E,KAAKo8E,GAENC,EAAmBpC,EAAuBvvE,KAAKwjC,OAAOutC,aAC5DU,EAAOn8E,KAAKq8E,IAENC,EAAwB5xE,KAAKgyE,yBAAyBR,KAE1DC,EAAOn8E,KAAKs8E,GAGRC,GAAWI,EAAAA,EAAAA,IAAmBR,GACpCzxE,KAAKkyE,0BAA0BL,GAAS3xB,EAAA5/B,KAAA,GAClCtgB,KAAKmyE,gBAAe,yBAAAjyB,EAAAz/B,OAAA,GAAAu/B,EAAA,UAC5B,gBAAAuB,GAAA,OAAAgwB,EAAAviF,MAAA,KAAAC,UAAA,EApBA,IAoBA,CAAAlB,IAAA,gBAAAC,MAAA,eAAAokF,GAAAv/C,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEU,SAAAw/B,IAAA,IAAA2wB,EAAA,OAAA7wD,EAAAA,EAAAA,KAAAC,MAAA,SAAAkgC,GAAA,cAAAA,EAAAhgC,KAAAggC,EAAA//B,MAAA,OAIN,OAHMywD,EAAgB/wE,KAAKwjC,OAArButC,YACR/wE,KAAKM,OAAO,CACV4uE,QAAS6B,EAAY7B,UACrB7uB,EAAAptB,OAAA,SACK89C,EAAY7B,SAAW,IAAE,wBAAA7uB,EAAA5/B,OAAA,GAAA2/B,EAAA,UAClC,yBAAAgyB,EAAApjF,MAAA,KAAAC,UAAA,EARA,IAQA,CAAAlB,IAAA,2BAAAC,MAEU,SAAyBwa,GAEnC,KAAAqoE,CAAA,CAvC4C,CAAQwB,EAAAA,ICDzCC,EAA2B,SAAAd,GACtC,IAAMlB,EAAsC,CAC1CL,gBAAiB,WAAF,IAAAsC,GAAA1/C,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA+/B,IAAA,OAAAzgC,EAAAA,EAAAA,KAAAC,MAAA,SAAAgD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,cAAA6C,EAAA8P,OAAA,SACRu+C,EAAiBj2D,UAAY,CAAC8W,IAAAA,OAAYm/C,EAAiBj2D,UAAUhc,YAAc,IAAE,wBAAA4jB,EAAA1C,OAAA,GAAAkgC,EAAA,KAC7F,yBAAA4xB,EAAAvjF,MAAA,KAAAC,UAAA,EAFgB,GAGjB6gF,YAAa,WAAF,IAAA0C,GAAA3/C,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAkgC,IAAA,OAAA5gC,EAAAA,EAAAA,KAAAC,MAAA,SAAA4gC,GAAA,cAAAA,EAAA1gC,KAAA0gC,EAAAzgC,MAAA,cAAAygC,EAAA9tB,OAAA,SAAau+C,EAAiBj2D,UAAY,CAAC8W,IAAAA,OAAYm/C,EAAiBj2D,UAAUhc,YAAc,IAAG,wBAAAwhD,EAAAtgC,OAAA,GAAAqgC,EAAA,8BAAA0xB,EAAAxjF,MAAA,KAAAC,UAAA,EAAnG,GACb0hF,cAAe,WAAF,IAAA8B,GAAA5/C,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAqgC,IAAA,OAAA/gC,EAAAA,EAAAA,KAAAC,MAAA,SAAA+gC,GAAA,cAAAA,EAAA7gC,KAAA6gC,EAAA5gC,MAAA,aACPoyD,EAAAA,GAAUzlC,IAAI0lC,qBAAoB,wBAAAzxB,EAAAzgC,OAAA,GAAAwgC,EAAA,KACzC,yBAAAwxB,EAAAzjF,MAAA,KAAAC,UAAA,EAFc,GAGf2hF,aAAc,WAAF,IAAAgC,GAAA//C,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAwgC,IAAA,OAAAlhC,EAAAA,EAAAA,KAAAC,MAAA,SAAAmhC,GAAA,cAAAA,EAAAjhC,KAAAihC,EAAAhhC,MAAA,aACNoyD,EAAAA,GAAUzlC,IAAI0lC,qBAAoB,wBAAArxB,EAAA7gC,OAAA,GAAA2gC,EAAA,KACzC,yBAAAwxB,EAAA5jF,MAAA,KAAAC,UAAA,EAFa,GAGdshF,gBAAiB,WAAF,IAAAsC,GAAAhgD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA6gC,EAAO0tB,GAAgE,IAAA7zC,EAAA,OAAApb,EAAAA,EAAAA,KAAAC,MAAA,SAAAwhC,GAAA,cAAAA,EAAAthC,KAAAshC,EAAArhC,MAAA,cAAAqhC,EAAArhC,KAAA,EAC5DkxD,EAAiBjB,gBAAgBpB,EAAI/mC,OAAOvpB,SAAQ,OAA7D,OAAXyc,EAAWqmB,EAAAtf,KAAAsf,EAAA1uB,OAAA,SACVqI,GAAW,wBAAAqmB,EAAAlhC,OAAA,GAAAghC,EAAA,KACnB,gBAAAG,GAAA,OAAAixB,EAAA7jF,MAAA,KAAAC,UAAA,EAHgB,GAIjByhF,YAAa,WAAF,IAAAoC,GAAAjgD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAmhC,EAAOotB,GAAmE,IAAA4D,EAAA,OAAA7yD,EAAAA,EAAAA,KAAAC,MAAA,SAAA8hC,GAAA,cAAAA,EAAA5hC,KAAA4hC,EAAA3hC,MAAA,cAAA2hC,EAAA3hC,KAAA,EAC/DkxD,EAAiBd,YAAYvB,EAAI/mC,OAAOvpB,QAASswD,EAAI/mC,OAAO4qC,SAAQ,OAA7E,OAAPD,EAAO9wB,EAAA5f,KAAA4f,EAAAhvB,OAAA,SACN8/C,EAAQnkD,WAAS,wBAAAqzB,EAAAxhC,OAAA,GAAAshC,EAAA,KACzB,gBAAAF,GAAA,OAAAixB,EAAA9jF,MAAA,KAAAC,UAAA,EAHY,GAIbwhF,oBAAqB,WAAF,IAAAwC,GAAApgD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAyhC,EAAO8sB,GAAkE,IAAA+D,EAAAC,EAAA73C,EAAA,OAAApb,EAAAA,EAAAA,KAAAC,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,UAC7E,QAAX4yD,EAAC/D,EAAI/mC,cAAM,IAAA8qC,GAAVA,EAAYr0D,SAAsB,QAAXs0D,EAAChE,EAAI/mC,cAAJ,IAAU+qC,GAAVA,EAAYt0D,QAAQpxB,OAAQ,CAAAq2B,EAAAxD,KAAA,cACjDoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,cAAAtvD,EAAAxD,KAAA,EAEpBkxD,EAAiBf,oBAAoBtB,EAAI/mC,OAAOvpB,SAAQ,OAAjE,OAAXyc,EAAWxX,EAAAue,KAAAve,EAAAmP,OAAA,SACVqI,GAAW,wBAAAxX,EAAArD,OAAA,GAAA4hC,EAAA,KACnB,gBAAAH,GAAA,OAAA+wB,EAAAjkF,MAAA,KAAAC,UAAA,EANoB,GAOrBuhF,uBAAwB,WAAF,IAAA6C,GAAAxgD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAiiC,EAAOssB,GAAgE,IAAAmE,EAAA,OAAApzD,EAAAA,EAAAA,KAAAC,MAAA,SAAA2iC,GAAA,cAAAA,EAAAziC,KAAAyiC,EAAAxiC,MAAA,cAAAwiC,EAAAxiC,KAAA,EACzEkxD,EAAiBhB,uBAAuBrB,EAAI/mC,OAAOvpB,SAAQ,OAApE,OAALy0D,EAAKxwB,EAAAzgB,KAAAygB,EAAA7vB,OAAA,SACJ,CAAErE,UAAW0kD,EAAM1kD,YAAW,wBAAAk0B,EAAAriC,OAAA,GAAAoiC,EAAA,KACvC,gBAAAV,GAAA,OAAAkxB,EAAArkF,MAAA,KAAAC,UAAA,EAHwB,IAK1B,OAAOqhF,CACT,ukBCpCM,SAAUiD,EAAsC1B,GACpD,OAAO9B,EAAAA,EAAAA,IAAqB,eAAAnmB,GAAA/2B,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAC,SAAAuiC,EAAOgsB,EAA6B5sE,EAA4BixE,GAA6B,IAAApmE,EAAA,OAAA8S,EAAAA,EAAAA,KAAAC,MAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,cAAA4D,EAAA5D,KAAA,EACnGuxD,EAAS7zB,QAAOvd,EAChC,GAAA0uC,IACH,OAFI/hE,EAAM8W,EAAAme,KAGZ9/B,EAAI6K,OAASA,EAAM,wBAAA8W,EAAAzD,OAAA,GAAA0iC,EAAA,KACpB,gBAAAV,EAAAC,EAAAC,GAAA,OAAAiH,EAAA56D,MAAA,KAAAC,UAAA,EAL2B,GAM9B,KCHawkF,EAAwB,SAAAC,IAAA/mF,EAAAA,EAAAA,GAAA8mF,EAAAC,GAAA,IAAArkF,GAAAzC,EAAAA,EAAAA,GAAA6mF,GAAA,SAAAA,IAAA,OAAA5mF,EAAAA,EAAAA,GAAA,KAAA4mF,GAAApkF,EAAAL,MAAA,KAAAC,UAAA,CAOnC,OAPmCnC,EAAAA,EAAAA,GAAA2mF,EAAA,EAAA1lF,IAAA,sBAAAC,MACzB,SAAoBwjF,GAC5B,OAAOc,EAAwBd,EACjC,IAAAzjF,IAAA,2BAAAC,MAEU,SAAyBwjF,GACjC,OAAO+B,EAAsC/B,EAC/C,KAAAiC,CAAA,CAPmC,CAAQ5C,GCCvC8C,EAAuB,SAAAr4C,GAA8C,YACvB9rC,IAAjD8rC,EAAqC2D,SAAyB3D,aAAuB8I,EAAAA,EAAoB,ECL/FwvC,EAA2B,SAAAC,IAAAlnF,EAAAA,EAAAA,GAAAinF,EAAAC,GAAA,IAAA7jF,GAAApD,EAAAA,EAAAA,GAAAgnF,GAAA,SAAAA,IAAA,OAAA/mF,EAAAA,EAAAA,GAAA,KAAA+mF,GAAA5jF,EAAAhB,MAAA,KAAAC,UAAA,CAGtC,OAHsCnC,EAAAA,EAAAA,GAAA8mF,EAAA,EAAA7lF,IAAA,sBAAAC,MAC5B,SAAoBwjF,GAC5B,ODK4B,SAACA,EAAkCsC,GACjE,IAAMxD,EAAsC,CAC1CL,gBAAiB,WAAF,IAAA8D,GAAAlhD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA2iC,IAAA,IAAAywB,EAAAx0E,EAAA,OAAA0gB,EAAAA,EAAAA,KAAAC,MAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,cAAA8D,EAAA9D,KAAA,EACQkxD,EAAiB9N,UAAS,OAAzC,OAAyCsQ,EAAA5vD,EAAAie,KAAzC7iC,EAAAw0E,EAAAx0E,KAAA4kB,EAAA6O,OAAA,SACD,CAACzzB,EAAK+b,YAAU,wBAAA6I,EAAA3D,OAAA,GAAA8iC,EAAA,KACxB,yBAAAwwB,EAAA/kF,MAAA,KAAAC,UAAA,EAHgB,GAIjB6gF,YAAa,WAAF,IAAAmE,GAAAphD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAgjC,IAAA,IAAAswB,EAAA10E,EAAA,OAAA0gB,EAAAA,EAAAA,KAAAC,MAAA,SAAA2jC,GAAA,cAAAA,EAAAzjC,KAAAyjC,EAAAxjC,MAAA,cAAAwjC,EAAAxjC,KAAA,EACYkxD,EAAiB9N,UAAS,OAAzC,OAAyCwQ,EAAApwB,EAAAzhB,KAAzC7iC,EAAA00E,EAAA10E,KAAAskD,EAAA7wB,OAAA,SACD,CAACzzB,EAAK+b,YAAU,wBAAAuoC,EAAArjC,OAAA,GAAAmjC,EAAA,KACxB,yBAAAqwB,EAAAjlF,MAAA,KAAAC,UAAA,EAHY,GAIb0hF,cAAe,WAAF,IAAAwD,GAAAthD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAsjC,IAAA,OAAAhkC,EAAAA,EAAAA,KAAAC,MAAA,SAAAikC,GAAA,cAAAA,EAAA/jC,KAAA+jC,EAAA9jC,MAAA,aACPoyD,EAAAA,GAAUzlC,IAAI0lC,qBAAoB,wBAAAvuB,EAAA3jC,OAAA,GAAAyjC,EAAA,KACzC,yBAAAiwB,EAAAnlF,MAAA,KAAAC,UAAA,EAFc,GAGf2hF,aAAc,WAAF,IAAAwD,GAAAvhD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA4jC,IAAA,OAAAtkC,EAAAA,EAAAA,KAAAC,MAAA,SAAAskC,GAAA,cAAAA,EAAApkC,KAAAokC,EAAAnkC,MAAA,aACNoyD,EAAAA,GAAUzlC,IAAI0lC,qBAAoB,wBAAAluB,EAAAhkC,OAAA,GAAA+jC,EAAA,KACzC,yBAAA4vB,EAAAplF,MAAA,KAAAC,UAAA,EAFa,GAGdshF,gBAAiB,WAAF,IAAA8D,GAAAxhD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAkkC,EAAOqqB,GAAgE,IAAAmF,EAAAz1D,EAAA01D,EAAA/0E,EAAA+b,EAAAqT,EAAA,OAAA1O,EAAAA,EAAAA,KAAAC,MAAA,SAAA+kC,GAAA,cAAAA,EAAA7kC,KAAA6kC,EAAA5kC,MAAA,OAClD,GAA9Bg0D,EAAYnF,EAAI/mC,OAAOvpB,QACb,CAAFqmC,EAAA5kC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAIunC,eAAe,CAAE31D,QAAS,gCAAgC,OAI7C,OAF3CA,EAAU80D,EAAoBW,GAC/BA,EAAmCz1D,QAAQ0S,YAC3C+iD,EAA0BhxC,mBAAkB4hB,EAAA5kC,KAAA,EAC1BkxD,EAAiBjB,gBAAgBl+C,IAAAA,OAAYxT,IAAS,OAArE,GAAqE01D,EAAArvB,EAAA7iB,MAArE7iC,EAAA+0E,EAAA/0E,MACE+b,WAAc/b,EAAKovB,UAAS,CAAAs2B,EAAA5kC,KAAA,eAAQ,IAAIpxB,MAAM,uCAAsC,QAIrC,OAFnDqsB,EAAY,IAAIwW,EAAAA,GAAUvyB,EAAK+b,WAC/BqT,EAAYyD,IAAAA,OAAY7yB,EAAKovB,WACnC0lD,EAAUG,aAAal5D,EAAWluB,EAAOC,KAAKshC,IAAWs2B,EAAAjyB,OAAA,SAClDqhD,GAAS,yBAAApvB,EAAAzkC,OAAA,GAAAqkC,EAAA,KACjB,gBAAA/B,GAAA,OAAAsxB,EAAArlF,MAAA,KAAAC,UAAA,EAdgB,GAejByhF,YAAa,WAAF,IAAAgE,GAAA7hD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA0kC,EAAO6pB,GAAyC,IAAAv/B,EAAA,OAAA1vB,EAAAA,EAAAA,KAAAC,MAAA,SAAAqlC,GAAA,cAAAA,EAAAnlC,KAAAmlC,EAAAllC,MAAA,cAAAklC,EAAAllC,KAAA,EACpCkxD,EAAiBd,YAAYvB,EAAI/mC,OAAOvpB,SAAQ,OAAzD,OAAR+wB,EAAQ4V,EAAAnjB,KAAAmjB,EAAAvyB,OAAA,SACPZ,IAAAA,OAAYud,EAASpwC,KAAKovB,YAAU,wBAAA42B,EAAA/kC,OAAA,GAAA6kC,EAAA,KAC5C,gBAAAtC,GAAA,OAAA0xB,EAAA1lF,MAAA,KAAAC,UAAA,EAHY,GAIbuhF,uBAAwB,WAAF,IAAAmE,GAAA9hD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAglC,EAAOupB,GAAgE,IAAA0C,EAAAyC,EAAAz1D,EAAA+1D,EAAAp1E,EAAA+b,EAAAqT,EAAAmiD,EAAA8D,EAAAtyE,EAAA,OAAA2d,EAAAA,EAAAA,KAAAC,MAAA,SAAA0lC,GAAA,cAAAA,EAAAxlC,KAAAwlC,EAAAvlC,MAAA,OACpD,GAAnCuxD,EAAWiC,IACF,CAAFjuB,EAAAvlC,KAAA,cAAQoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,8BAA+B6tB,KAAM,OAAO,OAClE,GAA9B4nC,EAAYnF,EAAI/mC,OAAOvpB,QACb,CAAFgnC,EAAAvlC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAIunC,eAAe,CAAE31D,QAAS,gCAAgC,OAI7C,OAF3CA,EAAU80D,EAAoBW,GAC/BA,EAAmCz1D,QAAQ0S,YAC3C+iD,EAA0BhxC,mBAAkBuiB,EAAAvlC,KAAA,EAC1BkxD,EAAiBjB,gBAAgBl+C,IAAAA,OAAYxT,IAAS,OAArE,GAAqE+1D,EAAA/uB,EAAAxjB,MAArE7iC,EAAAo1E,EAAAp1E,MACE+b,WAAc/b,EAAKovB,UAAS,CAAAi3B,EAAAvlC,KAAA,eAAQ,IAAIpxB,MAAM,uCAAsC,QAGrC,OAFnDqsB,EAAY,IAAIwW,EAAAA,GAAUvyB,EAAK+b,WAC/BqT,EAAYyD,IAAAA,OAAY7yB,EAAKovB,WACnC0lD,EAAUG,aAAal5D,EAAWluB,EAAOC,KAAKshC,IAAWi3B,EAAAvlC,KAAA,GAC9BuxD,EAAS7zB,QAA2B,CAAEK,OAAQ,yBAA0BjW,OAAQ,KAA2B,QACpF,OAD5C2oC,EAAWlrB,EAAAxjB,KACXwyC,EAAO,IAAI96B,EAAAA,GAAWg3B,EAAYrB,WAAU7pB,EAAAvlC,KAAA,GAChCu0D,EAAK5T,mBAAmBqT,EAAU/iD,aAAY,QAAvD,OAAHhvB,EAAGsjD,EAAAxjB,KAAAwjB,EAAA5yB,OAAA,SACF,CAAErE,UAAWrsB,IAAK,yBAAAsjD,EAAAplC,OAAA,GAAAmlC,EAAA,KAC1B,gBAAA3C,GAAA,OAAA0xB,EAAA3lF,MAAA,KAAAC,UAAA,EAlBuB,GAmBxBwhF,oBAAqB,WAAF,IAAAsE,GAAAliD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAslC,EAAOipB,GAAkE,IAAA+D,EAAAC,EAAA6B,EAAAC,EAAAxnF,EAAAynF,EAAA7/E,EAAA8c,EAAA0M,EAAAs2D,EAAA90E,EAAAb,EAAA+b,EAAA/O,EAAAoiB,EAAA,OAAA1O,EAAAA,EAAAA,KAAAC,MAAA,SAAAimC,GAAA,cAAAA,EAAA/lC,KAAA+lC,EAAA9lC,MAAA,UAC7E,QAAX4yD,EAAC/D,EAAI/mC,cAAM,IAAA8qC,GAAVA,EAAYr0D,SAAsB,QAAXs0D,EAAChE,EAAI/mC,cAAJ,IAAU+qC,GAAVA,EAAYt0D,QAAQpxB,OAAQ,CAAA24D,EAAA9lC,KAAA,cACjDoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAQ9C,IALM6B,EAAU9F,EAAI/mC,OAAOvpB,QACnBpxB,EAAWwnF,EAAXxnF,OAEFynF,EAAa,GAEV7/E,EAAI,EAAGA,EAAI5H,EAAQ4H,IACpB8c,EAAO8iE,EAAQ5/E,GACfwpB,EAAU80D,EAAoBxhE,GAASA,EAA8B0M,QAAQ0S,YAAepf,EAAqBmxB,mBACvH4xC,EAAW5/E,KAAK+8B,IAAAA,OAAYxT,IAC7B,OAAAunC,EAAA9lC,KAAA,EAC2BkxD,EAAiBf,oBAAoByE,GAAW,OAA/D,GAA+DC,EAAA/uB,EAAA/jB,KAApEhiC,EAAG80E,EAAH90E,KAAKb,EAAA21E,EAAA31E,MAEH+b,YAA4B,QAAfy5D,EAAAx1E,EAAK+/B,kBAAL,IAAey1C,OAAf,EAAAA,EAAiBvnF,UAAWA,EAAM,CAAA24D,EAAA9lC,KAAA,eAAQ,IAAIpxB,MAAMmR,GAAI,QAI/E,IAFMkb,EAAY,IAAIwW,EAAAA,GAAUvyB,EAAK+b,WAE5BlmB,EAAI,EAAGA,EAAI5H,EAAQ4H,IACpBu5B,EAAYyD,IAAAA,OAAY7yB,EAAK+/B,WAAWlqC,IAC9C4/E,EAAQ5/E,GAAGo/E,aAAal5D,EAAWluB,EAAOC,KAAKshC,IAChD,OAAAw3B,EAAAnzB,OAAA,SAEMgiD,GAAO,yBAAA7uB,EAAA3lC,OAAA,GAAAylC,EAAA,KAChB,gBAAA7C,GAAA,OAAA0xB,EAAA/lF,MAAA,KAAAC,UAAA,EA3BqB,IA6BvB,OAAOqhF,CACT,CCzFW8E,CAAiB5D,EAAkBxxE,KAAK8zE,uBAAuB/6E,KAAKiH,MAC7E,KAAA4zE,CAAA,CAHsC,CAAQ/C,GCAnCwE,EAAyB,SAAAC,IAAA3oF,EAAAA,EAAAA,GAAA0oF,EAAAC,GAAA,IAAA9kF,GAAA5D,EAAAA,EAAAA,GAAAyoF,GAAA,SAAAA,IAAA,OAAAxoF,EAAAA,EAAAA,GAAA,KAAAwoF,GAAA7kF,EAAAxB,MAAA,KAAAC,UAAA,CAGpC,OAHoCnC,EAAAA,EAAAA,GAAAuoF,EAAA,EAAAtnF,IAAA,sBAAAC,MAC1B,SAAoBwjF,GAC5B,OCE+B,SAACA,EAAkCsC,GACpE,IAAMyB,EAA2BjD,EAAwBd,GAkBzD,OAjBA+D,EAAyB/E,uBAAsB,eAAAv4C,GAAApF,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAG,SAAA6lC,EAChD0oB,GAAgE,IAAA0C,EAAAv2C,EAAAy1C,EAAA8D,EAAAtyE,EAAA,OAAA2d,EAAAA,EAAAA,KAAAC,MAAA,SAAA4mC,GAAA,cAAAA,EAAA1mC,KAAA0mC,EAAAzmC,MAAA,OAEvB,GAAnCuxD,EAAWiC,IACF,CAAF/sB,EAAAzmC,KAAA,cAAQoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,8BAA+B6tB,KAAM,OAAO,cAAAqa,EAAAzmC,KAAA,EAE5EkxD,EAAiBjB,gBAAgBpB,EAAI/mC,OAAOvpB,SAAQ,OAA7D,OAAXyc,EAAWyrB,EAAA1kB,KAAA0kB,EAAAzmC,KAAG,EACOuxD,EAAS7zB,QAA2B,CAAEK,OAAQ,yBAA0BjW,OAAQ,KAA2B,OACpF,OAD5C2oC,EAAWhqB,EAAA1kB,KACXwyC,EAAO,IAAI96B,EAAAA,GAAWg3B,EAAYrB,WAAU3oB,EAAAzmC,KAAA,GAChCu0D,EAAK5T,mBAAmB3lC,EAAY/J,aAAY,QAAzD,OAAHhvB,EAAGwkD,EAAA1kB,KAAA0kB,EAAA9zB,OAAA,SACF,CAAErE,UAAWrsB,IAAK,yBAAAwkD,EAAAtmC,OAAA,GAAAgmC,EAAA,KAC1B,gBAAAhD,GAAA,OAAAxrB,EAAAjpC,MAAA,KAAAC,UAAA,EAX8C,GAa/CsmF,EAAyB7E,YAAW,eAAA8E,GAAA3iD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAG,SAAAymC,EAAO8nB,GAAmE,IAAA4D,EAAA,OAAA7yD,EAAAA,EAAAA,KAAAC,MAAA,SAAAonC,GAAA,cAAAA,EAAAlnC,KAAAknC,EAAAjnC,MAAA,cAAAinC,EAAAjnC,KAAA,EACzFkxD,EAAiBd,YAAYvB,EAAI/mC,OAAOvpB,QAASswD,EAAI/mC,OAAO4qC,SAAQ,OAA7E,OAAPD,EAAOxrB,EAAAllB,KAAAklB,EAAAt0B,OAAA,SACN8/C,GAAO,wBAAAxrB,EAAA9mC,OAAA,GAAA4mC,EAAA,KACf,gBAAA3D,GAAA,OAAA8xB,EAAAxmF,MAAA,KAAAC,UAAA,EAHmC,GAI7BsmF,CACT,CDtBWE,CAAoBjE,EAAkBxxE,KAAK8zE,uBAAuB/6E,KAAKiH,MAChF,KAAAq1E,CAAA,CAHoC,CAAQxE,GECjC6E,EAAoB,SAAAlE,GAC/B,IAAMlB,EAAsC,CAC1CL,gBAAiB,WAAF,IAAA0F,GAAA9iD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA+mC,IAAA,IAAAntB,EAAA,OAAAta,EAAAA,EAAAA,KAAAC,MAAA,SAAA8nC,GAAA,cAAAA,EAAA5nC,KAAA4nC,EAAA3nC,MAAA,cAAA2nC,EAAA3nC,KAAA,EACQkxD,EAAiBxzB,QAAkB,CACxDK,OAAQ,yBACRjW,OAAQ,CAAC,IACT,OAHY,OAAR5N,EAAQytB,EAAA5lB,KAAA4lB,EAAAh1B,OAAA,SAIPuH,GAAQ,wBAAAytB,EAAAxnC,OAAA,GAAAknC,EAAA,KAChB,yBAAAguB,EAAA3mF,MAAA,KAAAC,UAAA,EANgB,GAQjB6gF,YAAa,WAAF,IAAA8F,GAAA/iD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA2oC,IAAA,IAAA/uB,EAAA,OAAAta,EAAAA,EAAAA,KAAAC,MAAA,SAAAqpC,GAAA,cAAAA,EAAAnpC,KAAAmpC,EAAAlpC,MAAA,cAAAkpC,EAAAlpC,KAAA,EACYkxD,EAAiBxzB,QAAkB,CACxDK,OAAQ,yBACRjW,OAAQ,CAAC,IACT,OAHY,OAAR5N,EAAQgvB,EAAAnnB,KAAAmnB,EAAAv2B,OAAA,SAIPuH,GAAQ,wBAAAgvB,EAAA/oC,OAAA,GAAA8oC,EAAA,KAChB,yBAAAqsB,EAAA5mF,MAAA,KAAAC,UAAA,EANY,GAQb0hF,cAAe,WAAF,IAAAkF,GAAAhjD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAwpC,IAAA,OAAAlqC,EAAAA,EAAAA,KAAAC,MAAA,SAAAkqC,GAAA,cAAAA,EAAAhqC,KAAAgqC,EAAA/pC,MAAA,aACPoyD,EAAAA,GAAUzlC,IAAI0lC,qBAAoB,wBAAAtoB,EAAA5pC,OAAA,GAAA2pC,EAAA,KACzC,yBAAAyrB,EAAA7mF,MAAA,KAAAC,UAAA,EAFc,GAGf2hF,aAAc,WAAF,IAAAkF,GAAAjjD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA0pC,IAAA,OAAApqC,EAAAA,EAAAA,KAAAC,MAAA,SAAAqqC,GAAA,cAAAA,EAAAnqC,KAAAmqC,EAAAlqC,MAAA,aACNoyD,EAAAA,GAAUzlC,IAAI0lC,qBAAoB,wBAAAnoB,EAAA/pC,OAAA,GAAA6pC,EAAA,KACzC,yBAAAwrB,EAAA9mF,MAAA,KAAAC,UAAA,EAFa,GAGdyhF,YAAa,WAAF,IAAAqF,GAAAljD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA+oC,EAAOwlB,GAAyC,IAAA+D,EAAAr0D,EAAA,OAAAqB,EAAAA,EAAAA,KAAAC,MAAA,SAAA+pC,GAAA,cAAAA,EAAA7pC,KAAA6pC,EAAA5pC,MAAA,UAC5C,QAAX4yD,EAAC/D,EAAI/mC,cAAJ,IAAU8qC,GAAVA,EAAYr0D,QAAS,CAAFqrC,EAAA5pC,KAAA,cAChBoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,cAAAlpB,EAAA5pC,KAAA,EAExBkxD,EAAiBd,YAAYvB,EAAI/mC,OAAOvpB,SAAQ,OAAzD,OAAPA,EAAOqrC,EAAA7nB,KAAA6nB,EAAAj3B,OAAA,SACNpU,GAAO,wBAAAqrC,EAAAzpC,OAAA,GAAAkpC,EAAA,KACf,gBAAA5F,GAAA,OAAAgyB,EAAA/mF,MAAA,KAAAC,UAAA,EANY,GAQbshF,gBAAiB,WAAF,IAAAyF,GAAAnjD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA+qC,EAAOwjB,GAAgE,IAAAgE,EAAAmB,EAAA1kC,EAAA,OAAA1vB,EAAAA,EAAAA,KAAAC,MAAA,SAAA0rC,GAAA,cAAAA,EAAAxrC,KAAAwrC,EAAAvrC,MAAA,UACvE,QAAX6yD,EAAChE,EAAI/mC,cAAJ,IAAU+qC,GAAVA,EAAYt0D,QAAS,CAAFgtC,EAAAvrC,KAAA,cAChBoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAEV,OAA9BkB,EAAYnF,EAAI/mC,OAAOvpB,QAAOgtC,EAAAvrC,KAAA,EACbkxD,EAAiBjB,gBAAgB+D,GAAU,OAApD,OAAR1kC,EAAQic,EAAAxpB,KAAAwpB,EAAA54B,OAAA,SACP2c,GAAQ,wBAAAic,EAAAprC,OAAA,GAAAkrC,EAAA,KAChB,gBAAA3H,GAAA,OAAAgyB,EAAAhnF,MAAA,KAAAC,UAAA,EAPgB,GASjBuhF,uBAAwB,WAAF,IAAAyF,GAAApjD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAorC,EAAOmjB,GAAgE,IAAA+G,EAAA5B,EAAA1kC,EAAA,OAAA1vB,EAAAA,EAAAA,KAAAC,MAAA,SAAA2rC,GAAA,cAAAA,EAAAzrC,KAAAyrC,EAAAxrC,MAAA,UAC9E,QAAX41D,EAAC/G,EAAI/mC,cAAJ,IAAU8tC,GAAVA,EAAYr3D,QAAS,CAAFitC,EAAAxrC,KAAA,cAChBoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAEV,OAA9BkB,EAAYnF,EAAI/mC,OAAOvpB,QAAOitC,EAAAxrC,KAAA,EACbkxD,EAAiB7rC,gBAAgB2uC,GAAU,OAApD,OAAR1kC,EAAQkc,EAAAzpB,KAAAypB,EAAA74B,OAAA,SACP,CAAErE,UAAWghB,IAAU,wBAAAkc,EAAArrC,OAAA,GAAAurC,EAAA,KAC/B,gBAAA3H,GAAA,OAAA4xB,EAAAjnF,MAAA,KAAAC,UAAA,EAPuB,GASxBwhF,oBAAqB,WAAF,IAAA0F,GAAAtjD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAmqC,EAAOokB,GAAkE,IAAAiH,EAAAC,EAAA1sC,EAAAiG,EAAA,OAAA1vB,EAAAA,EAAAA,KAAAC,MAAA,SAAA8rC,GAAA,cAAAA,EAAA5rC,KAAA4rC,EAAA3rC,MAAA,UAC7E,QAAX81D,EAACjH,EAAI/mC,cAAM,IAAAguC,GAAVA,EAAYv3D,SAAsB,QAAXw3D,EAAClH,EAAI/mC,cAAJ,IAAUiuC,GAAVA,EAAYx3D,QAAQpxB,OAAQ,CAAAw+D,EAAA3rC,KAAA,cACjDoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAEP,OAAjCzpC,EAAewlC,EAAI/mC,OAAOvpB,QAAOotC,EAAA3rC,KAAA,EAChBkxD,EAAiBf,oBAAoB9mC,GAAa,OAA3D,OAARiG,EAAQqc,EAAA5pB,KAAA4pB,EAAAh5B,OAAA,SACP2c,GAAQ,wBAAAqc,EAAAxrC,OAAA,GAAAsqC,EAAA,KACjB,gBAAAzG,GAAA,OAAA6xB,EAAAnnF,MAAA,KAAAC,UAAA,EAPqB,IASvB,OAAOqhF,CACT,2kBCvDagG,EAAsB,SAAAC,IAAA5pF,EAAAA,EAAAA,GAAA2pF,EAAAC,GAAA,IAAA1lF,GAAAjE,EAAAA,EAAAA,GAAA0pF,GACjC,SAAAA,EAAAnzE,IAAwFtW,EAAAA,EAAAA,GAAA,KAAAypF,GAAA,IAA1E9yC,EAA0ErgC,EAA1EqgC,OAAQphC,EAAkEe,EAAlEf,MAAkE,OAAAvR,EAAApB,KAAA,KAChF,CAAE+zC,OAAQ,CAAEutC,YAAW5jC,EAAAA,EAAO,GAAA3J,EAAOutC,aAAW,IAAEE,eAAgBC,EAAAA,GAAiBC,UAAY/uE,MAAAA,GACvG,CA6EA,OA7EAtV,EAAAA,EAAAA,GAAAwpF,EAAA,EAAAvoF,IAAA,cAAAC,MAAA,eAAAwoF,GAAA3jD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAA0rC,EAAkBlkB,GAA2B,OAAAloB,EAAAA,EAAAA,KAAAC,MAAA,SAAAmrC,GAAA,cAAAA,EAAAjrC,KAAAirC,EAAAhrC,MAAA,cAAAgrC,EAAAhrC,KAAA,EAE5CtgB,KAAK6xE,SAAS7zB,QAAQ,CAC1BK,OAAQ,oBACRjW,OAAQ,CAAC,CAAE8mC,QAAS9mC,EAAO8mC,YAC3B,wBAAA5jB,EAAA7qC,OAAA,GAAA6rC,EAAA,UACJ,gBAAA3H,GAAA,OAAA6xB,EAAAxnF,MAAA,KAAAC,UAAA,EARA,IAQA,CAAAlB,IAAA,WAAAC,MAAA,eAAAyoF,GAAA5jD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAosC,EAAe+jB,GAA8B,OAAA7wD,EAAAA,EAAAA,KAAAC,MAAA,SAAAusC,GAAA,cAAAA,EAAArsC,KAAAqsC,EAAApsC,MAAA,OACvB,OAA3Bh0B,EAAAA,EAAAA,IAAAE,EAAAA,EAAAA,GAAA8pF,EAAA/nF,WAAA,iBAAAkB,KAAA,KAAeshF,GAAYrkB,EAAApsC,KAAA,EACrBtgB,KAAK6xE,SAAS7zB,QAAQ,CAC1BK,OAAQ,oBACRjW,OAAQ,CACN,CACE8mC,QAAS6B,EAAY7B,QACrBwH,UAAW3F,EAAY4F,YACvBC,QAAS,CAAC7F,EAAYrB,WACtBmH,kBAAmB,CAAC9F,EAAY+F,eAChCC,eAAgB,CACdpoF,KAAMoiF,EAAYiG,WAClBC,OAAQlG,EAAYmG,OACpBpkC,SAAUi+B,EAAYj+B,UAAY,QAIxC,wBAAA4Z,EAAAjsC,OAAA,GAAAusC,EAAA,UACJ,gBAAApI,GAAA,OAAA6xB,EAAAznF,MAAA,KAAAC,UAAA,EApBA,IAoBA,CAAAlB,IAAA,gBAAAC,MAAA,eAAAmpF,GAAAtkD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAusC,EAAoBqkB,GAAsC,OAAAtxD,EAAAA,EAAAA,KAAAC,MAAA,SAAA8sC,GAAA,cAAAA,EAAA5sC,KAAA4sC,EAAA3sC,MAAA,OACZ,OAAnDtgB,KAAKo3E,6BAA6B5F,GAAiBvkB,EAAA3sC,KAAA,EAC7CtgB,KAAKq3E,YAAY7F,GAAiB,wBAAAvkB,EAAAxsC,OAAA,GAAA0sC,EAAA,UAC1C,gBAAAhI,GAAA,OAAAgyB,EAAAnoF,MAAA,KAAAC,UAAA,EALA,IAKA,CAAAlB,IAAA,gBAAAC,MAAA,eAAAspF,GAAAzkD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEU,SAAA2sC,IAAA,IAAA2hB,EAAAqI,EAAAC,EAAA,OAAAt3D,EAAAA,EAAAA,KAAAC,MAAA,SAAAitC,GAAA,cAAAA,EAAA/sC,KAAA+sC,EAAA9sC,MAAA,UACHtgB,KAAK6xE,SAAU,CAAFzkB,EAAA9sC,KAAA,cAAQoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,2CAA4C6tB,KAAM,OAAO,OAChH,OAAAwiC,EAAYlvE,KAAKwjC,OAAOutC,YAAxB7B,QAAA9hB,EAAA9sC,KAAA,EAEuBtgB,KAAK6xE,SAAS7zB,QAAyB,CACpEK,OAAQ,mBACR,OAE0I,GAJtIk5B,EAAgBnqB,EAAA/qB,KAIhBm1C,GAAsBC,EAAAA,EAAAA,IAAYF,EAAiBj7E,YAAci7E,EAAmB,KAAH95E,OAAQ2L,SAASmuE,EAAkB,IAAIj7E,SAAS,KACnI4yE,IAAYsI,EAAmB,CAAApqB,EAAA9sC,KAAA,cAC3Bo3D,EAAAA,GAA0BC,mBAAmB,oCAADl6E,OAAqC+5E,EAAkC,gBAAA/5E,OAAAyxE,IAAU,OAI/E,OAFtDlvE,KAAKM,OAAO,CAAE4uE,QAASsI,IACvBx3E,KAAK6xE,SAAS+F,KAAK,UAAW,CAAE1I,QAASlvE,KAAKoC,MAAM8sE,UACpDlvE,KAAK6xE,SAAS+F,KAAK,eAAgB53E,KAAKoC,MAAM8sE,SAAQ9hB,EAAAn6B,OAAA,SAC/CjzB,KAAKoC,MAAM8sE,SAAO,yBAAA9hB,EAAA3sC,OAAA,GAAA8sC,EAAA,UAC3B,yBAAA+pB,EAAAtoF,MAAA,KAAAC,UAAA,EAlBA,IAkBA,CAAAlB,IAAA,cAAAC,MAAA,eAAA6pF,GAAAhlD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEQ,SAAAgtC,EAAkB4jB,GAAsC,IAAAlB,EAAAoB,EAAAE,EAAAH,EAAAI,EAAA,OAAA3xD,EAAAA,EAAAA,KAAAC,MAAA,SAAAstC,GAAA,cAAAA,EAAAptC,KAAAotC,EAAAntC,MAAA,OAQtB,OAPlCgwD,EAAmBoF,EAAiBlE,GACpCE,EAAmBrB,EAAuBC,GAC1CsB,EAAwB2B,EAAsC/B,IAC9DC,EAAS,IAAIK,EAAAA,IACZx8E,KAAKo8E,GACZD,EAAOn8E,KAAKs8E,GACNC,GAAWI,EAAAA,EAAAA,IAAmBR,GACpCzxE,KAAKkyE,0BAA0BL,GAASpkB,EAAAntC,KAAA,GAClCtgB,KAAKmyE,gBAAe,yBAAA1kB,EAAAhtC,OAAA,GAAAmtC,EAAA,UAC5B,gBAAAxI,GAAA,OAAAyyB,EAAA7oF,MAAA,KAAAC,UAAA,EAZA,IAYA,CAAAlB,IAAA,+BAAAC,MAAA,eAAA8pF,GAAAjlD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEQ,SAAAmuC,EAAmCyiB,GAAsC,IAAAliF,EAAA,YAAA4wB,EAAAA,EAAAA,KAAAC,MAAA,SAAAuuC,GAAA,cAAAA,EAAAruC,KAAAquC,EAAApuC,MAAA,OAC/EkxD,EAAiBpyB,GAAG,kBAAiB,eAAAlnB,GAAArF,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAqtC,EAAOzzB,GAAkB,OAAAta,EAAAA,EAAAA,KAAAC,MAAA,SAAA2tC,GAAA,cAAAA,EAAAztC,KAAAytC,EAAAxtC,MAAA,OAC9DhxB,EAAKuiF,SAAS+F,KAAK,kBAAmBp9C,GAAS,wBAAAszB,EAAArtC,OAAA,GAAAwtC,EAAA,KAChD,gBAAAvI,GAAA,OAAAxtB,EAAAlpC,MAAA,KAAAC,UAAA,EAFoC,IAGrCuiF,EAAiBpyB,GAAG,eAAc,eAAAsM,GAAA74B,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA4tC,EAAO0gB,GAAe,IAAAsI,EAAA,OAAAt3D,EAAAA,EAAAA,KAAAC,MAAA,SAAAiuC,GAAA,cAAAA,EAAA/tC,KAAA+tC,EAAA9tC,MAAA,OAKtD,OAJIk3D,GAAsBC,EAAAA,EAAAA,IAAYvI,GAAWA,EAAU,KAAHzxE,OAAQ2L,SAAS8lE,EAAS,IAAI5yE,SAAS,KAEjGhN,EAAKyoF,UAAU,CACbhH,YAAW5jC,EAAAA,EAAA,GAAO79C,EAAKk0C,OAAOutC,aAAW,IAAE7B,QAASsI,MACpDppB,EAAA9tC,KAAA,EACIhxB,EAAK0oF,cAAcxG,GAAiB,wBAAApjB,EAAA3tC,OAAA,GAAA+tC,EAAA,KAC3C,gBAAAzI,GAAA,OAAA2F,EAAA18D,MAAA,KAAAC,UAAA,EAPiC,IAOhC,wBAAAy/D,EAAAjuC,OAAA,GAAAsuC,EAAA,KACJ,gBAAAtJ,GAAA,OAAAqyB,EAAA9oF,MAAA,KAAAC,UAAA,EAdA,MAcAqnF,CAAA,CAhFiC,CAAQjE,EAAAA,IAAyE,SCD9FN,EAAmB/rB,GAAA,OAAAiyB,EAAAjpF,MAAC,KAADC,UAAA,UAAAgpF,IAiFzC,OAjFyCA,GAAAplD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAlC,SAAA+1C,EAAkCxzD,GAAA,IAAA2W,EAAAg6D,EAAAoE,EAAAC,EAAA7H,EAAA,OAAApwD,EAAAA,EAAAA,KAAAC,MAAC,SAADo2C,GAAA,cAAAA,EAAAl2C,KAAAk2C,EAAAj2C,MAAA,OAStC,GARDxG,EAKD3W,EALC2W,QACAg6D,EAID3wE,EAJC2wE,uBAKMoE,EAAmB,WACvB,OAAO7P,EAAAA,GAAQuC,cAAcv9E,EAAOC,KAAKwsB,EAAS,SAE7B,kBAAZA,EAAoB,CAAAy8C,EAAAj2C,KAAA,cAAQo3D,EAAAA,GAA0BtE,cAAc,4BAA2B,OAoEzG,OAnEK+E,EAAUD,IACV5H,EAAsC,CAC1CL,gBAAiB,WAAF,IAAAmI,GAAAvlD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAizC,IAAA,OAAA3zC,EAAAA,EAAAA,KAAAC,MAAA,SAAAszC,GAAA,cAAAA,EAAApzC,KAAAozC,EAAAnzC,MAAA,cAAAmzC,EAAAxgC,OAAA,SACR,CAACklD,EAAQ58D,UAAUiX,aAAW,wBAAAihC,EAAAhzC,OAAA,GAAAozC,EAAA,KACtC,yBAAAukB,EAAAppF,MAAA,KAAAC,UAAA,EAFgB,GAGjB6gF,YAAa,WAAF,IAAAuI,GAAAxlD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAszC,IAAA,OAAAh0C,EAAAA,EAAAA,KAAAC,MAAA,SAAA2zC,GAAA,cAAAA,EAAAzzC,KAAAyzC,EAAAxzC,MAAA,cAAAwzC,EAAA7gC,OAAA,SAAY,CAACklD,EAAQ58D,UAAUiX,aAAW,wBAAAshC,EAAArzC,OAAA,GAAAyzC,EAAA,8BAAAmkB,EAAArpF,MAAA,KAAAC,UAAA,EAA1C,GAEb0hF,cAAe,WAAF,IAAA2H,GAAAzlD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA2zC,IAAA,OAAAr0C,EAAAA,EAAAA,KAAAC,MAAA,SAAAi0C,GAAA,cAAAA,EAAA/zC,KAAA+zC,EAAA9zC,MAAA,cAAA8zC,EAAAnhC,OAAA,SAAYnZ,GAAO,wBAAAs6C,EAAA3zC,OAAA,GAAA8zC,EAAA,8BAAA+jB,EAAAtpF,MAAA,KAAAC,UAAA,EAAnB,GACf2hF,aAAc,WAAF,IAAA2H,GAAA1lD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAi0C,IAAA,OAAA30C,EAAAA,EAAAA,KAAAC,MAAA,SAAAs0C,GAAA,cAAAA,EAAAp0C,KAAAo0C,EAAAn0C,MAAA,cAAAm0C,EAAAxhC,OAAA,SAAYZ,IAAAA,OAAY8lD,EAAQlnD,YAAU,wBAAAwjC,EAAAh0C,OAAA,GAAAo0C,EAAA,8BAAA0jB,EAAAvpF,MAAA,KAAAC,UAAA,EAA1C,GAEdshF,gBAAiB,WAAF,IAAAiI,GAAA3lD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAo0C,EAAOma,GAAgE,IAAA+D,EAAA53C,EAAA,OAAApb,EAAAA,EAAAA,KAAAC,MAAA,SAAA20C,GAAA,cAAAA,EAAAz0C,KAAAy0C,EAAAx0C,MAAA,UACvE,QAAX4yD,EAAC/D,EAAI/mC,cAAJ,IAAU8qC,GAAVA,EAAYr0D,QAAS,CAAFi2C,EAAAx0C,KAAA,cAChBoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAO7C,YAJqD5jF,KADhD8rC,EAAc6zC,EAAI/mC,OAAOvpB,SACWogB,SAAyB3D,aAAuB8I,EAAAA,GACvF9I,EAAqCrgB,KAAK,CAACk9D,IAE5C78C,EAAYm9C,YAAYN,GACzBrjB,EAAA7hC,OAAA,SACMqI,GAAW,wBAAAw5B,EAAAr0C,OAAA,GAAAu0C,EAAA,KACnB,gBAAA3H,GAAA,OAAAmrB,EAAAxpF,MAAA,KAAAC,UAAA,EAXgB,GAajByhF,YAAa,WAAF,IAAAgI,GAAA7lD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAu0C,EAAOga,GAAyC,IAAAgE,EAAAwF,EAAA,OAAAz4D,EAAAA,EAAAA,KAAAC,MAAA,SAAA80C,GAAA,cAAAA,EAAA50C,KAAA40C,EAAA30C,MAAA,UAC5C,QAAX6yD,EAAChE,EAAI/mC,cAAJ,IAAU+qC,GAAVA,EAAYt0D,QAAS,CAAFo2C,EAAA30C,KAAA,cAChBoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAE6B,OAArEuF,EAAYC,IAAAA,KAAUC,SAAS1J,EAAI/mC,OAAOvpB,QAASs5D,EAAQlnD,WAAUgkC,EAAAhiC,OAAA,SACpE0lD,GAAS,wBAAA1jB,EAAAx0C,OAAA,GAAA00C,EAAA,KACjB,gBAAAzH,GAAA,OAAAgrB,EAAA1pF,MAAA,KAAAC,UAAA,EANY,GAQbuhF,uBAAwB,WAAF,IAAAsI,GAAAjmD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAi1C,EAAOsZ,GAAgE,IAAA+G,EAAA6C,EAAAz9C,EAAAhgB,EAAA,OAAA4E,EAAAA,EAAAA,KAAAC,MAAA,SAAAo1C,GAAA,cAAAA,EAAAl1C,KAAAk1C,EAAAj1C,MAAA,UAC9E,QAAX41D,EAAC/G,EAAI/mC,cAAJ,IAAU8tC,GAAVA,EAAYr3D,QAAS,CAAF02C,EAAAj1C,KAAA,cAChBoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAEO,GAA/C2F,EAAuBjF,IACF,CAAFve,EAAAj1C,KAAA,cAAQoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,8BAA+B6tB,KAAM,OAAO,OAOjH,YAJqDl9C,KADhD8rC,EAAc6zC,EAAI/mC,OAAOvpB,SACWogB,SAAyB3D,aAAuB8I,EAAAA,GACvF9I,EAAqCrgB,KAAK,CAACk9D,IAE5C78C,EAAYm9C,YAAYN,GACzB5iB,EAAAj1C,KAAA,EACiBy4D,EAAqB/6B,QAAgB,CACrDK,OAAQ,kBACRjW,OAAQ,CAAC/6C,EAAOC,KAAKguC,EAAY/J,aAAaj1B,SAAS,UAAW,CAAEsqD,SAAU,SAAUphB,oBAAqB,gBAC7G,OAHO,OAAHlqB,EAAGi6C,EAAAlzB,KAAAkzB,EAAAtiC,OAAA,SAIF,CAAErE,UAAWtT,IAAK,yBAAAi6C,EAAA90C,OAAA,GAAAo1C,EAAA,KAC1B,gBAAA9H,GAAA,OAAA+qB,EAAA9pF,MAAA,KAAAC,UAAA,EAlBuB,GAoBxBwhF,oBAAqB,WAAF,IAAAuI,GAAAnmD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAy1C,EAAO8Y,GAAkE,IAAAiH,EAAAC,EAAA4C,EAAAC,EAAA9iF,EAAAD,EAAAgjF,EAAA79C,EAAA,OAAApb,EAAAA,EAAAA,KAAAC,MAAA,SAAA81C,GAAA,cAAAA,EAAA51C,KAAA41C,EAAA31C,MAAA,UAC7E,QAAX81D,EAACjH,EAAI/mC,cAAM,IAAAguC,GAAVA,EAAYv3D,SAAsB,QAAXw3D,EAAClH,EAAI/mC,cAAJ,IAAUiuC,GAAVA,EAAYx3D,QAAQpxB,OAAQ,CAAAwoE,EAAA31C,KAAA,cACjDoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,WAAU,OAGxC8F,EAAiB,QAAbD,EAAG9J,EAAI/mC,cAAM,IAAA6wC,OAAA,EAAVA,EAAYp6D,QAAOzoB,GAAA1J,EAAAA,EAAAA,GACfwsF,GAAQ,IAAE,IAA3B,IAAA9iF,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAAW4iF,EAAEhjF,EAAAnI,WAE2CwB,KADhD8rC,EAAc69C,GACsBl6C,SAAyB3D,aAAuB8I,EAAAA,GACvF9I,EAAqCrgB,KAAK,CAACk9D,IAE5C78C,EAAYm9C,YAAYN,EAE3B,OAAA1hF,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,QAAAs/D,EAAAhjC,OAAA,SACMimD,GAAI,wBAAAjjB,EAAAx1C,OAAA,GAAA41C,EAAA,KACb,gBAAAhI,GAAA,OAAA2qB,EAAAhqF,MAAA,KAAAC,UAAA,EAfqB,IAgBtBsnE,EAAAtjC,OAAA,SAEMq9C,GAAgB,wBAAA/Z,EAAA91C,OAAA,GAAAk2C,EAAA,KACzBshB,EAAAjpF,MAAA,KAAAC,UAAA,0kBCnEamqF,EAAyB,SAAAC,IAAA1sF,EAAAA,EAAAA,GAAAysF,EAAAC,GAAA,IAAAloF,GAAAvE,EAAAA,EAAAA,GAAAwsF,GACpC,SAAAA,EAAAj2E,IAAiGtW,EAAAA,EAAAA,GAAA,KAAAusF,GAAA,IAAnF51C,EAAmFrgC,EAAnFqgC,OAAQphC,EAA2Ee,EAA3Ef,MAA2E,OAAAjR,EAAA1B,KAAA,KACzF,CAAE+zC,OAAQ,CAAEutC,YAAWx8D,EAAAA,EAAO,GAAAivB,EAAOutC,aAAW,IAAEE,eAAgBC,EAAAA,GAAiBC,UAAY/uE,MAAAA,GACvG,CAwHA,OAxHAtV,EAAAA,EAAAA,GAAAssF,EAAA,EAAArrF,IAAA,SAAAC,MAAA,eAAAsrF,GAAAzmD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAWO,SAAAwuC,IAAA,OAAAlvC,EAAAA,EAAAA,KAAAC,MAAA,SAAA6uC,GAAA,cAAAA,EAAA3uC,KAAA2uC,EAAA1uC,MAAA,UACAtgB,KAAKoC,MAAMgpB,WAAU,CAAA4jC,EAAA1uC,KAAA,cAClBoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,4EAA6E6tB,KAAM,OAAO,cAAAsiB,EAAA1uC,KAAA,EACjItgB,KAAKg4E,cAAch4E,KAAKoC,MAAMgpB,YAAW,cAAA4jC,EAAA/7B,OAAA,SACxCjzB,KAAK+4E,qBAAqB/6B,QAA2B,CAAEK,OAAQ,kBAAiB,wBAAA2Q,EAAAvuC,OAAA,GAAA2uC,EAAA,UACzF,yBAAAkqB,EAAAtqF,MAAA,KAAAC,UAAA,EAhBA,IAgBA,CAAAlB,IAAA,gBAAAC,MAEO,SAAco9B,GACnB,OAAOmuD,EAAAA,EAAAA,eAAcnuD,GAAYouD,GAAGl9E,SAAS,MAC/C,IAAAvO,IAAA,gBAAAC,MAAA,eAAAyrF,GAAA5mD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAA6uC,EAAoB31C,GAAe,IAAAw2D,EAAAoB,EAAAD,EAAAiI,EAAA9J,EAAAiC,EAAA,OAAA3xD,EAAAA,EAAAA,KAAAC,MAAA,SAAAmvC,GAAA,cAAAA,EAAAjvC,KAAAivC,EAAAhvC,MAAA,cAAAgvC,EAAAhvC,KAAA,EACTyxD,EAAoB,CAAEj4D,QAAAA,EAASg6D,uBAAwB9zE,KAAK8zE,uBAAuB/6E,KAAKiH,QAAQ,OAavF,OAblCswE,EAAgBhhB,EAAAjtB,KAEhBqvC,EAAmBrB,EAAuBC,GAE1CmB,EAAS,IAAIK,EAAAA,GAAY4H,EACDjK,EAAoBzvE,KAAKwjC,OAAOutC,aAAtDnB,EAAA8J,EAAA9J,kBACR6B,EAAOn8E,KAAK0K,KAAK25E,4BACjBlI,EAAOn8E,KAAK0K,KAAK45E,wBACjBnI,EAAOn8E,KAAKo8E,GACZD,EAAOn8E,KAAKs6E,GAENiC,GAAWI,EAAAA,EAAAA,IAAmBR,GAEpCzxE,KAAKkyE,0BAA0BL,GAASviB,EAAAhvC,KAAA,GAElCtgB,KAAKmyE,gBAAe,yBAAA7iB,EAAA7uC,OAAA,GAAAgvC,EAAA,UAC5B,gBAAApJ,GAAA,OAAAozB,EAAAzqF,MAAA,KAAAC,UAAA,EAnBA,IAmBA,CAAAlB,IAAA,gBAAAC,MAAA,eAAA6rF,GAAAhnD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAmvC,EAAoB3nB,GAA8B,OAAAloB,EAAAA,EAAAA,KAAAC,MAAA,SAAAuvC,GAAA,cAAAA,EAAArvC,KAAAqvC,EAAApvC,MAAA,UAClDtgB,KAAK+4E,qBAAsB,CAAFrpB,EAAApvC,KAAA,cAAQoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,8BAA+B6tB,KAAM,OAAO,cAAAgjB,EAAApvC,KAAA,EAC7FtgB,KAAK+4E,qBAAqB/6B,QAAyB,CAAEK,OAAQ,qBAAqB,OAA3F,GAAAqR,EAAArtB,OACG+F,EAAOhd,WAAU,CAAAskC,EAAApvC,KAAA,gBAAAovC,EAAApvC,KAAA,EAC7BtgB,KAAKg4E,cAAc5vC,EAAOhd,YAAW,OAClB,OADkBskC,EAAAnvC,GAC3CvgB,KAAK+4E,qBAAoBrpB,EAAApvC,KAAA,GACPtgB,KAAK+4E,qBAAqB/6B,QAA2B,CAAEK,OAAQ,oBAAmB,QAAAqR,EAAA7tC,GAAA6tC,EAAArtB,KAAAqtB,EAAAxgD,GAAA,CAAlGsrB,SAAQk1B,EAAA7tC,IAAA6tC,EAAAnvC,GADgBq3D,KAAInoF,KAAAigE,EAAAnvC,GAAC,kBAAiBmvC,EAAAxgD,IAAA,yBAAAwgD,EAAAjvC,OAAA,GAAAsvC,EAAE,KAAF,KAIpD,gBAAAzJ,GAAA,OAAAuzB,EAAA7qF,MAAA,KAAAC,UAAA,EAXA,IAWA,CAAAlB,IAAA,cAAAC,MAAA,eAAA8rF,GAAAjnD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAuvC,EAAkB/nB,GAA2B,IAAA2oC,EAAAj3D,EAAA,OAAAoG,EAAAA,EAAAA,KAAAC,MAAA,SAAA6vC,GAAA,cAAAA,EAAA3vC,KAAA2vC,EAAA1vC,MAAA,UAC7CtgB,KAAK+4E,qBAAsB,CAAF/oB,EAAA1vC,KAAA,cAAQoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,8BAA+B6tB,KAAM,OAAO,OAKxF,OAJzBqkC,EAAc/wE,KAAK+5E,eAAe3xC,EAAO8mC,SAC/ClvE,KAAKM,OAAO,CACV4uE,QAAS,YAEXlvE,KAAK+3E,UAAU,CAAEhH,YAAAA,IAAc/gB,EAAA1vC,KAAA,EACTtgB,KAAK+4E,qBAAqB/6B,QAAyB,CAAEK,OAAQ,qBAAqB,OAA3F,OAAPvkC,EAAOk2C,EAAA3tB,KAAA2tB,EAAA1vC,KAAG,GACVtgB,KAAKg4E,cAAcl+D,GAAQ,yBAAAk2C,EAAAvvC,OAAA,GAAA0vC,EAAA,UACnC,gBAAA5J,GAAA,OAAAuzB,EAAA9qF,MAAA,KAAAC,UAAA,EAXA,IAWA,CAAAlB,IAAA,gBAAAC,MAAA,eAAAgsF,GAAAnnD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEU,SAAA8vC,IAAA,IAAAupB,EAAAlJ,EAAA,OAAA7wD,EAAAA,EAAAA,KAAAC,MAAA,SAAAkwC,GAAA,cAAAA,EAAAhwC,KAAAgwC,EAAA/vC,MAAA,UACHtgB,KAAK+4E,qBAAsB,CAAF1oB,EAAA/vC,KAAA,cAAQoyD,EAAAA,GAAUb,SAASiD,OAAO,CAAEj2D,QAAS,8BAA+B6tB,KAAM,OAAO,cAAA2jB,EAAA/vC,KAAA,EAClGtgB,KAAK+4E,qBAAqB/6B,QAAyB,CACtEK,OAAQ,YACRjW,OAAQ,KACR,OACM,GAJF6xC,EAAM5pB,EAAAhuB,KAIJ0uC,EAAgB/wE,KAAKwjC,OAArButC,YACO,OAAXkJ,EAAe,CAAA5pB,EAAA/vC,KAAA,cACXo3D,EAAAA,GAA0BC,mBAAmB,sDAADl6E,OAAuDszE,EAAYrB,YAAY,OAKlI,OAJD1vE,KAAKM,OAAO,CAAE4uE,QAAS6B,EAAY7B,UAC/BlvE,KAAKoC,MAAM8sE,UAAY6B,EAAY7B,UACrClvE,KAAK6xE,SAAS+F,KAAK,eAAgB53E,KAAKoC,MAAM8sE,SAC9ClvE,KAAK6xE,SAAS+F,KAAK,UAAW,CAAE1I,QAASlvE,KAAKoC,MAAM8sE,WACrD7e,EAAAp9B,OAAA,SACMjzB,KAAKoC,MAAM8sE,SAAO,yBAAA7e,EAAA5vC,OAAA,GAAAiwC,EAAA,UAC3B,yBAAAspB,EAAAhrF,MAAA,KAAAC,UAAA,EAjBA,IAiBA,CAAAlB,IAAA,2BAAAC,MAEQ,WAAwB,IAAAkC,EAAA,KACxBgqF,EAA4C,CAChDC,kBAAmB,WAAF,IAAAC,GAAAvnD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAiwC,EAAOse,GAAyC,IAAAkL,EAAAnL,EAAAwH,EAAAE,EAAAC,EAAAE,EAAA,OAAA72D,EAAAA,EAAAA,KAAAC,MAAA,SAAAwwC,GAAA,cAAAA,EAAAtwC,KAAAswC,EAAArwC,MAAA,UAC5D6uD,EAAI/mC,OAAQ,CAAFuoB,EAAArwC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,0BAAyB,OACpB,GADoBiH,EACDlL,EAAI/mC,OAAvE8mC,EAAOmL,EAAPnL,QAASwH,EAAS2D,EAAT3D,UAAWE,EAAOyD,EAAPzD,QAASC,EAAiBwD,EAAjBxD,kBAAmBE,EAAAsD,EAAAtD,eAEnD7H,EAAS,CAAFve,EAAArwC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,kCAAiC,UAC5EwD,GAA8B,IAAnBA,EAAQnpF,OAAY,CAAAkjE,EAAArwC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,kCAAiC,UACpG2D,EAAgB,CAAFpmB,EAAArwC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,yCAAwC,OAC/FljF,EAAKoqF,SAAS,CACZrJ,eAAgBC,EAAAA,GAAiBC,OACjCjC,QAAAA,EACAgI,QAAQ,OAAAH,QAAc,IAAdA,OAAc,EAAdA,EAAgBE,SAAU,MAClCD,YAAY,OAAAD,QAAc,IAAdA,OAAc,EAAdA,EAAgBpoF,OAAQ,SACpCgoF,YAAaD,EACbhH,UAAWkH,EAAQ,GACnBE,eAAe,OAAAD,QAAA,IAAAA,OAAA,EAAAA,EAAoB,KAAM,GACzC/jC,UAAwB,OAAdikC,QAAA,IAAAA,OAAA,EAAAA,EAAgBjkC,WAAY,IACtC,yBAAA6d,EAAAlwC,OAAA,GAAAowC,EAAA,KACH,gBAAA3J,GAAA,OAAAkzB,EAAAprF,MAAA,KAAAC,UAAA,EAjBkB,GAkBnBsrF,kBAAmB,WAAF,IAAAC,GAAA3nD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAAswC,EAAOie,GAAqC,OAAAjvD,EAAAA,EAAAA,KAAAC,MAAA,SAAA4wC,GAAA,cAAAA,EAAA1wC,KAAA0wC,EAAAzwC,MAAA,UACxD6uD,EAAI/mC,OAAQ,CAAF2oB,EAAAzwC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,0BAAyB,UACvEjE,EAAI/mC,OAAO8mC,QAAS,CAAFne,EAAAzwC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,mBAAkB,cAAAriB,EAAAzwC,KAAA,EACvEpwB,EAAKuqF,YAAYtL,EAAI/mC,QAAO,wBAAA2oB,EAAAtwC,OAAA,GAAAywC,EAAA,KACpC,gBAAA/J,GAAA,OAAAqzB,EAAAxrF,MAAA,KAAAC,UAAA,EAJmB,IAOrB,gBZ/BuCuoC,GAA+D,IAA5D2iD,EAA4D3iD,EAA5D2iD,kBAAmBI,EAAyC/iD,EAAzC+iD,kBAC/D,OAAO/K,EAAAA,EAAAA,IAAgB,CACrBU,EAA2D,iBAAkBiK,GAC7EjK,EAAuD,oBAAqBqK,IAEhF,CYyBkCG,CAA4BR,EAE5D,IAAAnsF,IAAA,uBAAAC,MAEQ,WAAoB,IAAAyC,EAAA,KACpBkqF,EAAoC,CACxCC,iBAAkB,WAAF,IAAAC,GAAAhoD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAE,SAAA0wC,EAAO6d,GAAwC,IAAA/jD,EAAA,OAAAlL,EAAAA,EAAAA,KAAAC,MAAA,SAAAixC,GAAA,cAAAA,EAAA/wC,KAAA+wC,EAAA9wC,MAAA,UAC1D6uD,EAAI/mC,OAAQ,CAAFgpB,EAAA9wC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,0BAAyB,UACvEjE,EAAI/mC,OAAOhd,WAAY,CAAFgmC,EAAA9wC,KAAA,cAAQoyD,EAAAA,GAAUzlC,IAAImmC,cAAc,sBAAqB,OAC3E,OAAAhoD,EAAe+jD,EAAI/mC,OAAnBhd,WAAAgmC,EAAA9wC,KAAA,EACF7vB,EAAKqqF,cAAc,CAAE1vD,WAAAA,IAAa,wBAAAgmC,EAAA3wC,OAAA,GAAA6wC,EAAA,KAC1C,gBAAA9J,GAAA,OAAAqzB,EAAA7rF,MAAA,KAAAC,UAAA,EALkB,IAOpB,OZjCY,SAAuB+wC,GAAuC,IAApC46C,EAAoC56C,EAApC46C,iBACxC,OAAOpL,EAAAA,EAAAA,IAAgB,CAACU,EAA0D,gBAAiB0K,IACrG,CY+BWG,CAAwBJ,EACjC,KAAAvB,CAAA,CA3HoC,CAAQ/G,EAAAA,YAAjC+G,EAKyB,qCAAAjhD,GAAAtF,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAAA,SAAA6wC,EAAOrpB,GAG1C,IAAA4yC,EAAA,OAAA96D,EAAAA,EAAAA,KAAAC,MAAA,SAAAoxC,GAAA,cAAAA,EAAAlxC,KAAAkxC,EAAAjxC,MAAA,OACsG,OAA/F06D,EAAkB,IAAI5B,EAAyB,CAAE51C,OAAQ,CAAEutC,YAAa3oC,EAAO2oC,eAAgBxf,EAAAjxC,KAAA,EAC/F06D,EAAgBhD,cAAc5vC,EAAOtuB,SAAQ,cAAAy3C,EAAAt+B,OAAA,SAC5C+nD,GAAe,wBAAAzpB,EAAA9wC,OAAA,GAAAgxC,EAAA,KACvB,gBAAAhK,GAAA,OAAAtvB,EAAAnpC,MAAA,KAAAC,UAAA,EAPmC,IAOnC,IChCUgsF,EAAY,WAGvB,SAAAA,EAAYpJ,IAAkChlF,EAAAA,EAAAA,GAAA,KAAAouF,IAAAC,EAAAA,EAAAA,GAAA,wBAC5Cl7E,KAAK6xE,SAAWA,CAClB,CAqDA,OArDA/kF,EAAAA,EAAAA,GAAAmuF,EAAA,EAAAltF,IAAA,kBAAAC,MAAA,eAAAmtF,GAAAtoD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAkxC,IAAA,IAAAt3B,EAAA,OAAAta,EAAAA,EAAAA,KAAAC,MAAA,SAAAuxC,GAAA,cAAAA,EAAArxC,KAAAqxC,EAAApxC,MAAA,cAAAoxC,EAAApxC,KAAA,EACkBtgB,KAAK6xE,SAAS7zB,QAAkB,CACrDK,OAAQ,kBACRjW,OAAQ,CAAC,IACT,OAHY,OAAR5N,EAAQk3B,EAAArvB,KAAAqvB,EAAAz+B,OAAA,SAIPuH,GAAQ,wBAAAk3B,EAAAjxC,OAAA,GAAAqxC,EAAA,UACjB,yBAAAqpB,EAAAnsF,MAAA,KAAAC,UAAA,EARA,IAQA,CAAAlB,IAAA,yBAAAC,MAAA,eAAAotF,GAAAvoD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAsxC,EAA0E52B,GAAc,IAAA+/C,EAAAzsD,EAAA,OAAA1O,EAAAA,EAAAA,KAAAC,MAAA,SAAA4xC,GAAA,cAAAA,EAAA1xC,KAAA0xC,EAAAzxC,MAAA,cAAAyxC,EAAAzxC,KAAA,EACjEtgB,KAAK6xE,SAAS7zB,QAA+B,CACvEK,OAAQ,yBACRjW,OAAQ,CACNvpB,QAASyc,KAEX,OALM,OAKN+/C,EAAAtpB,EAAA1vB,KALMzT,EAAAysD,EAAAzsD,UAAAmjC,EAAA9+B,OAAA,SAMD,CAAErE,UAAAA,IAAW,wBAAAmjC,EAAAtxC,OAAA,GAAAyxC,EAAA,UACtB,gBAAA3J,GAAA,OAAA6yB,EAAApsF,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAAlB,IAAA,kBAAAC,MAAA,eAAAstF,GAAAzoD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAA0xC,EAAmEh3B,GAAc,IAAAigD,EAAA,OAAAr7D,EAAAA,EAAAA,KAAAC,MAAA,SAAAgyC,GAAA,cAAAA,EAAA9xC,KAAA8xC,EAAA7xC,MAAA,cAAA6xC,EAAA7xC,KAAA,EACtDtgB,KAAK6xE,SAAS7zB,QAAQ,CACpDK,OAAQ,kBACRjW,OAAQ,CACNvpB,QAASyc,KAEX,OALqB,OAAjBigD,EAAiBppB,EAAA9vB,KAAA8vB,EAAAl/B,OAAA,SAMhBsoD,GAAsB,wBAAAppB,EAAA1xC,OAAA,GAAA6xC,EAAA,UAC/B,gBAAA9J,GAAA,OAAA8yB,EAAAtsF,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAAlB,IAAA,sBAAAC,MAAA,eAAAwtF,GAAA3oD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAgyC,EAAuEjpB,GAAiB,IAAA8xC,EAAA,OAAAv7D,EAAAA,EAAAA,KAAAC,MAAA,SAAAqyC,GAAA,cAAAA,EAAAnyC,KAAAmyC,EAAAlyC,MAAA,cAAAkyC,EAAAlyC,KAAA,EAC5DtgB,KAAK6xE,SAAS7zB,QAAQ,CACrDK,OAAQ,sBACRjW,OAAQ,CACNvpB,QAAS8qB,KAEX,OALsB,OAAlB8xC,EAAkBjpB,EAAAnwB,KAAAmwB,EAAAv/B,OAAA,SAMjBwoD,GAAyB,wBAAAjpB,EAAA/xC,OAAA,GAAAmyC,EAAA,UAClC,gBAAA/H,GAAA,OAAA2wB,EAAAxsF,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAAlB,IAAA,cAAAC,MAAA,eAAA0tF,GAAA7oD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAAsyC,EAAkB1zD,GAAgB,IAAAowC,EAAA,OAAA1vB,EAAAA,EAAAA,KAAAC,MAAA,SAAA2yC,GAAA,cAAAA,EAAAzyC,KAAAyyC,EAAAxyC,MAAA,cAAAwyC,EAAAxyC,KAAA,EAChBtgB,KAAK6xE,SAAS7zB,QAAoB,CACvDK,OAAQ,cACRjW,OAAQ,CACNvpB,QAASrf,KAEX,OALY,OAARowC,EAAQkjB,EAAAzwB,KAAAywB,EAAA7/B,OAAA,SAMP2c,GAAsB,wBAAAkjB,EAAAryC,OAAA,GAAAyyC,EAAA,UAC/B,gBAAA9G,GAAA,OAAAsvB,EAAA1sF,MAAA,KAAAC,UAAA,EAVA,IAUA,CAAAlB,IAAA,UAAAC,MAAA,eAAA2tF,GAAA9oD,EAAAA,EAAAA,IAAA3S,EAAAA,EAAAA,KAAAU,MAEO,SAAA4yC,EAAiBr5B,GAAsB,IAAA/sB,EAAA,OAAA8S,EAAAA,EAAAA,KAAAC,MAAA,SAAAizC,GAAA,cAAAA,EAAA/yC,KAAA+yC,EAAA9yC,MAAA,cAAA8yC,EAAA9yC,KAAA,EACvBtgB,KAAK6xE,SAAS7zB,QAAW7jB,GAAK,OAAvC,OAAN/sB,EAAMgmD,EAAA/wB,KAAA+wB,EAAAngC,OAAA,SACL7lB,GAAW,wBAAAgmD,EAAA3yC,OAAA,GAAA+yC,EAAA,UACpB,gBAAA1G,GAAA,OAAA6uB,EAAA3sF,MAAA,KAAAC,UAAA,EALA,MAKAgsF,CAAA,CA1DuB,uCCGzB,IAAIW,EAAUrvF,EAAAA,OAAAA,OA+GdsvF,EAAOv+E,QA9GP,SAAew+E,GACb,GAAIA,EAASruF,QAAU,IAAO,MAAM,IAAIN,UAAU,qBAElD,IADA,IAAI4uF,EAAW,IAAI7uF,WAAW,KACrB+b,EAAI,EAAGA,EAAI8yE,EAAStuF,OAAQwb,IACnC8yE,EAAS9yE,GAAK,IAEhB,IAAK,IAAI5T,EAAI,EAAGA,EAAIymF,EAASruF,OAAQ4H,IAAK,CACxC,IAAImY,EAAIsuE,EAASE,OAAO3mF,GACpB4mF,EAAKzuE,EAAE0uE,WAAW,GACtB,GAAqB,MAAjBH,EAASE,GAAe,MAAM,IAAI9uF,UAAUqgB,EAAI,iBACpDuuE,EAASE,GAAM5mF,CACjB,CACA,IAAI8d,EAAO2oE,EAASruF,OAChB0uF,EAASL,EAASE,OAAO,GACzBI,EAASzsF,KAAK8uD,IAAItrC,GAAQxjB,KAAK8uD,IAAI,KACnC49B,EAAU1sF,KAAK8uD,IAAI,KAAO9uD,KAAK8uD,IAAItrC,GAyCvC,SAASmpE,EAAc5lC,GACrB,GAAsB,kBAAXA,EAAuB,MAAM,IAAIvpD,UAAU,mBACtD,GAAsB,IAAlBupD,EAAOjpD,OAAgB,OAAOmuF,EAAQjpD,MAAM,GAKhD,IAJA,IAAI4pD,EAAM,EAENC,EAAS,EACT/uF,EAAS,EACNipD,EAAO6lC,KAASJ,GACrBK,IACAD,IAMF,IAHA,IAAI5lD,GAAU+f,EAAOjpD,OAAS8uF,GAAOH,EAAU,IAAO,EAClDK,EAAO,IAAIvvF,WAAWypC,GAEnB+f,EAAO6lC,IAAM,CAElB,IAAIG,EAAQX,EAASrlC,EAAOwlC,WAAWK,IAEvC,GAAc,MAAVG,EAAiB,OAErB,IADA,IAAIrnF,EAAI,EACCsnF,EAAMhmD,EAAO,GAAc,IAAV+lD,GAAernF,EAAI5H,KAAqB,IAATkvF,EAAaA,IAAOtnF,IAC3EqnF,GAAUvpE,EAAOspE,EAAKE,KAAU,EAChCF,EAAKE,GAAQD,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAc,IAAVA,EAAe,MAAM,IAAIxtF,MAAM,kBACnCzB,EAAS4H,EACTknF,GACF,CAGA,IADA,IAAIK,EAAMjmD,EAAOlpC,EACVmvF,IAAQjmD,GAAsB,IAAd8lD,EAAKG,IAC1BA,IAEF,IAAIC,EAAMjB,EAAQkB,YAAYN,GAAU7lD,EAAOimD,IAC/CC,EAAIr7E,KAAK,EAAM,EAAGg7E,GAElB,IADA,IAAIvzE,EAAIuzE,EACDI,IAAQjmD,GACbkmD,EAAI5zE,KAAOwzE,EAAKG,KAElB,OAAOC,CACT,CAMA,MAAO,CACLvsF,OAzFF,SAAiBomD,GAEf,IADI1gD,MAAMC,QAAQygD,IAAWA,aAAkBxpD,cAAcwpD,EAASklC,EAAQtuF,KAAKopD,KAC9EklC,EAAQvqD,SAASqlB,GAAW,MAAM,IAAIvpD,UAAU,mBACrD,GAAsB,IAAlBupD,EAAOjpD,OAAgB,MAAO,GAMlC,IAJA,IAAI+uF,EAAS,EACT/uF,EAAS,EACTsvF,EAAS,EACTC,EAAOtmC,EAAOjpD,OACXsvF,IAAWC,GAA2B,IAAnBtmC,EAAOqmC,IAC/BA,IACAP,IAMF,IAHA,IAAI7lD,GAASqmD,EAAOD,GAAUV,EAAU,IAAO,EAC3CY,EAAM,IAAI/vF,WAAWypC,GAElBomD,IAAWC,GAAM,CAItB,IAHA,IAAIN,EAAQhmC,EAAOqmC,GAEf1nF,EAAI,EACC6nF,EAAMvmD,EAAO,GAAc,IAAV+lD,GAAernF,EAAI5H,KAAqB,IAATyvF,EAAaA,IAAO7nF,IAC3EqnF,GAAU,IAAMO,EAAIC,KAAU,EAC9BD,EAAIC,GAAQR,EAAQvpE,IAAU,EAC9BupE,EAASA,EAAQvpE,IAAU,EAE7B,GAAc,IAAVupE,EAAe,MAAM,IAAIxtF,MAAM,kBACnCzB,EAAS4H,EACT0nF,GACF,CAGA,IADA,IAAII,EAAMxmD,EAAOlpC,EACV0vF,IAAQxmD,GAAqB,IAAbsmD,EAAIE,IACzBA,IAIF,IADA,IAAI99E,EAAM88E,EAAOiB,OAAOZ,GACjBW,EAAMxmD,IAAQwmD,EAAO99E,GAAOy8E,EAASE,OAAOiB,EAAIE,IACvD,OAAO99E,CACT,EAmDEi9E,aAAcA,EACdjsF,OARF,SAAiBqb,GACf,IAAIne,EAAS+uF,EAAa5wE,GAC1B,GAAIne,EAAU,OAAOA,EACrB,MAAM,IAAI2B,MAAM,WAAaikB,EAAO,aACtC,EAMF,4DChGA7V,EAAQ,GAZR,SAAoB6pB,GAEZ,IAAMk2D,EAAWhwF,EAAOC,KAAK65B,GAC7Bk2D,EAAS7zE,UACT,IAAMb,EAAM00E,EAAS/gF,SAAS,OAC9B,OAAmB,IAAfqM,EAAIlb,OACGkU,OAAO,GAEXA,OAAO,KAADlE,OAAMkL,GAG3B,EAkCArL,EAAQ,GAVR,SAAoBuL,EAAKy0E,GAEjB,IAAM30E,EAAME,EAAIvM,SAAS,IACnB/O,EAASF,EAAOC,KAAKqb,EAAIF,SAAiB,EAAR60E,EAAW,KAAKnhF,MAAM,EAAW,EAARmhF,GAAY,OAE7E,OADA/vF,EAAOic,UACAjc,CAIf,4DCrDa2tF,EAAA3uF,EAAAA,OAAAA,QAAA+Y,EAAA/Y,EAAAA,OAAAA,QAAAG,EAAAH,EAAAA,OAAAA,QAAAM,EAAAN,EAAAA,OAAAA,QAAAO,EAAAP,EAAAA,OAAAA,QAAAI,EAAAJ,EAAAA,OAAAA,QAAAK,EAAAL,EAAAA,OAAAA,QAAA6yB,EAAA7yB,EAAAA,OAAAA,QACTgxF,EAAmBv9E,MAAQA,KAAKu9E,kBAAqBnvF,OAAOC,OAAU,SAASmvF,EAAG3vE,EAAGjD,EAAG6f,QAC7Ej7B,IAAPi7B,IAAkBA,EAAK7f,GAC3Bxc,OAAOkmC,eAAekpD,EAAG/yD,EAAI,CAAEgzD,YAAY,EAAMp7E,IAAK,WAAa,OAAOwL,EAAEjD,EAAI,GACpF,EAAM,SAAS4yE,EAAG3vE,EAAGjD,EAAG6f,QACTj7B,IAAPi7B,IAAkBA,EAAK7f,GAC3B4yE,EAAE/yD,GAAM5c,EAAEjD,EACd,GACI8yE,EAAsB19E,MAAQA,KAAK09E,qBAAwBtvF,OAAOC,OAAU,SAASmvF,EAAG/nF,GACxFrH,OAAOkmC,eAAekpD,EAAG,UAAW,CAAEC,YAAY,EAAMzvF,MAAOyH,GACnE,EAAK,SAAS+nF,EAAG/nF,GACb+nF,EAAW,QAAI/nF,CACnB,GACIkoF,EAAc39E,MAAQA,KAAK29E,YAAe,SAAUC,EAAYC,EAAQ9vF,EAAK+vF,GAC7E,IAA2HptE,EAAvHgB,EAAIziB,UAAUxB,OAAQkS,EAAI+R,EAAI,EAAImsE,EAAkB,OAATC,EAAgBA,EAAO1vF,OAAO2vF,yBAAyBF,EAAQ9vF,GAAO+vF,EACrH,GAAuB,kBAAZE,SAAoD,oBAArBA,QAAQC,SAAyBt+E,EAAIq+E,QAAQC,SAASL,EAAYC,EAAQ9vF,EAAK+vF,QACpH,IAAK,IAAIzoF,EAAIuoF,EAAWnwF,OAAS,EAAG4H,GAAK,EAAGA,KAASqb,EAAIktE,EAAWvoF,MAAIsK,GAAK+R,EAAI,EAAIhB,EAAE/Q,GAAK+R,EAAI,EAAIhB,EAAEmtE,EAAQ9vF,EAAK4R,GAAK+Q,EAAEmtE,EAAQ9vF,KAAS4R,GAChJ,OAAO+R,EAAI,GAAK/R,GAAKvR,OAAOkmC,eAAeupD,EAAQ9vF,EAAK4R,GAAIA,CAChE,EACIu+E,EAAgBl+E,MAAQA,KAAKk+E,cAAiB,SAAU/wE,GACxD,GAAIA,GAAOA,EAAIgxE,WAAY,OAAOhxE,EAClC,IAAIC,EAAS,CAAC,EACd,GAAW,MAAPD,EAAa,IAAK,IAAIvC,KAAKuC,EAAe,YAANvC,GAAmBxc,OAAOiL,eAAe5J,KAAK0d,EAAKvC,IAAI2yE,EAAgBnwE,EAAQD,EAAKvC,GAE5H,OADA8yE,EAAmBtwE,EAAQD,GACpBC,CACX,EACIgxE,EAAmBp+E,MAAQA,KAAKo+E,iBAAoB,SAAUjxE,GAC9D,OAAQA,GAAOA,EAAIgxE,WAAchxE,EAAM,CAAE,QAAWA,EACxD,EACA/e,OAAOkmC,eAAeh3B,EAAS,aAAc,CAAEtP,OAAO,IACtDsP,EAAQo0B,qBAAuBp0B,EAAQm0B,YAAcn0B,EAAQi0B,UAAYj0B,EAAQ+gF,aAAe/gF,EAAQghF,aAAehhF,EAAQihF,WAAajhF,EAAQkhF,WAAalhF,EAAQmhF,gBAAa,EACtL,IAAMC,EAAUN,EAAgB7xF,EAAQ,QAClCoyF,EAASP,EAAgB7xF,EAAQ,QAEjCq6D,EAAWs3B,EAAa3xF,EAAQ,QAEhCqyF,EAAc,IAD+B,oBAAhBC,YAA6Bj4B,EAASi4B,YAAcA,aAC3C,QAAS,CAAEC,OAAO,IAO9DxhF,EAAQmhF,WANR,SAAoBzwF,GAIhB,MAHqB,kBAAVA,IACPA,EAAQX,EAAOC,KAAKU,EAAO,SAExB2wF,EAAOI,QAAQzuF,OAAOjD,EAAOC,KAAKU,GAC7C,EAKAsP,EAAQkhF,WAHR,SAAoBxwF,GAChB,OAAOX,EAAOC,KAAKqxF,EAAOI,QAAQ1uF,OAAOrC,GAC7C,EAEA,IAAMgxF,EAAiB,KACjBT,EAAU,SAAA32D,GAAAj7B,EAAA4xF,EAAA32D,GAAA,IAAA74B,EAAAnC,EAAA2xF,GACZ,SAAAA,EAAY1/D,GAAS,IAAAvvB,EAGc,OAHdzC,EAAA,KAAA0xF,IACjBjvF,EAAAP,EAAAU,KAAA,KAAMovB,IACDogE,UAAY,GACjB3vF,EAAK4vF,gBAAkBrgE,EAAQvvB,CACnC,CAKC,OALAxC,EAAAyxF,EAAA,EAAAxwF,IAAA,iBAAAC,MACD,SAAeoe,GACXpM,KAAKi/E,UAAUvgD,OAAO,EAAG,EAAGtyB,GAE5BpM,KAAK6e,QAAU7e,KAAKk/E,gBAAkB,KAAOl/E,KAAKi/E,UAAU//D,KAAK,IACrE,KAACq/D,CAAA,CAVW,CAUXn/D,EAVoBlwB,QAYzBoO,EAAQihF,WAAaA,EACrB,IACMD,EAAY,WACd,SAAAA,IAAczxF,EAAA,KAAAyxF,GACVt+E,KAAKmnB,IAAM95B,EAAOslC,MAAMqsD,GACxBh/E,KAAKvS,OAAS,CAClB,CAiEC,OAjEAX,EAAAwxF,EAAA,EAAAvwF,IAAA,cAAAC,MACD,WACQgS,KAAKmnB,IAAI15B,OAAS,GAAKuS,KAAKvS,SAC5BuS,KAAKmnB,IAAM95B,EAAOoQ,OAAO,CAACuC,KAAKmnB,IAAK95B,EAAOslC,MAAMqsD,KAEzD,GAAC,CAAAjxF,IAAA,UAAAC,MACD,SAAQA,GACJgS,KAAKm/E,cACLn/E,KAAKmnB,IAAIi4D,WAAWpxF,EAAOgS,KAAKvS,QAChCuS,KAAKvS,QAAU,CACnB,GAAC,CAAAM,IAAA,WAAAC,MACD,SAASA,GACLgS,KAAKm/E,cACLn/E,KAAKmnB,IAAIk4D,cAAcrxF,EAAOgS,KAAKvS,QACnCuS,KAAKvS,QAAU,CACnB,GAAC,CAAAM,IAAA,WAAAC,MACD,SAASA,GACLgS,KAAKm/E,cACLn/E,KAAKmnB,IAAI30B,cAAcxE,EAAOgS,KAAKvS,QACnCuS,KAAKvS,QAAU,CACnB,GAAC,CAAAM,IAAA,WAAAC,MACD,SAASA,GACLgS,KAAKm/E,cACLn/E,KAAKs/E,YAAYjyF,EAAOC,KAAK,IAAIoxF,EAAQK,QAAQ/wF,GAAOuxF,QAAQ,KAAM,IAC1E,GAAC,CAAAxxF,IAAA,YAAAC,MACD,SAAUA,GACNgS,KAAKm/E,cACLn/E,KAAKs/E,YAAYjyF,EAAOC,KAAK,IAAIoxF,EAAQK,QAAQ/wF,GAAOuxF,QAAQ,KAAM,KAC1E,GAAC,CAAAxxF,IAAA,YAAAC,MACD,SAAUA,GACNgS,KAAKm/E,cACLn/E,KAAKs/E,YAAYjyF,EAAOC,KAAK,IAAIoxF,EAAQK,QAAQ/wF,GAAOuxF,QAAQ,KAAM,KAC1E,GAAC,CAAAxxF,IAAA,YAAAC,MACD,SAAUA,GACNgS,KAAKm/E,cACLn/E,KAAKs/E,YAAYjyF,EAAOC,KAAK,IAAIoxF,EAAQK,QAAQ/wF,GAAOuxF,QAAQ,KAAM,KAC1E,GAAC,CAAAxxF,IAAA,cAAAC,MACD,SAAYT,GAERyS,KAAKmnB,IAAM95B,EAAOoQ,OAAO,CACrBpQ,EAAOC,KAAK0S,KAAKmnB,IAAI/lB,SAAS,EAAGpB,KAAKvS,SACtCF,EACAF,EAAOslC,MAAMqsD,KAEjBh/E,KAAKvS,QAAUF,EAAOE,MAC1B,GAAC,CAAAM,IAAA,cAAAC,MACD,SAAYqR,GACRW,KAAKm/E,cACL,IAAMlyF,EAAII,EAAOC,KAAK+R,EAAK,QAC3BW,KAAKw/E,SAASvyF,EAAEQ,QAChBuS,KAAKs/E,YAAYryF,EACrB,GAAC,CAAAc,IAAA,kBAAAC,MACD,SAAgBgb,GACZhJ,KAAKs/E,YAAYjyF,EAAOC,KAAK0b,GACjC,GAAC,CAAAjb,IAAA,aAAAC,MACD,SAAWgb,EAAOy2E,GACdz/E,KAAKm/E,cACLn/E,KAAKw/E,SAASx2E,EAAMvb,QAAQ,IACJ0I,EADIC,EAAA1J,EACTsc,GAAK,IAAxB,IAAA5S,EAAAC,MAAAF,EAAAC,EAAAE,KAAAC,MAA0B,KAAfqgC,EAAIzgC,EAAAnI,MACXgS,KAAKm/E,cACLM,EAAG7oD,EACP,CAAC,OAAAngC,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CACL,GAAC,CAAA5I,IAAA,UAAAC,MACD,WACI,OAAOgS,KAAKmnB,IAAI/lB,SAAS,EAAGpB,KAAKvS,OACrC,KAAC6wF,CAAA,CArEa,GAwElB,SAASoB,EAAmB7B,EAAQ8B,EAAaC,GAC7C,IAAMC,EAAiBD,EAAmB5xF,MAC1C4xF,EAAmB5xF,MAAQ,WACvB,IAAI,QAAA2P,EAAA1O,UAAAxB,OADgC0sC,EAAI,IAAAnkC,MAAA2H,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJs8B,EAAIt8B,GAAA5O,UAAA4O,GAEpC,OAAOgiF,EAAe7wF,MAAMgR,KAAMm6B,EACtC,CACA,MAAOzjC,GACH,GAAIA,aAAaxI,WAAY,CACzB,IAAMw+C,EAAOh2C,EAAEg2C,KACf,GAAI,CAAC,2BAA4B,oBAAoB7K,QAAQ6K,IAAS,EAClE,MAAM,IAAI6xC,EAAW,+CAE7B,CACA,MAAM7nF,CACV,CACJ,CACJ,CAjBA4G,EAAQghF,aAAeA,EAiBtB,IACKD,EAAY,WACd,SAAAA,EAAYl3D,GAAKt6B,EAAA,KAAAwxF,GACbr+E,KAAKmnB,IAAMA,EACXnnB,KAAK/R,OAAS,CAClB,CA6DC,OA7DAnB,EAAAuxF,EAAA,EAAAtwF,IAAA,SAAAC,MACD,WACI,IAAMA,EAAQgS,KAAKmnB,IAAI24D,UAAU9/E,KAAK/R,QAEtC,OADA+R,KAAK/R,QAAU,EACRD,CACX,GAAC,CAAAD,IAAA,UAAAC,MACD,WACI,IAAMA,EAAQgS,KAAKmnB,IAAI44D,aAAa//E,KAAK/R,QAEzC,OADA+R,KAAK/R,QAAU,EACRD,CACX,GAAC,CAAAD,IAAA,UAAAC,MACD,WACI,IAAMA,EAAQgS,KAAKmnB,IAAI70B,aAAa0N,KAAK/R,QAEzC,OADA+R,KAAK/R,QAAU,EACRD,CACX,GAAC,CAAAD,IAAA,UAAAC,MACD,WACI,IAAMm5B,EAAMnnB,KAAKggF,WAAW,GAC5B,OAAO,IAAItB,EAAQK,QAAQ53D,EAAK,KACpC,GAAC,CAAAp5B,IAAA,WAAAC,MACD,WACI,IAAMm5B,EAAMnnB,KAAKggF,WAAW,IAC5B,OAAO,IAAItB,EAAQK,QAAQ53D,EAAK,KACpC,GAAC,CAAAp5B,IAAA,WAAAC,MACD,WACI,IAAMm5B,EAAMnnB,KAAKggF,WAAW,IAC5B,OAAO,IAAItB,EAAQK,QAAQ53D,EAAK,KACpC,GAAC,CAAAp5B,IAAA,WAAAC,MACD,WACI,IAAMm5B,EAAMnnB,KAAKggF,WAAW,IAC5B,OAAO,IAAItB,EAAQK,QAAQ53D,EAAK,KACpC,GAAC,CAAAp5B,IAAA,aAAAC,MACD,SAAWkT,GACP,GAAIlB,KAAK/R,OAASiT,EAAMlB,KAAKmnB,IAAI15B,OAC7B,MAAM,IAAI8wF,EAAW,0BAAD9gF,OAA2ByD,EAAG,yBAEtD,IAAMkM,EAASpN,KAAKmnB,IAAIhrB,MAAM6D,KAAK/R,OAAQ+R,KAAK/R,OAASiT,GAEzD,OADAlB,KAAK/R,QAAUiT,EACRkM,CACX,GAAC,CAAArf,IAAA,aAAAC,MACD,WACI,IAAMkT,EAAMlB,KAAKigF,UACX94D,EAAMnnB,KAAKggF,WAAW9+E,GAC5B,IAEI,OAAO09E,EAAYvuF,OAAO82B,EAC9B,CACA,MAAOzwB,GACH,MAAM,IAAI6nF,EAAW,gCAAD9gF,OAAiC/G,GACzD,CACJ,GAAC,CAAA3I,IAAA,iBAAAC,MACD,SAAekT,GACX,OAAO,IAAIhU,WAAW8S,KAAKggF,WAAW9+E,GAC1C,GAAC,CAAAnT,IAAA,YAAAC,MACD,SAAUyxF,GAGN,IAFA,IAAMv+E,EAAMlB,KAAKigF,UACX7yE,EAASpX,QACNX,EAAI,EAAGA,EAAI6L,IAAO7L,EACvB+X,EAAO9X,KAAKmqF,KAEhB,OAAOryE,CACX,KAACixE,CAAA,CAjEa,GAkGlB,SAAS6B,EAAsBx0E,GAC3B,OAAOA,EAAOswE,OAAO,GAAGmE,cAAgBz0E,EAAOvP,MAAM,EACzD,CACA,SAASikF,EAAe1+D,EAAQtV,EAAWpe,EAAOqyF,EAAWC,GACzD,IAEI,GAAyB,kBAAdD,EACPC,EAAO,QAAD7iF,OAASyiF,EAAsBG,KAAcryF,QAElD,GAAIqyF,aAAqBrqF,MAC1B,GAA4B,kBAAjBqqF,EAAU,GAAiB,CAClC,GAAIryF,EAAMP,SAAW4yF,EAAU,GAC3B,MAAM,IAAI9B,EAAW,kCAAD9gF,OAAmC4iF,EAAU,GAAE,cAAA5iF,OAAazP,EAAMP,OAAM,WAEhG6yF,EAAOC,gBAAgBvyF,EAC3B,MACK,GAAyB,IAArBqyF,EAAU5yF,QAAwC,kBAAjB4yF,EAAU,GAAiB,CACjE,GAAIryF,EAAMP,SAAW4yF,EAAU,GAC3B,MAAM,IAAI9B,EAAW,kCAAD9gF,OAAmC4iF,EAAU,GAAE,cAAA5iF,OAAazP,EAAMP,OAAM,WAEhG,IAAK,IAAI4H,EAAI,EAAGA,EAAIgrF,EAAU,GAAIhrF,IAC9B+qF,EAAe1+D,EAAQ,KAAM1zB,EAAMqH,GAAIgrF,EAAU,GAAIC,EAE7D,MAEIA,EAAOE,WAAWxyF,GAAO,SAACmkB,GACtBiuE,EAAe1+D,EAAQtV,EAAW+F,EAAMkuE,EAAU,GAAIC,EAC1D,SAGH,QAAuB9wF,IAAnB6wF,EAAUnsD,KACf,OAAQmsD,EAAUnsD,MACd,IAAK,SACa,OAAVlmC,QAA4BwB,IAAVxB,EAClBsyF,EAAOG,QAAQ,IAGfH,EAAOG,QAAQ,GACfL,EAAe1+D,EAAQtV,EAAWpe,EAAOqyF,EAAUh0E,KAAMi0E,IAE7D,MAEJ,IAAK,MACDA,EAAOd,SAASxxF,EAAM2oC,MACtB3oC,EAAM6R,SAAQ,SAAC0L,EAAKxd,GAChBqyF,EAAe1+D,EAAQtV,EAAWre,EAAKsyF,EAAUtyF,IAAKuyF,GACtDF,EAAe1+D,EAAQtV,EAAWb,EAAK80E,EAAUryF,MAAOsyF,EAC5D,IACA,MAEJ,QACI,MAAM,IAAI/B,EAAW,aAAD9gF,OAAc4iF,EAAS,uBAInDK,EAAgBh/D,EAAQ1zB,EAAOsyF,EAEvC,CACA,MAAO5kE,GAIH,MAHIA,aAAiB6iE,GACjB7iE,EAAMilE,eAAev0E,GAEnBsP,CACV,CACJ,CACA,SAASglE,EAAgBh/D,EAAQwpB,EAAKo1C,GAClC,GAAkC,oBAAvBp1C,EAAI01C,eAAf,CAIA,IAAMC,EAAen/D,EAAOrf,IAAI6oC,EAAI58C,aACpC,IAAKuyF,EACD,MAAM,IAAItC,EAAW,SAAD9gF,OAAUytC,EAAI58C,YAAYK,KAAI,0BAEtD,GAA0B,WAAtBkyF,EAAa3sD,KACb2sD,EAAahrF,OAAOuP,KAAI,SAAAjC,GAA4B,IAAAkC,EAAAC,EAAAnC,EAAA,GAA1BiJ,EAAS/G,EAAA,GAAEg7E,EAASh7E,EAAA,GAC1C+6E,EAAe1+D,EAAQtV,EAAW8+B,EAAI9+B,GAAYi0E,EAAWC,EACjE,QAEC,IAA0B,SAAtBO,EAAa3sD,KAYlB,MAAM,IAAIqqD,EAAW,2BAAD9gF,OAA4BojF,EAAa3sD,KAAI,SAAAz2B,OAAQytC,EAAI58C,YAAYK,OAVzF,IADA,IAAMA,EAAOu8C,EAAI21C,EAAaj1E,OACrBzW,EAAM,EAAGA,EAAM0rF,EAAapyF,OAAOhB,SAAU0H,EAAK,CACvD,IAAA2rF,EAAAx7E,EAA+Bu7E,EAAapyF,OAAO0G,GAAI,GAAhDiX,EAAS00E,EAAA,GAAET,EAASS,EAAA,GAC3B,GAAI10E,IAAczd,EAAM,CACpB2xF,EAAOG,QAAQtrF,GACfirF,EAAe1+D,EAAQtV,EAAW8+B,EAAI9+B,GAAYi0E,EAAWC,GAC7D,KACJ,CACJ,CAIJ,CAvBA,MAFIp1C,EAAI01C,eAAeN,EA0B3B,CASA,SAASS,EAAiBr/D,EAAQtV,EAAWi0E,EAAWW,GACpD,IACI,GAAyB,kBAAdX,EACP,OAAOW,EAAO,OAADvjF,OAAQyiF,EAAsBG,OAE/C,GAAIA,aAAqBrqF,MAAO,CAC5B,GAA4B,kBAAjBqqF,EAAU,GACjB,OAAOW,EAAOC,eAAeZ,EAAU,IAEtC,GAA4B,kBAAjBA,EAAU,GAAiB,CAEvC,IADA,IAAMthF,EAAM,GACH1J,EAAI,EAAGA,EAAIgrF,EAAU,GAAIhrF,IAC9B0J,EAAIzJ,KAAKyrF,EAAiBr/D,EAAQ,KAAM2+D,EAAU,GAAIW,IAE1D,OAAOjiF,CACX,CAEI,OAAOiiF,EAAOE,WAAU,kBAAMH,EAAiBr/D,EAAQtV,EAAWi0E,EAAU,GAAIW,EAAO,GAE/F,CACA,GAAuB,WAAnBX,EAAUnsD,KAEV,OADe8sD,EAAOG,SAEXJ,EAAiBr/D,EAAQtV,EAAWi0E,EAAUh0E,KAAM20E,QAE/D,EAEJ,GAAuB,QAAnBX,EAAUnsD,KAAgB,CAG1B,IAFA,IAAI9uB,EAAM,IAAI6Q,IACRxoB,EAASuzF,EAAOf,UACb5qF,EAAI,EAAGA,EAAI5H,EAAQ4H,IAAK,CAC7B,IAAMtH,EAAMgzF,EAAiBr/D,EAAQtV,EAAWi0E,EAAUtyF,IAAKizF,GACzDz1E,EAAMw1E,EAAiBr/D,EAAQtV,EAAWi0E,EAAUryF,MAAOgzF,GACjE57E,EAAItF,IAAI/R,EAAKwd,EACjB,CACA,OAAOnG,CACX,CACA,OAAOg8E,EAAkB1/D,EAAQ2+D,EAAWW,EAChD,CACA,MAAOtlE,GAIH,MAHIA,aAAiB6iE,GACjB7iE,EAAMilE,eAAev0E,GAEnBsP,CACV,CACJ,CACA,SAAS0lE,EAAkB1/D,EAAQ2/D,EAAWL,GAC1C,GAA0C,oBAA/BK,EAAUC,iBACjB,OAAOD,EAAUC,iBAAiBN,GAEtC,IAAMH,EAAen/D,EAAOrf,IAAIg/E,GAChC,IAAKR,EACD,MAAM,IAAItC,EAAW,SAAD9gF,OAAU4jF,EAAU1yF,KAAI,0BAEhD,GAA0B,WAAtBkyF,EAAa3sD,KAAmB,CAChC,IACiEr9B,EAD3DuW,EAAS,CAAC,EAAEpW,EAAAtK,EACmBg1B,EAAOrf,IAAIg/E,GAAWxrF,QAAM,IAAjE,IAAAmB,EAAAX,MAAAQ,EAAAG,EAAAV,KAAAC,MAAmE,KAAAgtC,EAAAj+B,EAAAzO,EAAA7I,MAAA,GAAvDoe,EAASm3B,EAAA,GAAE88C,EAAS98C,EAAA,GAC5Bn2B,EAAOhB,GAAa20E,EAAiBr/D,EAAQtV,EAAWi0E,EAAWW,EACvE,CAAC,OAAAvqF,GAAAO,EAAAN,EAAAD,EAAA,SAAAO,EAAAL,GAAA,CACD,OAAO,IAAI0qF,EAAUj0E,EACzB,CACA,GAA0B,SAAtByzE,EAAa3sD,KAAiB,CAC9B,IAAM/+B,EAAM6rF,EAAOG,SACnB,GAAIhsF,GAAO0rF,EAAapyF,OAAOhB,OAC3B,MAAM,IAAI8wF,EAAW,eAAD9gF,OAAgBtI,EAAG,qBAE3C,IAAAosF,EAAAj8E,EAA+Bu7E,EAAapyF,OAAO0G,GAAI,GAAhDiX,EAASm1E,EAAA,GACVC,EAAaT,EAAiBr/D,EAAQtV,EADjBm1E,EAAA,GACuCP,GAClE,OAAO,IAAIK,EAASnG,EAAC,CAAC,EAAE9uE,EAAYo1E,GACxC,CACA,MAAM,IAAIjD,EAAW,2BAAD9gF,OAA4BojF,EAAa3sD,KAAI,SAAAz2B,OAAQ4jF,EAAU/yF,YAAYK,MACnG,CA5MAgvF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,SAAU,MACrCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,UAAW,MACtCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,UAAW,MACtCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,UAAW,MACtCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,WAAY,MACvCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,WAAY,MACvCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,WAAY,MACvCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,aAAc,MACzCovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,iBAAkB,MAC7CovF,EAAW,CACP+B,GACDrB,EAAa9vF,UAAW,YAAa,MACxC+O,EAAQ+gF,aAAeA,EAsGvB/gF,EAAQi0B,UALR,SAAmB7P,EAAQwpB,GAA4B,IAC7Co1C,EAAS,IADmBrxF,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGqvF,GAGrC,OADAoC,EAAgBh/D,EAAQwpB,EAAKo1C,GACtBA,EAAOf,SAClB,EAmFAjiF,EAAQm0B,YARR,SAAqB/P,EAAQ2/D,EAAW9zF,GAA+B,IAC7DyzF,EAAS,IADmC/xF,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGovF,GAC3B9wF,GACpB6f,EAASg0E,EAAkB1/D,EAAQ2/D,EAAWL,GACpD,GAAIA,EAAO/yF,OAASV,EAAOE,OACvB,MAAM,IAAI8wF,EAAW,cAAD9gF,OAAelQ,EAAOE,OAASuzF,EAAO/yF,OAAM,mCAEpE,OAAOmf,CACX,EAOA9P,EAAQo0B,qBAJR,SAA8BhQ,EAAQ2/D,EAAW9zF,GAE7C,OAAO6zF,EAAkB1/D,EAAQ2/D,EADlB,IAD4CpyF,UAAAxB,OAAA,QAAA+B,IAAAP,UAAA,GAAAA,UAAA,GAAGovF,GACpC9wF,GAE9B,yBCtbA,IAAIk0F,EAAQl1F,EAAQ,OAGpBsvF,EAAOv+E,QAAUmkF,EAFF,8FCCf,IAAI/mD,EAAMtsC,OAAOG,UAAU8K,eACvBghB,EAAS,IASb,SAASqnE,IAAU,CA4BnB,SAASC,EAAGlC,EAAIhlE,EAASmnE,GACvB5hF,KAAKy/E,GAAKA,EACVz/E,KAAKya,QAAUA,EACfza,KAAK4hF,KAAOA,IAAQ,CACtB,CAaA,SAASC,EAAYC,EAASC,EAAOtC,EAAIhlE,EAASmnE,GAChD,GAAkB,oBAAPnC,EACT,MAAM,IAAItyF,UAAU,mCAGtB,IAAI60F,EAAW,IAAIL,EAAGlC,EAAIhlE,GAAWqnE,EAASF,GAC1CK,EAAM5nE,EAASA,EAAS0nE,EAAQA,EAMpC,OAJKD,EAAQI,QAAQD,GACXH,EAAQI,QAAQD,GAAKxC,GAC1BqC,EAAQI,QAAQD,GAAO,CAACH,EAAQI,QAAQD,GAAMD,GADhBF,EAAQI,QAAQD,GAAK3sF,KAAK0sF,IADlCF,EAAQI,QAAQD,GAAOD,EAAUF,EAAQK,gBAI7DL,CACT,CASA,SAASM,EAAWN,EAASG,GACI,MAAzBH,EAAQK,aAAoBL,EAAQI,QAAU,IAAIR,SAC5CI,EAAQI,QAAQD,EAC9B,CASA,SAASI,IACPriF,KAAKkiF,QAAU,IAAIR,EACnB1hF,KAAKmiF,aAAe,CACtB,CAzEI/zF,OAAOC,SACTqzF,EAAOnzF,UAAYH,OAAOC,OAAO,OAM5B,IAAIqzF,GAASY,YAAWjoE,GAAS,IA2ExCgoE,EAAa9zF,UAAUg0F,WAAa,WAClC,IACIC,EACA7zF,EAFA8zF,EAAQ,GAIZ,GAA0B,IAAtBziF,KAAKmiF,aAAoB,OAAOM,EAEpC,IAAK9zF,KAAS6zF,EAASxiF,KAAKkiF,QACtBxnD,EAAIjrC,KAAK+yF,EAAQ7zF,IAAO8zF,EAAMntF,KAAK+kB,EAAS1rB,EAAKwN,MAAM,GAAKxN,GAGlE,OAAIP,OAAOs0F,sBACFD,EAAMhlF,OAAOrP,OAAOs0F,sBAAsBF,IAG5CC,CACT,EASAJ,EAAa9zF,UAAUo0F,UAAY,SAAmBZ,GACpD,IAAIE,EAAM5nE,EAASA,EAAS0nE,EAAQA,EAChCa,EAAW5iF,KAAKkiF,QAAQD,GAE5B,IAAKW,EAAU,MAAO,GACtB,GAAIA,EAASnD,GAAI,MAAO,CAACmD,EAASnD,IAElC,IAAK,IAAIpqF,EAAI,EAAG2M,EAAI4gF,EAASn1F,OAAQo1F,EAAK,IAAI7sF,MAAMgM,GAAI3M,EAAI2M,EAAG3M,IAC7DwtF,EAAGxtF,GAAKutF,EAASvtF,GAAGoqF,GAGtB,OAAOoD,CACT,EASAR,EAAa9zF,UAAUu0F,cAAgB,SAAuBf,GAC5D,IAAIE,EAAM5nE,EAASA,EAAS0nE,EAAQA,EAChCY,EAAY3iF,KAAKkiF,QAAQD,GAE7B,OAAKU,EACDA,EAAUlD,GAAW,EAClBkD,EAAUl1F,OAFM,CAGzB,EASA40F,EAAa9zF,UAAUqpF,KAAO,SAAcmK,EAAOpxD,EAAIC,EAAImyD,EAAIC,EAAIC,GACjE,IAAIhB,EAAM5nE,EAASA,EAAS0nE,EAAQA,EAEpC,IAAK/hF,KAAKkiF,QAAQD,GAAM,OAAO,EAE/B,IAEI9nD,EACA9kC,EAHAstF,EAAY3iF,KAAKkiF,QAAQD,GACzB/gF,EAAMjS,UAAUxB,OAIpB,GAAIk1F,EAAUlD,GAAI,CAGhB,OAFIkD,EAAUf,MAAM5hF,KAAKkjF,eAAenB,EAAOY,EAAUlD,QAAIjwF,GAAW,GAEhE0R,GACN,KAAK,EAAG,OAAOyhF,EAAUlD,GAAGhwF,KAAKkzF,EAAUloE,UAAU,EACrD,KAAK,EAAG,OAAOkoE,EAAUlD,GAAGhwF,KAAKkzF,EAAUloE,QAASkW,IAAK,EACzD,KAAK,EAAG,OAAOgyD,EAAUlD,GAAGhwF,KAAKkzF,EAAUloE,QAASkW,EAAIC,IAAK,EAC7D,KAAK,EAAG,OAAO+xD,EAAUlD,GAAGhwF,KAAKkzF,EAAUloE,QAASkW,EAAIC,EAAImyD,IAAK,EACjE,KAAK,EAAG,OAAOJ,EAAUlD,GAAGhwF,KAAKkzF,EAAUloE,QAASkW,EAAIC,EAAImyD,EAAIC,IAAK,EACrE,KAAK,EAAG,OAAOL,EAAUlD,GAAGhwF,KAAKkzF,EAAUloE,QAASkW,EAAIC,EAAImyD,EAAIC,EAAIC,IAAK,EAG3E,IAAK5tF,EAAI,EAAG8kC,EAAO,IAAInkC,MAAMkL,EAAK,GAAI7L,EAAI6L,EAAK7L,IAC7C8kC,EAAK9kC,EAAI,GAAKpG,UAAUoG,GAG1BstF,EAAUlD,GAAGzwF,MAAM2zF,EAAUloE,QAAS0f,EACxC,KAAO,CACL,IACIlxB,EADAxb,EAASk1F,EAAUl1F,OAGvB,IAAK4H,EAAI,EAAGA,EAAI5H,EAAQ4H,IAGtB,OAFIstF,EAAUttF,GAAGusF,MAAM5hF,KAAKkjF,eAAenB,EAAOY,EAAUttF,GAAGoqF,QAAIjwF,GAAW,GAEtE0R,GACN,KAAK,EAAGyhF,EAAUttF,GAAGoqF,GAAGhwF,KAAKkzF,EAAUttF,GAAGolB,SAAU,MACpD,KAAK,EAAGkoE,EAAUttF,GAAGoqF,GAAGhwF,KAAKkzF,EAAUttF,GAAGolB,QAASkW,GAAK,MACxD,KAAK,EAAGgyD,EAAUttF,GAAGoqF,GAAGhwF,KAAKkzF,EAAUttF,GAAGolB,QAASkW,EAAIC,GAAK,MAC5D,KAAK,EAAG+xD,EAAUttF,GAAGoqF,GAAGhwF,KAAKkzF,EAAUttF,GAAGolB,QAASkW,EAAIC,EAAImyD,GAAK,MAChE,QACE,IAAK5oD,EAAM,IAAKlxB,EAAI,EAAGkxB,EAAO,IAAInkC,MAAMkL,EAAK,GAAI+H,EAAI/H,EAAK+H,IACxDkxB,EAAKlxB,EAAI,GAAKha,UAAUga,GAG1B05E,EAAUttF,GAAGoqF,GAAGzwF,MAAM2zF,EAAUttF,GAAGolB,QAAS0f,GAGpD,CAEA,OAAO,CACT,EAWAkoD,EAAa9zF,UAAU6wD,GAAK,SAAY2iC,EAAOtC,EAAIhlE,GACjD,OAAOonE,EAAY7hF,KAAM+hF,EAAOtC,EAAIhlE,GAAS,EAC/C,EAWA4nE,EAAa9zF,UAAUqzF,KAAO,SAAcG,EAAOtC,EAAIhlE,GACrD,OAAOonE,EAAY7hF,KAAM+hF,EAAOtC,EAAIhlE,GAAS,EAC/C,EAYA4nE,EAAa9zF,UAAU20F,eAAiB,SAAwBnB,EAAOtC,EAAIhlE,EAASmnE,GAClF,IAAIK,EAAM5nE,EAASA,EAAS0nE,EAAQA,EAEpC,IAAK/hF,KAAKkiF,QAAQD,GAAM,OAAOjiF,KAC/B,IAAKy/E,EAEH,OADA2C,EAAWpiF,KAAMiiF,GACVjiF,KAGT,IAAI2iF,EAAY3iF,KAAKkiF,QAAQD,GAE7B,GAAIU,EAAUlD,GAEVkD,EAAUlD,KAAOA,GACfmC,IAAQe,EAAUf,MAClBnnE,GAAWkoE,EAAUloE,UAAYA,GAEnC2nE,EAAWpiF,KAAMiiF,OAEd,CACL,IAAK,IAAI5sF,EAAI,EAAGmtF,EAAS,GAAI/0F,EAASk1F,EAAUl1F,OAAQ4H,EAAI5H,EAAQ4H,KAEhEstF,EAAUttF,GAAGoqF,KAAOA,GACnBmC,IAASe,EAAUttF,GAAGusF,MACtBnnE,GAAWkoE,EAAUttF,GAAGolB,UAAYA,IAErC+nE,EAAOltF,KAAKqtF,EAAUttF,IAOtBmtF,EAAO/0F,OAAQuS,KAAKkiF,QAAQD,GAAyB,IAAlBO,EAAO/0F,OAAe+0F,EAAO,GAAKA,EACpEJ,EAAWpiF,KAAMiiF,EACxB,CAEA,OAAOjiF,IACT,EASAqiF,EAAa9zF,UAAU40F,mBAAqB,SAA4BpB,GACtE,IAAIE,EAUJ,OARIF,GACFE,EAAM5nE,EAASA,EAAS0nE,EAAQA,EAC5B/hF,KAAKkiF,QAAQD,IAAMG,EAAWpiF,KAAMiiF,KAExCjiF,KAAKkiF,QAAU,IAAIR,EACnB1hF,KAAKmiF,aAAe,GAGfniF,IACT,EAKAqiF,EAAa9zF,UAAU60F,IAAMf,EAAa9zF,UAAU20F,eACpDb,EAAa9zF,UAAUszF,YAAcQ,EAAa9zF,UAAU6wD,GAK5DijC,EAAagB,SAAWhpE,EAKxBgoE,EAAaA,aAAeA,EAM1BxG,EAAOv+E,QAAU+kF,sCC5UnB,IAAMiB,EAAO/2F,EAAAA,OAAAA,GACPg3F,EAAkBh3F,EAAQ,OAc1Bi3F,EAAgB,SAAhBA,EAAyBC,EAAYvoE,GACzC,KAAKlb,gBAAgBwjF,GACnB,OAAO,IAAIA,EAAcC,EAAYvoE,GAGlCA,IACHA,EAAU,CAAC,GAGblb,KAAKkb,QAAU,CACbwoE,QAAoC,qBAApBxoE,EAAQwoE,QAA0BxoE,EAAQwoE,QAAU,KACpEC,SAAsC,qBAArBzoE,EAAQyoE,SAA2BzoE,EAAQyoE,SAAW,KACvEC,UAAwC,qBAAtB1oE,EAAQ0oE,UAA4B1oE,EAAQ0oE,UAAY,WAAa,OAAON,GAAQ,EACtGrkD,QAAoC,qBAApB/jB,EAAQ+jB,QAA0B/jB,EAAQ+jB,QAAU,EACpE4kD,mBAA0D,mBAA/B3oE,EAAQ2oE,oBAAmC3oE,EAAQ2oE,oBAGhF7jF,KAAKyjF,WAAaA,CACpB,EAEA5H,EAAOv+E,QAAUkmF,EAWjBA,EAAcj1F,UAAUyvD,QAAU,SAASK,EAAQjW,EAAQkH,EAAI2O,GAC7D,IA6CIp/B,EA7CEilE,EAAO9jF,KACTg+C,EAAU,KAGR+lC,EAAU/tF,MAAMC,QAAQooD,IAA6B,oBAAXjW,EAEhD,GAA6B,IAAzBpoC,KAAKkb,QAAQ+jB,SAAiB8kD,EAChC,MAAM,IAAI52F,UAAU,0CAMtB,GAAG42F,IAFYA,GAAW1lC,GAA4B,kBAAXA,GAAyC,oBAAXjW,EAGvE6V,EAAW7V,EACX4V,EAAUK,MACL,CACY,oBAAP/O,IACR2O,EAAW3O,EAEXA,OAAK9/C,GAGP,IAAMw0F,EAAkC,oBAAb/lC,EAE3B,IACED,EAAUulC,EAAgBllC,EAAQjW,EAAQkH,EAAI,CAC5Cs0C,UAAW5jF,KAAKkb,QAAQ0oE,UACxB3kD,QAASj/B,KAAKkb,QAAQ+jB,QACtB4kD,mBAAoB7jF,KAAKkb,QAAQ2oE,oBAErC,CAAE,MAAMptF,GACN,GAAGutF,EACD,OAAO/lC,EAASxnD,GAElB,MAAMA,CACR,CAGA,IAAIutF,EACF,OAAOhmC,CAGX,CAGA,IACEn/B,EAAUa,KAAKC,UAAUq+B,EAASh+C,KAAKkb,QAAQyoE,SACjD,CAAE,MAAMltF,GACN,OAAOwnD,EAASxnD,EAClB,CAOA,OALAuJ,KAAKyjF,WAAW5kE,GAAS,SAASpoB,EAAKm5C,GACrCk0C,EAAKG,eAAextF,EAAKm5C,EAAUqO,EACrC,IAGOD,CACT,EASAwlC,EAAcj1F,UAAU01F,eAAiB,SAASxtF,EAAKytF,EAAcjmC,GACnE,GAAGxnD,EACDwnD,EAASxnD,OADX,CAKA,IAAIytF,EAGF,OAAOjmC,IAGT,IAAIrO,EACJ,IACEA,EAAWlwB,KAAKykE,MAAMD,EAAclkF,KAAKkb,QAAQwoE,QACnD,CAAE,MAAMjtF,GACN,OAAOwnD,EAASxnD,EAClB,CAEA,GAAuB,IAApBwnD,EAASxwD,OAAc,CAIxB,GAAGuI,MAAMC,QAAQ25C,GAAW,CAG1B,IAAMw0C,EAAU,SAAS7hF,GACvB,MAA4B,qBAAdA,EAAImZ,KACpB,EAMA,OAAOuiC,EAAS,KAAMrO,EAASxY,OAAOgtD,GAAUx0C,EAASxY,QAJtC,SAAU70B,GAC3B,OAAQ6hF,EAAQ7hF,EAClB,IAIF,CAGE,OAAO07C,EAAS,KAAMrO,EAASl0B,MAAOk0B,EAASxiC,OAInD,CAEA6wC,EAAS,KAAMrO,EAzCf,CA0CF,sCChKA,IAAM0zC,EAAO/2F,EAAAA,OAAAA,GA4DbsvF,EAAOv+E,QA7CiB,SAAS+gD,EAAQjW,EAAQkH,EAAIp0B,GACnD,GAAqB,kBAAXmjC,EACR,MAAM,IAAIlxD,UAAUkxD,EAAS,qBAM/B,IAAMpf,EAAqC,kBAH3C/jB,EAAUA,GAAW,CAAC,GAGS+jB,QAAuB/jB,EAAQ+jB,QAAU,EACxE,GAAgB,IAAZA,GAA6B,IAAZA,EACnB,MAAM,IAAI9xC,UAAU8xC,EAAU,mBAGhC,IAAM+e,EAAU,CACdK,OAAQA,GAOV,GAJe,IAAZpf,IACD+e,EAAQ3O,QAAU,OAGjBjH,EAAQ,CAET,GAAqB,kBAAXA,IAAwBpyC,MAAMC,QAAQmyC,GAC9C,MAAM,IAAIj7C,UAAUi7C,EAAS,wCAE/B4V,EAAQ5V,OAASA,CACnB,CAGA,GAAkB,qBAARkH,EAAqB,CAC7B,IAAMs0C,EAAyC,oBAAtB1oE,EAAQ0oE,UAA2B1oE,EAAQ0oE,UAAY,WAAa,OAAON,GAAQ,EAC5GtlC,EAAQ1O,GAAKs0C,EAAU5lC,EAAS9iC,EAClC,MAAuB,IAAZ+jB,GAAwB,OAAPqQ,EAEtBp0B,EAAQ2oE,qBACV7lC,EAAQ1O,GAAK,MAGf0O,EAAQ1O,GAAKA,EAGf,OAAO0O,CACT,4DCrDIqmC,EAAyB93F,EAAQ,OAKrC+Q,EAAAA,OAAqB,EAErB,IAAIgnF,EAAeD,EAAuB93F,EAAQ,QAE9Cg4F,EAAqBF,EAAuB93F,EAAQ,QAEpDi4F,EAAWH,EAAuB93F,EAAQ,QAE1Ck4F,EAAmBJ,EAAuB93F,EAAQ,QAElDm4F,EAAgBL,EAAuB93F,EAAQ,QAE/Co4F,EAAaN,EAAuB93F,EAAQ,QAE5Cq4F,EAA8BP,EAAuB93F,EAAQ,QAE7Ds4F,EAAmBR,EAAuB93F,EAAQ,QAElDu4F,EAAgBv4F,EAAQ,OAE5B,SAASK,EAAam4F,GAAW,IAAIC,EAErC,WAAuC,GAAuB,qBAAZhH,UAA4BA,QAAQiH,UAAW,OAAO,EAAO,GAAIjH,QAAQiH,UAAUC,KAAM,OAAO,EAAO,GAAqB,oBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhFjqF,QAAQ3M,UAAU62F,QAAQ31F,KAAKuuF,QAAQiH,UAAU/pF,QAAS,IAAI,WAAa,MAAY,CAAM,CAAE,MAAOxE,GAAK,OAAO,CAAO,CAAE,CAFvQ2uF,GAA6B,OAAO,WAAkC,IAAuDj4E,EAAnDk4E,GAAQ,EAAIT,EAA0B,SAAGE,GAAkB,GAAIC,EAA2B,CAAE,IAAIO,GAAY,EAAIV,EAA0B,SAAG7kF,MAAM1R,YAAa8e,EAAS4wE,QAAQiH,UAAUK,EAAOr2F,UAAWs2F,EAAY,MAASn4E,EAASk4E,EAAMt2F,MAAMgR,KAAM/Q,WAAc,OAAO,EAAI21F,EAAqC,SAAG5kF,KAAMoN,EAAS,CAAG,CAI3d,IAAIo4E,EAAsC,SAAUnvF,EAAGK,GACrD,IAAI6qB,EAAI,CAAC,EAET,IAAK,IAAI9Q,KAAKpa,EACRjI,OAAOG,UAAU8K,eAAe5J,KAAK4G,EAAGoa,IAAM/Z,EAAEmrC,QAAQpxB,GAAK,IAAG8Q,EAAE9Q,GAAKpa,EAAEoa,IAG/E,GAAS,MAALpa,GAAqD,oBAAjCjI,OAAOs0F,sBAA2C,KAAIrtF,EAAI,EAAb,IAAgBob,EAAIriB,OAAOs0F,sBAAsBrsF,GAAIhB,EAAIob,EAAEhjB,OAAQ4H,IAClIqB,EAAEmrC,QAAQpxB,EAAEpb,IAAM,GAAKjH,OAAOG,UAAUk3F,qBAAqBh2F,KAAK4G,EAAGoa,EAAEpb,MAAKksB,EAAE9Q,EAAEpb,IAAMgB,EAAEoa,EAAEpb,IADuB,CAGvH,OAAOksB,CACT,EAGImkE,EAA4B,SAAUC,IACxC,EAAIhB,EAAoB,SAAGe,EAAcC,GAEzC,IAAI52F,EAASnC,EAAa84F,GAW1B,SAASA,EAAaE,GACpB,IAAIt2F,EAEAokC,EAAUzkC,UAAUxB,OAAS,QAAsB+B,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,sBAE9E42F,EAAK52F,UAAUxB,OAAS,QAAsB+B,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAE1E89C,EAAsB99C,UAAUxB,OAAS,EAAIwB,UAAU,QAAKO,GAChE,EAAIi1F,EAA0B,SAAGzkF,KAAM0lF,GAEvC,IAAII,EAAiBD,EAAGz4C,YACpBA,OAAiC,IAAnB04C,GAAmCA,EACjDC,EAAeF,EAAGv4C,UAClBA,OAA6B,IAAjBy4C,GAAiCA,EAC7CC,EAAwBH,EAAGt4C,mBAC3BA,OAA+C,IAA1By4C,EAAmC,IAAOA,EAC/DC,EAAoBJ,EAAGx4C,eACvBA,OAAuC,IAAtB44C,EAA+B,EAAIA,EACpDC,EAAeV,EAAOK,EAAI,CAAC,cAAe,YAAa,qBAAsB,mBA0BjF,OAxBAv2F,EAAQP,EAAOU,KAAKuQ,OACd4lF,iBAAmBA,EACzBt2F,EAAM62F,MAAQ,CAAC,EACf72F,EAAM82F,OAAS,EACf92F,EAAMokC,QAAUA,EAChBpkC,EAAM89C,YAAcA,EACpB99C,EAAM+2F,OAAQ,EACd/2F,EAAMg+C,UAAYA,EAClBh+C,EAAMg3F,wBAAqB92F,EAC3BF,EAAMi+C,mBAAqBA,EAC3Bj+C,EAAM+9C,eAAiBA,EACvB/9C,EAAM42F,aAAeA,EACrB52F,EAAMi3F,mBAAqB,EAE3Bj3F,EAAMy9C,oBAAsBA,GAAuB,WACjD,QAASz9C,EAAM82F,MACjB,EAEI92F,EAAM89C,aAAa99C,EAAMk3F,SAASl3F,EAAMokC,QAAStlC,OAAOI,OAAO,CACjE4+C,YAAa99C,EAAM89C,YACnBE,UAAWh+C,EAAMg+C,UACjBC,mBAAoBj+C,EAAMi+C,mBAC1BF,eAAgB/9C,EAAM+9C,gBACrB/9C,EAAM42F,eACF52F,CACT,CAiXA,OAzWA,EAAIo1F,EAAuB,SAAGgB,EAAc,CAAC,CAC3C33F,IAAK,UACLC,MAAO,WACDgS,KAAKytC,QAETztC,KAAKwmF,SAASxmF,KAAK0zB,QAAStlC,OAAOI,OAAO,CACxC4+C,YAAaptC,KAAKotC,YAClBE,UAAWttC,KAAKstC,UAChBC,mBAAoBvtC,KAAKutC,mBACzBF,eAAgBrtC,KAAKqtC,gBACpBrtC,KAAKkmF,cACV,GAWC,CACDn4F,IAAK,OACLC,MAAO,SAAcqwD,EAAQjW,EAAQq+C,EAASC,GAC5C,IAAIx2F,EAAS8P,KAOb,OALK0mF,GAAW,YAAa,EAAIlC,EAAkB,SAAGiC,KACpDC,EAAUD,EACVA,EAAU,MAGL,IAAIxgD,SAAQ,SAAUC,EAAS2H,GACpC,IAAK39C,EAAOm2F,MAAO,OAAOx4C,EAAO,IAAI3+C,MAAM,qBAE3C,IAAIk3F,EAASl2F,EAAO68C,oBAAoBsR,EAAQjW,GAE5CvpB,EAAU,CACZwwB,QAAS,MACTgP,OAAQA,EACRjW,OAAQA,GAAU,KAClBkH,GAAI82C,GAGNl2F,EAAOu9C,OAAOk5C,KAAKjnE,KAAKC,UAAUd,GAAU6nE,GAAS,SAAUhrE,GAC7D,GAAIA,EAAO,OAAOmyB,EAAOnyB,GACzBxrB,EAAOi2F,MAAMC,GAAU,CACrBQ,QAAS,CAAC1gD,EAAS2H,IAGjB44C,IACFv2F,EAAOi2F,MAAMC,GAAQK,QAAUtgD,YAAW,kBACjCj2C,EAAOi2F,MAAMC,GACpBv4C,EAAO,IAAI3+C,MAAM,iBACnB,GAAGu3F,GAEP,GACF,GACF,GAQC,CACD14F,IAAK,QACLC,MAAO,WACL,IAAI64F,GAAS,EAAItC,EAA4B,SAAiBD,EAAsB,QAAE1jE,MAAK,SAASC,EAAQunB,GAC1G,IAAI0+C,EACJ,OAAOxC,EAAsB,QAAEnkE,MAAK,SAAkBC,GACpD,OACE,OAAQA,EAASC,KAAOD,EAASE,MAC/B,KAAK,EAEH,OADAF,EAASE,KAAO,EACTtgB,KAAKvQ,KAAK,YAAa24C,GAEhC,KAAK,EAGH,GAFA0+C,EAAO1mE,EAASiiB,KAEN,CACRjiB,EAASE,KAAO,EAChB,KACF,CAEA,MAAM,IAAIpxB,MAAM,yBAElB,KAAK,EACH,OAAOkxB,EAAS6S,OAAO,SAAU6zD,GAEnC,KAAK,EACL,IAAK,MACH,OAAO1mE,EAASK,OAGxB,GAAGI,EAAS7gB,KACd,KAMA,OAJA,SAAekzB,GACb,OAAO2zD,EAAO73F,MAAMgR,KAAM/Q,UAC5B,CAGF,CApCO,IA2CN,CACDlB,IAAK,cACLC,MAAO,WACL,IAAI+4F,GAAe,EAAIxC,EAA4B,SAAiBD,EAAsB,QAAE1jE,MAAK,SAASwB,IACxG,OAAOkiE,EAAsB,QAAEnkE,MAAK,SAAmBqB,GACrD,OACE,OAAQA,EAAUnB,KAAOmB,EAAUlB,MACjC,KAAK,EAEH,OADAkB,EAAUlB,KAAO,EACVtgB,KAAKvQ,KAAK,iBAEnB,KAAK,EACH,OAAO+xB,EAAUyR,OAAO,SAAUzR,EAAU6gB,MAE9C,KAAK,EACL,IAAK,MACH,OAAO7gB,EAAUf,OAGzB,GAAG2B,EAAUpiB,KACf,KAMA,OAJA,WACE,OAAO+mF,EAAa/3F,MAAMgR,KAAM/Q,UAClC,CAGF,CAzBO,IAkCN,CACDlB,IAAK,SACLC,MAAO,SAAgBqwD,EAAQjW,GAC7B,IAAI33C,EAASuP,KAEb,OAAO,IAAIimC,SAAQ,SAAUC,EAAS2H,GACpC,IAAKp9C,EAAO41F,MAAO,OAAOx4C,EAAO,IAAI3+C,MAAM,qBAC3C,IAAI2vB,EAAU,CACZwwB,QAAS,MACTgP,OAAQA,EACRjW,OAAQA,GAAU,MAGpB33C,EAAOg9C,OAAOk5C,KAAKjnE,KAAKC,UAAUd,IAAU,SAAUnD,GACpD,GAAIA,EAAO,OAAOmyB,EAAOnyB,GACzBwqB,GACF,GACF,GACF,GASC,CACDn4C,IAAK,YACLC,MAAO,WACL,IAAIg5F,GAAa,EAAIzC,EAA4B,SAAiBD,EAAsB,QAAE1jE,MAAK,SAASkC,EAASi/D,GAC/G,IAAI30E,EACJ,OAAOk3E,EAAsB,QAAEnkE,MAAK,SAAmBkC,GACrD,OACE,OAAQA,EAAUhC,KAAOgC,EAAU/B,MACjC,KAAK,EAGH,MAFqB,kBAAVyhE,IAAoBA,EAAQ,CAACA,IACxC1/D,EAAU/B,KAAO,EACVtgB,KAAKvQ,KAAK,SAAUsyF,GAE7B,KAAK,EAGH,GAFA30E,EAASiV,EAAUggB,KAEI,kBAAV0/C,GAAwC,OAAlB30E,EAAO20E,GAAkB,CAC1D1/D,EAAU/B,KAAO,EACjB,KACF,CAEA,MAAM,IAAIpxB,MAAM,mCAAqC6yF,EAAQ,WAAa30E,EAAO20E,IAEnF,KAAK,EACH,OAAO1/D,EAAU4Q,OAAO,SAAU7lB,GAEpC,KAAK,EACL,IAAK,MACH,OAAOiV,EAAU5B,OAGzB,GAAGqC,EAAU9iB,KACf,KAMA,OAJA,SAAmBmzB,GACjB,OAAO6zD,EAAWh4F,MAAMgR,KAAM/Q,UAChC,CAGF,CArCO,IA8CN,CACDlB,IAAK,cACLC,MAAO,WACL,IAAIi5F,GAAe,EAAI1C,EAA4B,SAAiBD,EAAsB,QAAE1jE,MAAK,SAASs7B,EAAS6lC,GACjH,IAAI30E,EACJ,OAAOk3E,EAAsB,QAAEnkE,MAAK,SAAmB4C,GACrD,OACE,OAAQA,EAAU1C,KAAO0C,EAAUzC,MACjC,KAAK,EAGH,MAFqB,kBAAVyhE,IAAoBA,EAAQ,CAACA,IACxCh/D,EAAUzC,KAAO,EACVtgB,KAAKvQ,KAAK,UAAWsyF,GAE9B,KAAK,EAGH,GAFA30E,EAAS2V,EAAUsf,KAEI,kBAAV0/C,GAAwC,OAAlB30E,EAAO20E,GAAkB,CAC1Dh/D,EAAUzC,KAAO,EACjB,KACF,CAEA,MAAM,IAAIpxB,MAAM,4CAA8Cke,GAEhE,KAAK,EACH,OAAO2V,EAAUkQ,OAAO,SAAU7lB,GAEpC,KAAK,EACL,IAAK,MACH,OAAO2V,EAAUtC,OAGzB,GAAGy7B,EAAUl8C,KACf,KAMA,OAJA,SAAqBozB,GACnB,OAAO6zD,EAAaj4F,MAAMgR,KAAM/Q,UAClC,CAGF,CArCO,IA8CN,CACDlB,IAAK,QACLC,MAAO,SAAe0+C,EAAMltC,GAC1BQ,KAAKytC,OAAOg2B,MAAM/2B,GAAQ,IAAMltC,EAClC,GAUC,CACDzR,IAAK,WACLC,MAAO,SAAkB0lC,EAASxY,GAChC,IAAIpqB,EAASkP,KAEb6sD,aAAa7sD,KAAKsmF,oBAClBtmF,KAAKytC,OAASztC,KAAK4lF,iBAAiBlyD,EAASxY,GAC7Clb,KAAKytC,OAAOib,iBAAiB,QAAQ,WACnC53D,EAAOu1F,OAAQ,EAEfv1F,EAAO8mF,KAAK,QAEZ9mF,EAAOy1F,mBAAqB,CAC9B,IACAvmF,KAAKytC,OAAOib,iBAAiB,WAAW,SAAUvlD,GAChD,IAAI0b,EAAU1b,EAAK3D,KACfqf,aAAmBqoE,cAAaroE,EAAUxxB,EAAOC,KAAKuxB,GAASviB,YAEnE,IACEuiB,EAAUa,KAAKykE,MAAMtlE,EACvB,CAAE,MAAOnD,GACP,MACF,CAGA,GAAImD,EAAQ2lD,cAAgB1zE,EAAO6xF,UAAU9jE,EAAQ2lD,cAAc/2E,OAAQ,CACzE,IAAKW,OAAO21B,KAAKlF,EAAQupB,QAAQ36C,OAAQ,OAAOqD,EAAO8mF,KAAK/4D,EAAQ2lD,cACpE,IAAIrqC,EAAO,CAACtb,EAAQ2lD,cACpB,GAAI3lD,EAAQupB,OAAO95C,cAAgBF,OAAQ+rC,EAAK7kC,KAAKupB,EAAQupB,aAC3D,IAAK,IAAI/yC,EAAI,EAAGA,EAAIwpB,EAAQupB,OAAO36C,OAAQ4H,IACzC8kC,EAAK7kC,KAAKupB,EAAQupB,OAAO/yC,IAI7B,OAAO4wC,QAAQC,UAAUqa,MAAK,WAC5BzvD,EAAO8mF,KAAK5oF,MAAM8B,EAAQqpC,EAC5B,GACF,CAEA,IAAKrpC,EAAOq1F,MAAMtnE,EAAQywB,IAExB,OAAIzwB,EAAQw/B,QAAUx/B,EAAQupB,OAErBnC,QAAQC,UAAUqa,MAAK,WAC5BzvD,EAAO8mF,KAAK/4D,EAAQw/B,OAAQx/B,EAAQupB,OACtC,SAGF,EAIE,UAAWvpB,IAAY,WAAYA,GAAS/tB,EAAOq1F,MAAMtnE,EAAQywB,IAAIs3C,QAAQ,GAAG,IAAI13F,MAAM,+FAC1F4B,EAAOq1F,MAAMtnE,EAAQywB,IAAIm3C,SAAS55B,aAAa/7D,EAAOq1F,MAAMtnE,EAAQywB,IAAIm3C,SACxE5nE,EAAQnD,MAAO5qB,EAAOq1F,MAAMtnE,EAAQywB,IAAIs3C,QAAQ,GAAG/nE,EAAQnD,OAAY5qB,EAAOq1F,MAAMtnE,EAAQywB,IAAIs3C,QAAQ,GAAG/nE,EAAQzR,eAChHtc,EAAOq1F,MAAMtnE,EAAQywB,GAC9B,IACAtvC,KAAKytC,OAAOib,iBAAiB,SAAS,SAAUhtC,GAC9C,OAAO5qB,EAAO8mF,KAAK,QAASl8D,EAC9B,IACA1b,KAAKytC,OAAOib,iBAAiB,SAAS,SAAUrjD,GAC9C,IAAIqnC,EAAOrnC,EAAMqnC,KACbyb,EAAS9iD,EAAM8iD,OACfr3D,EAAOu1F,OACTlgD,YAAW,WACT,OAAOr1C,EAAO8mF,KAAK,QAASlrC,EAAMyb,EACpC,GAAG,GACLr3D,EAAOu1F,OAAQ,EACfv1F,EAAO28C,YAASj+C,EACH,MAATk9C,IACJ57C,EAAOy1F,qBACHz1F,EAAOw8C,YAAcx8C,EAAOu8C,eAAiBv8C,EAAOy1F,oBAAgD,IAA1Bz1F,EAAOu8C,kBAAuBv8C,EAAOw1F,mBAAqBngD,YAAW,WACjJ,OAAOr1C,EAAO01F,SAAS9yD,EAASxY,EAClC,GAAGpqB,EAAOy8C,qBACZ,GACF,KAEKm4C,CACT,CA7agC,CA6a9BZ,EAAczC,cAEhB/kF,EAAAA,EAAqBooF,0CC3djBrB,EAAyB93F,EAAQ,OAKrC+Q,EAAAA,EA4GA,SAAkBo2B,EAASxY,GACzB,OAAO,IAAIisE,EAAqBzzD,EAASxY,EAC3C,EA5GA,IAAIupE,EAAmBJ,EAAuB93F,EAAQ,QAElDm4F,EAAgBL,EAAuB93F,EAAQ,QAE/Co4F,EAAaN,EAAuB93F,EAAQ,QAE5Cq4F,EAA8BP,EAAuB93F,EAAQ,QAE7Ds4F,EAAmBR,EAAuB93F,EAAQ,QAItD,SAASK,EAAam4F,GAAW,IAAIC,EAErC,WAAuC,GAAuB,qBAAZhH,UAA4BA,QAAQiH,UAAW,OAAO,EAAO,GAAIjH,QAAQiH,UAAUC,KAAM,OAAO,EAAO,GAAqB,oBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhFjqF,QAAQ3M,UAAU62F,QAAQ31F,KAAKuuF,QAAQiH,UAAU/pF,QAAS,IAAI,WAAa,MAAY,CAAM,CAAE,MAAOxE,GAAK,OAAO,CAAO,CAAE,CAFvQ2uF,GAA6B,OAAO,WAAkC,IAAuDj4E,EAAnDk4E,GAAQ,EAAIT,EAA0B,SAAGE,GAAkB,GAAIC,EAA2B,CAAE,IAAIO,GAAY,EAAIV,EAA0B,SAAG7kF,MAAM1R,YAAa8e,EAAS4wE,QAAQiH,UAAUK,EAAOr2F,UAAWs2F,EAAY,MAASn4E,EAASk4E,EAAMt2F,MAAMgR,KAAM/Q,WAAc,OAAO,EAAI21F,EAAqC,SAAG5kF,KAAMoN,EAAS,CAAG,CAI3d,IAAI+5E,EAAoC,SAAUxB,IAChD,EAAIhB,EAAoB,SAAGwC,EAAsBxB,GAEjD,IAAI52F,EAASnC,EAAau6F,GAS1B,SAASA,EAAqBzzD,EAASxY,EAASksE,GAC9C,IAAI93F,EAsBJ,OApBA,EAAIm1F,EAA0B,SAAGzkF,KAAMmnF,IACvC73F,EAAQP,EAAOU,KAAKuQ,OACdytC,OAAS,IAAIz6B,OAAOq0E,UAAU3zD,EAAS0zD,GAE7C93F,EAAMm+C,OAAO65C,OAAS,WACpB,OAAOh4F,EAAMsoF,KAAK,OACpB,EAEAtoF,EAAMm+C,OAAO85C,UAAY,SAAUxF,GACjC,OAAOzyF,EAAMsoF,KAAK,UAAWmK,EAAMviF,KACrC,EAEAlQ,EAAMm+C,OAAO+5C,QAAU,SAAU9rE,GAC/B,OAAOpsB,EAAMsoF,KAAK,QAASl8D,EAC7B,EAEApsB,EAAMm+C,OAAOg6C,QAAU,SAAU1F,GAC/BzyF,EAAMsoF,KAAK,QAASmK,EAAMr1C,KAAMq1C,EAAM55B,OACxC,EAEO74D,CACT,CA2CA,OAhCA,EAAIo1F,EAAuB,SAAGyC,EAAsB,CAAC,CACnDp5F,IAAK,OACLC,MAAO,SAAcwR,EAAMkoF,EAAmBzpC,GAC5C,IAAI+kB,EAAK/kB,GAAYypC,EAErB,IACE1nF,KAAKytC,OAAOk5C,KAAKnnF,GACjBwjE,GACF,CAAE,MAAOtnD,GACPsnD,EAAGtnD,EACL,CACF,GAUC,CACD3tB,IAAK,QACLC,MAAO,SAAe0+C,EAAMyb,GAC1BnoD,KAAKytC,OAAOg2B,MAAM/2B,EAAMyb,EAC1B,GACC,CACDp6D,IAAK,mBACLC,MAAO,SAA0Bqe,EAAM21E,EAAU9mE,GAC/Clb,KAAKytC,OAAOib,iBAAiBr8C,EAAM21E,EAAU9mE,EAC/C,KAEKisE,CACT,CAhFwC,CANpB56F,EAAQ,OAsFZ81F,kDC1GhB,IAAI1hF,mCACJ,IAAIgnF,EAAQ,IAAIz6F,WAAW,IACZ,SAAS06F,IAEtB,IAAKjnF,KAGHA,EAAoC,qBAAXjC,QAA0BA,OAAOiC,iBAAmBjC,OAAOiC,gBAAgB5H,KAAK2F,SAA+B,qBAAbmpF,UAAgE,oBAA7BA,SAASlnF,iBAAkCknF,SAASlnF,gBAAgB5H,KAAK8uF,WAGrO,MAAM,IAAI34F,MAAM,4GAIpB,OAAOyR,EAAgBgnF,EACzB,CClBA,4HCQA,ICFA,MAJA,SAAkBrE,GAChB,MAAuB,kBAATA,GAAqBwE,EAAMnrC,KAAK2mC,EAChD,EDEIyE,EAAY,GAEP1yF,EAAI,EAAGA,EAAI,MAAOA,EACzB0yF,EAAUzyF,MAAMD,EAAI,KAAOiH,SAAS,IAAIivE,OAAO,IAoBjD,MAjBA,SAAmBxsE,GACjB,IAAI9Q,EAASgB,UAAUxB,OAAS,QAAsB+B,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,EAG7Eq0F,GAAQyE,EAAUhpF,EAAI9Q,EAAS,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM85F,EAAUhpF,EAAI9Q,EAAS,IAAM,IAAM85F,EAAUhpF,EAAI9Q,EAAS,KAAO85F,EAAUhpF,EAAI9Q,EAAS,KAAO85F,EAAUhpF,EAAI9Q,EAAS,KAAO85F,EAAUhpF,EAAI9Q,EAAS,KAAO85F,EAAUhpF,EAAI9Q,EAAS,KAAO85F,EAAUhpF,EAAI9Q,EAAS,MAAM+5F,cAMzf,IAAK1lE,EAASghE,GACZ,MAAMn2F,UAAU,+BAGlB,OAAOm2F,CACT,EEJA,MApBA,SAAYpoE,EAASiM,EAAKl5B,GAExB,IAAIg6F,GADJ/sE,EAAUA,GAAW,CAAC,GACHgtE,SAAWhtE,EAAQ0sE,KAAOA,KAK7C,GAHAK,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvB9gE,EAAK,CACPl5B,EAASA,GAAU,EAEnB,IAAK,IAAIoH,EAAI,EAAGA,EAAI,KAAMA,EACxB8xB,EAAIl5B,EAASoH,GAAK4yF,EAAK5yF,GAGzB,OAAO8xB,CACT,CAEA,OAAOxH,EAAUsoE,EACnB,yBCnBA,IAAIE,EAAU,EAAQ,MAAR,GACdtM,EAAOv+E,QAAU6qF,EAGjB,IACEC,mBAAqBD,CACvB,CAAE,MAAOE,GACmB,kBAAf1pF,WACTA,WAAWypF,mBAAqBD,EAEhCG,SAAS,IAAK,yBAAdA,CAAwCH,EAE5C,sCCCA,SAASxyE,EAAQ9W,EAAGJ,EAAKmX,GACvB,OAAOnX,GAAOI,GAAKA,GAAK+W,CAC1B,CAMA,SAAS2yE,EAAa/K,GACpB,QAAUhuF,IAANguF,EAAiB,MAAO,CAAC,EAC7B,GAAIA,IAAMpvF,OAAOovF,GAAI,OAAOA,EAC5B,MAAMrwF,UAAU,2CAClB,mFA+HA,SAASq7F,EAAOC,GAEdzoF,KAAKyoF,OAAS,GAAGtsF,MAAM1M,KAAKg5F,EAC9B,CAEAD,EAAOj6F,UAAY,CAIjBm6F,YAAa,WACX,OAAQ1oF,KAAKyoF,OAAOh7F,MACtB,EAUCk7F,KAAM,WACL,OAAK3oF,KAAKyoF,OAAOh7F,OAETuS,KAAKyoF,OAAOhxF,SAjCA,CAkCrB,EASDmxF,QAAS,SAASC,GAChB,GAAI7yF,MAAMC,QAAQ4yF,GAEhB,IADA,IAAIJ,EAAsCI,EACnCJ,EAAOh7F,QACZuS,KAAKyoF,OAAOjnD,QAAQinD,EAAOK,YAE7B9oF,KAAKyoF,OAAOjnD,QAAQqnD,EAExB,EASAvzF,KAAM,SAASuzF,GACb,GAAI7yF,MAAMC,QAAQ4yF,GAEhB,IADA,IAAIJ,EAAsCI,EACnCJ,EAAOh7F,QACZuS,KAAKyoF,OAAOnzF,KAAKmzF,EAAOhxF,cAE1BuI,KAAKyoF,OAAOnzF,KAAKuzF,EAErB,GAUF,IAAIvqF,GAAY,EAOhB,SAASyqF,EAAajK,EAAOkK,GAC3B,GAAIlK,EACF,MAAM3xF,UAAU,iBAClB,OAAO67F,GAAkB,KAC3B,CA8Bc,IAAIC,EAAmB,QAUrC,SAASpK,EAAYj4B,EAAU1rC,GAC7B,KAAMlb,gBAAgB6+E,GACpB,OAAO,IAAIA,EAAYj4B,EAAU1rC,GAGnC,IADA0rC,OAAwBp3D,IAAbo3D,EAAyBlqD,OAAOkqD,GAAUohC,cAAgBiB,KACpDA,EACf,MAAM,IAAI/5F,MAAM,mDAElBgsB,EAAUqtE,EAAartE,GAGvBlb,KAAKkpF,YAAa,EAElBlpF,KAAKmpF,UAAW,EAEhBnpF,KAAKopF,SAAW,KAEhBppF,KAAKqpF,OAASnuF,QAAQggB,EAAe,OAErClb,KAAKspF,WAAapuF,QAAQggB,EAAmB,WAE7C9sB,OAAOkmC,eAAet0B,KAAM,WAAY,CAAChS,MAAO,UAChDI,OAAOkmC,eAAet0B,KAAM,QAAS,CAAChS,MAAOgS,KAAKqpF,SAClDj7F,OAAOkmC,eAAet0B,KAAM,YAAa,CAAChS,MAAOgS,KAAKspF,YACxD,CA4FA,SAAShqF,EAAYsnD,EAAU1rC,GAC7B,KAAMlb,gBAAgBV,GACpB,OAAO,IAAIA,EAAYsnD,EAAU1rC,GAEnC,IADA0rC,OAAwBp3D,IAAbo3D,EAAyBlqD,OAAOkqD,GAAUohC,cAAgBiB,KACpDA,EACf,MAAM,IAAI/5F,MAAM,mDAElBgsB,EAAUqtE,EAAartE,GAGvBlb,KAAKkpF,YAAa,EAElBlpF,KAAKupF,SAAW,KAEhBvpF,KAAKqnE,SAAW,CAACyX,MAAO5jF,QAAQggB,EAAe,QAE/C9sB,OAAOkmC,eAAet0B,KAAM,WAAY,CAAChS,MAAO,SAClD,CA2DA,SAASw7F,EAAYtuE,GACnB,IAAI4jE,EAAQ5jE,EAAQ4jE,MAMM2K,EAAkB,EAClBC,EAAkB,EAClBC,EAAoB,EACpBC,EAAsB,IACtBC,EAAsB,IAShD7pF,KAAKowE,QAAU,SAAS0Z,EAAQC,GAG9B,IAxVoB,IAwVhBA,GAAgD,IAAtBJ,EAE5B,OADAA,EAAoB,EACbZ,EAAajK,GAItB,IA9VoB,IA8VhBiL,EACF,OAAOzrF,EAGT,GAA0B,IAAtBqrF,EAAyB,CAG3B,GAAIh0E,EAAQo0E,EAAM,EAAM,KAEtB,OAAOA,EAIT,GAAIp0E,EAAQo0E,EAAM,IAAM,KAGtBJ,EAAoB,EACpBF,EAAkBM,EAAO,SAItB,GAAIp0E,EAAQo0E,EAAM,IAAM,KAEd,MAATA,IACFH,EAAsB,KAEX,MAATG,IACFF,EAAsB,KAGxBF,EAAoB,EACpBF,EAAkBM,EAAO,QAItB,KAAIp0E,EAAQo0E,EAAM,IAAM,KAgB3B,OAAOhB,EAAajK,GAdP,MAATiL,IACFH,EAAsB,KAEX,MAATG,IACFF,EAAsB,KAGxBF,EAAoB,EACpBF,EAAkBM,EAAO,GAO3B,CAMA,OADAN,IAAsC,EAAIE,EACnC,IACT,CAIA,IAAKh0E,EAAQo0E,EAAMH,EAAqBC,GAatC,OARAJ,EAAkBE,EAAoBD,EAAkB,EACxDE,EAAsB,IACtBC,EAAsB,IAGtBC,EAAOlB,QAAQmB,GAGRhB,EAAajK,GAgBtB,GAXA8K,EAAsB,IACtBC,EAAsB,IAMtBJ,GAAoBM,EAAO,KAAU,GAAKJ,GAD1CD,GAAmB,IAKfA,IAAoBC,EACtB,OAAO,KAGT,IAAIK,EAAaP,EAOjB,OAHAA,EAAkBE,EAAoBD,EAAkB,EAGjDM,CACT,CACF,CAOA,SAASC,EAAY/uE,GACPA,EAAQ4jE,MAMpB9+E,KAAKowE,QAAU,SAAS0Z,EAAQE,GAE9B,IAvdoB,IAudhBA,EACF,OAAO1rF,EAIT,GAAIqX,EAAQq0E,EAAY,EAAQ,KAC9B,OAAOA,EAGT,IAAIh1F,EAAO/G,EAEP0nB,EAAQq0E,EAAY,IAAQ,OAC9Bh1F,EAAQ,EACR/G,EAAS,KAGF0nB,EAAQq0E,EAAY,KAAQ,QACnCh1F,EAAQ,EACR/G,EAAS,KAGF0nB,EAAQq0E,EAAY,MAAS,WACpCh1F,EAAQ,EACR/G,EAAS,KAQX,IAHA,IAAIyP,EAAQ,EAAEssF,GAAe,EAAIh1F,GAAU/G,GAGpC+G,EAAQ,GAAG,CAGhB,IAAIk1F,EAAOF,GAAe,GAAKh1F,EAAQ,GAGvC0I,EAAMpI,KAAK,IAAe,GAAP40F,GAGnBl1F,GAAS,CACX,CAGA,OAAO0I,CACT,CACF,CA1WAmhF,EAAYtwF,UAAY,CAMtB8B,OAAQ,SAAgBsyB,EAAOzH,GAC7B,IAAIxd,EAEFA,EADmB,kBAAVilB,GAAsBA,aAAiBukE,YACxC,IAAIh6F,WAAWy1B,GACG,kBAAVA,GAAsB,WAAYA,GACzCA,EAAMp1B,kBAAkB25F,YACzB,IAAIh6F,WAAWy1B,EAAMp1B,OACNo1B,EAAMn1B,WACNm1B,EAAM1jB,YAErB,IAAI/R,WAAW,GAGzBguB,EAAUqtE,EAAartE,GAElBlb,KAAKkpF,aACRlpF,KAAKopF,SAAW,IAAII,EAAY,CAAC1K,MAAO9+E,KAAKqpF,SAC7CrpF,KAAKmpF,UAAW,GAElBnpF,KAAKkpF,WAAahuF,QAAQggB,EAAgB,QAS1C,IAPA,IAKI9N,EALA+8E,EAAe,IAAI3B,EAAO9qF,GAE1B0sF,EAAc,IAKVD,EAAazB,gBACnBt7E,EAASpN,KAAKopF,SAAShZ,QAAQ+Z,EAAcA,EAAaxB,WAC3CrqF,GAEA,OAAX8O,IAEApX,MAAMC,QAAQmX,GAChBg9E,EAAY90F,KAAKtG,MAAMo7F,EAA0Ch9E,GAEjEg9E,EAAY90F,KAAK8X,IAErB,IAAKpN,KAAKkpF,WAAY,CACpB,EAAG,CAED,IADA97E,EAASpN,KAAKopF,SAAShZ,QAAQ+Z,EAAcA,EAAaxB,WAC3CrqF,EACb,MACa,OAAX8O,IAEApX,MAAMC,QAAQmX,GAChBg9E,EAAY90F,KAAKtG,MAAMo7F,EAA0Ch9E,GAEjEg9E,EAAY90F,KAAK8X,GACrB,QAAU+8E,EAAazB,eACvB1oF,KAAKopF,SAAW,IAClB,CAoBA,OAlBIgB,EAAY38F,UAI4B,IAAtC,CAAC,SAASo0C,QAAQ7hC,KAAK4mD,WACtB5mD,KAAKspF,YAAetpF,KAAKmpF,WAEL,QAAnBiB,EAAY,IACdpqF,KAAKmpF,UAAW,EAChBiB,EAAY3yF,SAIZuI,KAAKmpF,UAAW,IAjQ1B,SAA4BiB,GAE1B,IADA,IAAI/zF,EAAI,GACChB,EAAI,EAAGA,EAAI+0F,EAAY38F,SAAU4H,EAAG,CAC3C,IAAIg1F,EAAKD,EAAY/0F,GACjBg1F,GAAM,MACRh0F,GAAKqG,OAAO4tF,aAAaD,IAEzBA,GAAM,MACNh0F,GAAKqG,OAAO4tF,aAA0B,OAAZD,GAAM,IACQ,OAAT,KAALA,IAE9B,CACA,OAAOh0F,CACT,CAyPWk0F,CAAmBH,EAC5B,GA8BF9qF,EAAY/Q,UAAY,CAMtB+B,OAAQ,SAAgBk6F,EAAYtvE,GAClCsvE,EAAaA,EAAa9tF,OAAO8tF,GAAc,GAC/CtvE,EAAUqtE,EAAartE,GAKlBlb,KAAKkpF,aACRlpF,KAAKupF,SAAW,IAAIU,EAAYjqF,KAAKqnE,WACvCrnE,KAAKkpF,WAAahuF,QAAQggB,EAAgB,QAM1C,IAJA,IAGI9N,EAHA1P,EAAQ,GACRysF,EAAe,IAAI3B,EA1Y3B,SAA4B98E,GAgB1B,IAZA,IAAIrV,EAAIqG,OAAOgP,GAGXpV,EAAID,EAAE5I,OAGN4H,EAAI,EAGJsY,EAAI,GAGDtY,EAAIiB,GAAG,CAGZ,IAAIob,EAAIrb,EAAE6lF,WAAW7mF,GAKrB,GAAIqc,EAAI,OAAUA,EAAI,MAEpB/D,EAAErY,KAAKoc,QAIJ,GAAI,OAAUA,GAAKA,GAAK,MAE3B/D,EAAErY,KAAK,YAIJ,GAAI,OAAUoc,GAAKA,GAAK,MAG3B,GAAIrc,IAAMiB,EAAI,EACZqX,EAAErY,KAAK,WAGJ,CAEH,IAAIob,EAAIhF,EAAOwwE,WAAW7mF,EAAI,GAG9B,GAAI,OAAUqb,GAAKA,GAAK,MAAQ,CAE9B,IAAI7R,EAAQ,KAAJ6S,EAGJzkB,EAAQ,KAAJyjB,EAIR/C,EAAErY,KAAK,OAAWuJ,GAAK,IAAM5R,GAG7BoI,GAAK,CACP,MAKEsY,EAAErY,KAAK,MAEX,CAIFD,GAAK,CACP,CAGA,OAAOsY,CACT,CA6TkC88E,CAAmBD,KAGzCL,EAAazB,gBACnBt7E,EAASpN,KAAKupF,SAASnZ,QAAQ+Z,EAAcA,EAAaxB,WAC3CrqF,GAEXtI,MAAMC,QAAQmX,GAChB1P,EAAMpI,KAAKtG,MAAM0O,EAAoC0P,GAErD1P,EAAMpI,KAAK8X,GAEf,IAAKpN,KAAKkpF,WAAY,CACpB,MACE97E,EAASpN,KAAKupF,SAASnZ,QAAQ+Z,EAAcA,EAAaxB,WAC3CrqF,GAEXtI,MAAMC,QAAQmX,GAChB1P,EAAMpI,KAAKtG,MAAM0O,EAAoC0P,GAErD1P,EAAMpI,KAAK8X,GAEfpN,KAAKupF,SAAW,IAClB,CACA,OAAO,IAAIr8F,WAAWwQ,EACxB","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@noble/curves/src/ed25519.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n\n  solflareProviderHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n    const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n    return sigData;\n  };\n  return solflareProviderHandlers;\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{ chainId: params.chainId }],\n    });\n  }\n\n  public async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\", preflightCommitment: \"confirmed\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { getED25519Key } from \"@toruslabs/openlogin-ed25519\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public getEd25519Key(privateKey: string): string {\n    return getED25519Key(privateKey).sk.toString(\"hex\");\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["_get","require","_getPrototypeOf","_assertThisInitialized","_createForOfIteratorHelper","_inherits","_createSuper","_classCallCheck","_createClass","buffer_1","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","key","value","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","nameWithProperty","name","lo","ExternalLayout","_Layout","_super","apply","arguments","Error","GreedyCount","_ExternalLayout","_super2","_this","elementSpan","undefined","call","rem","Math","floor","src","OffsetLayout","_ExternalLayout2","_super3","layout","_this2","UInt","UIntBE","decode","encode","_Layout2","_super4","_this3","readUIntLE","writeUIntLE","_Layout3","_super5","_this4","readUIntBE","writeUIntBE","Int","_Layout4","_super6","_this5","readIntLE","writeIntLE","IntBE","_Layout5","_super7","_this6","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","_Layout6","_super8","readUInt32LE","split","writeUInt32LE","NearUInt64BE","_Layout7","_super9","readUInt32BE","writeUInt32BE","NearInt64","_Layout8","_super10","readInt32LE","writeInt32LE","NearInt64BE","_Layout9","_super11","readInt32BE","writeInt32BE","Float","_Layout10","_super12","readFloatLE","writeFloatLE","FloatBE","_Layout11","_super13","readFloatBE","writeFloatBE","Double","_Layout12","_super14","readDoubleLE","writeDoubleLE","DoubleBE","_Layout13","_super15","readDoubleBE","writeDoubleBE","Sequence","_Layout14","_super16","elementLayout","count","_this7","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","_Layout15","_super17","fields","decodePrefixes","_this8","Array","isArray","acc","_step","_iterator","s","n","done","fd","err","e","f","fsp","_step2","dest","makeDestinationObject","_iterator2","_step3","firstOffset","lastOffset","lastWrote","_iterator3","fv","_step4","_iterator4","shift","_step5","_iterator5","_step6","_iterator6","UnionDiscriminator","UnionLayoutDiscriminator","_UnionDiscriminator","_super18","_this9","Union","_Layout16","_super19","discr","defaultLayout","_this10","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","_Layout17","_super20","union","_this11","fromArray","fixBitwiseResult","BitStructure","_Layout18","_super21","word","msb","_this12","_packedSetValue","_packedGetValue","_step7","_iterator7","_step8","_iterator8","bits","bf","BitField","Boolean","_step9","_iterator9","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","_BitField","_super22","Blob","_Layout19","_super23","_this13","slice","srcBuffer","write","toString","CString","_Layout20","_super24","String","srcb","copy","UTF8","_Layout21","_super25","maxSpan","_this14","Constant","_Layout22","_super26","_this15","exports","number","isSafeInteger","concat","bytes","_len","lengths","_key","includes","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","u8a","a","createView","arr","DataView","byteLength","rotr","Uint32Array","utf8ToBytes","str","TextEncoder","toBytes","data","concatBytes","arrays","r","pad","forEach","set","Hash","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","_Hash","padOffset","isLE","pos","view","len","take","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digestInto","res","destroy","to","_to","_toConsumableArray","U32_MASK64","fromBig","lst","le","Ah","Al","_fromBig","_ref","rotlSH","rotlSL","rotlBH","rotlBL","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","u64","map","_ref2","_slicedToArray","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","_SHA","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","_u64$add","All","_u64$add2","_u64$add3","_u64$add4","_u64$add5","_u64$add6","_u64$add7","_u64$add8","_u64$add9","sha512","_0n","_1n","_2n","hexes","_","padStart","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","equalBytes","b1","b2","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","_len2","_key2","reseed","seed","gen","sl","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","_i","_Object$entries","entries","_Object$entries$_i","_i2","_Object$entries2","_Object$entries2$_i","_3n","_4n","_5n","_8n","mod","result","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","isNegativeLE","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","redef","_nLength","BITS","BYTES","sqrtP","freeze","MASK","is0","isOdd","lhs","rhs","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","nums","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","c","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","wNAF","constTimeNegate","condition","item","negate","opts","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","_opts","points","base","window","precomputes","_opts2","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","validateField","Gx","Gy","_objectSpread","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","delete","X","Y","T","X2","Y2","Z2","Z4","aX2","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","equals","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","T1","T2","wnaf","normalizeZ","scalar","_this$wNAF","I","multiplyUnsafe","iz","z","ax","ay","zz","_this$toAffine","toRawBytes","toInv","fromAffine","normed","lastByte","y2","_uvRatio","isXOdd","isLastByteOdd","privKey","getExtendedPublicKey","point","modN","modN_LE","hashed","head","prefix","multiply","pointBytes","hashDomainToScalar","context","msgs","verifyOpts","_setWindowSize","utils","randomPrivateKey","precompute","getPublicKey","sign","options","_getExtendedPublicKey","R","verify","sig","publicKey","SB","fromHex","error","isSmallOrder","subtract","clearCofactor","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","ELL2_C1","FpSqrtEven","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","W2","s0","s1","sha256","toFailures","StructError","_TypeError","failure","failures","cached","message","rest","_objectWithoutProperties","_excluded","path","join","_cached","_wrapNativeSuper","isIterable","isObject","Symbol","iterator","print","JSON","stringify","toFailure","struct","branch","_result","refinement","_result$message","_regeneratorRuntime","wrap","_context","prev","next","t0","finish","stop","_marked","run","mark","_callee","_options$path","_options$branch","_options$coerce","coerce","_options$mask","valid","_failure","_step3$value","ts","t","_context2","coercer","schema","validator","Set","t1","refiner","t3","Struct","props","_props$coercer","_props$entries","_callee2","_context3","validate","assert","is","tuples","tuple","input","_input$next","shiftIterator","_callee3","_context4","define","Element","_step9$value","_context7","Class","literal","constant","description","never","nullable","optional","record","Key","Value","_context13","keys","Elements","Never","_context15","_keys","_context16","Structs","_step18","_iterator18","_run","_toArray","_step19","_iterator19","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","_split","_split2","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","keccak","bufferOut","writeInto","xofInto","keccak_256","HMAC","assertHash","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","hmac","b2n","h2b","DER","Err","_Error","DERErr","_parseInt","toSig","_DER$_parseInt","sBytes","_DER$_parseInt2","hexFromSig","shl","rhl","rl","weierstrassPoints","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","_isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","left","right","U1","U2","b3","Z3","t4","t5","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","fake","_endo$splitScalar2","f1p","_this$wNAF2","f2p","_this$wNAF3","isCompressed","assertValidity","privateKey","_bits","ProjectivePoint","weierstrass","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","_weierstrassPoints","cat","hasEvenY","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","ir","u1","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","_DER$toSig","isValidPrivateKey","fieldLen","minLen","reduced","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","ent","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","fromPrivateKey","getSharedSecret","privateA","publicB","_prepSig","drbg","signature","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","_sig2","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","getHash","createCurve","a1","a2","POW_2_128","c2","generateKeypair","privateScalar","secretKey","isOnCurve","_unused","toBuffer","isBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","_Struct","_createSuper$3","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toArrayLike","zeroPad","alloc","_createWithSeed","_asyncToGenerator","fromPublicKey","programId","publicKeyBytes","abrupt","_x","_x2","_x3","seeds","_createProgramAddress","createProgramAddressSync","_x4","_x5","address","nonce","seedsWithNonce","_findProgramAddress","findProgramAddressSync","_x6","_x7","pubkeyData","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","_createSuper$2","defineProperty","TransactionExpiredTimeoutError","_Error2","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","_Error3","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","_createForOfIteratorHelper$5","keySegment","flat","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","mapEntries","writableSigners","filter","isSigner","isWritable","readonlySigners","_ref3","writableNonSigners","_ref5","readonlyNonSigners","_ref7","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_ref9","_ref11","_ref13","_ref15","lookupTable","_this$drainKeysFoundI","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","_this$drainKeysFoundI2","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI3","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_createForOfIteratorHelper$4","_loop","_step$value","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","ix","accountMeta","_keyMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","numSignedAccounts","has","isProgramId","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","_compiledKeys$getMess","compile","payerKey","getMessageComponents","_compiledKeys$getMess2","compileInstructions","byteArray","accountCount","_accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","_createForOfIteratorHelper$3","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","_index","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","compiledKeys","extractResult","extractTableLookup","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","version","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","toJSON","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","_ref4","_nonceInfo","nonceInstruction","signers","items","console","warn","programIds","accountMetas","_objectSpread$2","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","_uniqueMetas$splice","payerMeta","unshift","_createForOfIteratorHelper$2","signedKeys","unsignedKeys","_ref6","indexOf","compileMessage","every","pair","_compile","_getEstimatedFee","connection","getFeeForMessage","sent","seen","_len3","_key3","uniqueSigners","_signers","signer","_partialSign","_len4","_key4","_signers2","_len5","_key5","_addSignature","sigpair","requireAllSignatures","_verifySignatures","serializeMessage","_step2$value","config","_Object$assign","verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","isAccountSigner","isAccountWritable","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","messageData","signerPubkeys","signerIndex","signaturesLength","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_sendAndConfirmTransaction","sendOptions","status","nonceAccountPubkey","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","_encodeDecode","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","chunkSize","_load","program","balanceNeeded","programInfo","dataLayout","transactions","_data","_transaction","_dataLayout","_data2","_transaction2","deployCommitment","finalizeSignature","_yield$connection$con","getMinimumBalanceForRentExemption","getAccountInfo","executable","allocate","owner","transfer","bytesLengthPadding","_rpcEndpoint","all","getSlot","slot","MS_PER_SLOT","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","SendTransactionError","_createSuper$1","logs","SolanaJSONRPCError","customMessage","code","fetchImpl","fetch","RpcWebSocketClient","_RpcWebSocketCommonCl","generate_request_id","url","rpc","createRpc","_objectSpread$1","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","_get2","readyState","reject","_this$underlyingSocke2","_get3","RpcWebSocketCommonClient","AddressLookupTableAccount","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","_process$env$npm_pack","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_callee4","_requestPromises$requ","_extractCommitmentFro","requestHash","_buildArgs","fastStableStringify$1","unsafeRes","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","_matches","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","too_many_requests_retries","waitTime","text","method","body","agent","headers","log","statusText","ok","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_getBalanceAndContext","_callee5","_extractCommitmentFro2","_context5","_getBalance","_callee6","_context6","getBalanceAndContext","then","_x8","_x9","_getBlockTime","_callee7","_x10","_getMinimumLedgerSlot","_callee8","_context8","_getFirstAvailableBlock","_callee9","_context9","_getSupply","_callee10","configArg","_context10","_x11","_getTokenSupply","_callee11","tokenMintAddress","_context11","_x12","_x13","_getTokenAccountBalance","_callee12","tokenAddress","_context12","_x14","_x15","_getTokenAccountsByOwner","_callee13","ownerAddress","_extractCommitmentFro3","_args","_x16","_x17","_x18","_getParsedTokenAccountsByOwner","_callee14","_context14","_x19","_x20","_x21","_getLargestAccounts","_callee15","arg","_x22","_getTokenLargestAccounts","_callee16","mintAddress","_x23","_x24","_getAccountInfoAndContext","_callee17","_extractCommitmentFro4","_context17","_x25","_x26","_getParsedAccountInfo","_callee18","_extractCommitmentFro5","_context18","_x27","_x28","_getAccountInfo","_callee19","_context19","getAccountInfoAndContext","_x29","_x30","_getMultipleParsedAccounts","_callee20","publicKeys","rawConfig","_extractCommitmentFro6","_context20","_x31","_x32","_getMultipleAccountsInfoAndContext","_callee21","_extractCommitmentFro7","_context21","_x33","_x34","_getMultipleAccountsInfo","_callee22","_context22","getMultipleAccountsInfoAndContext","_x35","_x36","_getStakeActivation","_callee23","_extractCommitmentFro8","_context23","_x37","_x38","_x39","_getProgramAccounts","_callee24","configOrCommitment","_extractCommitmentFro9","encoding","configWithoutEncoding","baseSchema","_context24","_excluded2","withContext","_x40","_x41","_getParsedProgramAccounts","_callee25","_extractCommitmentFro10","_context25","_x42","_x43","_confirmTransaction","_callee26","strategy","rawSignature","_config$abortSignal","_config","decodedSignature","_context26","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","_x44","_x45","signal","addEventListener","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","_callee27","_context27","getSignatureStatus","_confirmTransactionUsingBlockHeightExceedanceStrategy","_callee30","_ref8","_ref8$strategy","expiryPromise","_this$getTransactionC","cancellationPromise","outcome","_context30","checkBlockHeight","_callee28","_context28","_callee29","currentBlockHeight","_context29","BLOCKHEIGHT_EXCEEDED","getTransactionConfirmationPromise","getCancellationPromise","race","_x46","_confirmTransactionUsingDurableNonceStrategy","_callee33","_ref11$strategy","_this$getTransactionC2","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_context34","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_ref12","_callee31","_yield$_this4$getNonc","_context31","_context32","getNonceAndContext","_callee32","_context33","NONCE_INVALID","slotInWhichNonceDidAdvance","_x47","_confirmTransactionUsingLegacyTimeoutStrategy","_callee34","_ref14","timeoutId","_this$getTransactionC3","_context35","timeoutMs","TIMED_OUT","clearTimeout","_x48","_getClusterNodes","_callee35","_context36","_getVoteAccounts","_callee36","_context37","_x49","_getSlot","_callee37","_extractCommitmentFro11","_context38","_x50","_getSlotLeader","_callee38","_extractCommitmentFro12","_context39","_x51","_getSlotLeaders","_callee39","startSlot","limit","_context40","_x52","_x53","_getSignatureStatus","_callee40","_yield$this$getSignat","_context41","getSignatureStatuses","_x54","_x55","_getSignatureStatuses","_callee41","_context42","_x56","_x57","_getTransactionCount","_callee42","_extractCommitmentFro13","_context43","_x58","_getTotalSupply","_callee43","_context44","getSupply","excludeNonCirculatingAccountsList","_x59","_getInflationGovernor","_callee44","_context45","_x60","_getInflationReward","_callee45","_extractCommitmentFro14","_context46","_x61","_x62","_x63","_getInflationRate","_callee46","_context47","_getEpochInfo","_callee47","_extractCommitmentFro15","_context48","_x64","_getEpochSchedule","_callee48","epochSchedule","_context49","_getLeaderSchedule","_callee49","_context50","_getMinimumBalanceForRentExemption","_callee50","_context51","_x65","_x66","_getRecentBlockhashAndContext","_callee51","_context52","_x67","_getRecentPerformanceSamples","_callee52","_context53","_x68","_getFeeCalculatorForBlockhash","_callee53","_res$result","_context54","_x69","_x70","_getFeeForMessage","_callee54","wireMessage","_context55","_x71","_x72","_getRecentPrioritizationFees","_callee55","_config$lockedWritabl","_context56","lockedWritableAccounts","_x73","_getRecentBlockhash","_callee56","_context57","getRecentBlockhashAndContext","_x74","_getLatestBlockhash","_callee57","_context58","getLatestBlockhashAndContext","_x75","_getLatestBlockhashAndContext","_callee58","_extractCommitmentFro16","_context59","_x76","_isBlockhashValid","_callee59","_extractCommitmentFro17","_context60","_x77","_x78","_getVersion","_callee60","_context61","_getGenesisHash","_callee61","_context62","_getBlock","_callee62","_extractCommitmentFro18","_res","_res2","_context63","_buildArgsAtLeastConfirmed","transactionDetails","_x79","_x80","_getParsedBlock","_callee63","_extractCommitmentFro19","_res3","_res4","_context64","_x81","_x82","_getBlockProduction","_callee64","extra","_context65","_excluded3","_x83","_getTransaction","_callee65","_extractCommitmentFro20","_context66","_x84","_x85","_getParsedTransaction","_callee66","_extractCommitmentFro21","_context67","_x86","_x87","_getParsedTransactions","_callee67","_extractCommitmentFro22","_context68","_x88","_x89","_getTransactions","_callee68","_extractCommitmentFro23","_context69","_x90","_x91","_getConfirmedBlock","_callee69","block","_context70","_ref16","_ref17","_x92","_x93","_getBlocks","_callee70","endSlot","_context71","_x94","_x95","_x96","_getBlockSignatures","_callee71","_context72","_x97","_x98","_getConfirmedBlockSignatures","_callee72","_context73","_x99","_x100","_getConfirmedTransaction","_callee73","_context74","_x101","_x102","_getParsedConfirmedTransaction","_callee74","_context75","_x103","_x104","_getParsedConfirmedTransactions","_callee75","_context76","_x105","_x106","_getConfirmedSignaturesForAddress","_callee76","firstAvailableBlock","highestConfirmedRoot","_block","confirmedSignatureInfo","_context77","getFirstAvailableBlock","getConfirmedBlockSignatures","until","before","getConfirmedSignaturesForAddress2","_x107","_x108","_x109","_getConfirmedSignaturesForAddress2","_callee77","_context78","_x110","_x111","_x112","_getSignaturesForAddress","_callee78","_context79","_x113","_x114","_x115","_getAddressLookupTable","_callee79","_yield$this$getAccoun","accountInfo","_context80","_x116","_x117","_getNonceAndContext","_callee80","_yield$this$getAccoun2","_context81","fromAccountData","_x118","_x119","_getNonce","_callee81","_context82","_x120","_x121","_requestAirdrop","_callee82","_context83","_x122","_x123","_blockhashWithExpiryBlockHeight2","_callee83","disableCache","timeSinceFetch","expired","_context84","Date","now","_pollNewBlockhash","_x124","_pollNewBlockhash2","_callee84","startTime","cachedLatestBlockhash","cachedBlockhash","_context85","getLatestBlockhash","_getStakeMinimumDelegation","_callee85","_extractCommitmentFro24","_context86","_x125","_simulateTransaction","_callee86","transactionOrMessage","configOrSigners","includeAccounts","_wireTransaction","_encodedTransaction","_config2","_args87","_unsafeRes","_res5","originalTx","_signature","encodedTransaction","_logs","traceIndent","logTrace","_context87","_blockhashWithExpiryBlockHeight","nonProgramIds","sigVerify","_x126","_x127","_x128","_sendTransaction","_callee87","signersOrOptions","_wireTransaction2","_signature2","_context88","sendRawTransaction","_x129","_x130","_x131","_sendRawTransaction","_callee88","rawTransaction","_context89","sendEncodedTransaction","_x132","_x133","_sendEncodedTransaction","_callee89","_logs2","_context90","_x134","_x135","setInterval","_callee90","_context91","notify","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_ref19","_ref20","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","_unused2","clientSubscriptionId","_this$_subscriptionSt","_updateSubscriptions2","_callee94","activeWebSocketGeneration","isCurrentConnectionStillActive","_context95","close","connect","_ref21","_callee93","_context94","callbacks","serverSubscriptionId","_callee91","_serverSubscriptionId","_context92","_callee92","unsubscribeMethod","_context93","_x136","callbackArgs","notification","_create","_handleServerNotification","subscriptionConfig","existingSubscription","_callee95","_context96","_makeSubscription","_removeAccountChangeListener","_callee96","_context97","_unsubscribeClientSubscription","_x137","_create2","accountId","filters","_removeProgramAccountChangeListener","_callee97","_context98","_x138","_typeof","mentions","_removeOnLogsListener","_callee98","_context99","_x139","_create3","_create4","_removeSlotChangeListener","_callee99","_context100","_x140","_create5","_removeSlotUpdateListener","_callee100","_context101","_x141","_unsubscribeClientSubscription2","_callee101","subscriptionName","dispose","_context102","_x142","_x143","override","_options","_create6","_callback","_err","_callback2","_options$commitment","_excluded4","_removeSignatureListener","_callee102","_context103","_x144","_create7","_removeRootChangeListener","_callee103","_context104","_x145","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","_PublicKey$findProgra","recentSlot","_PublicKey$findProgra2","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","_params$instructionIn","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","_ecdsaSign","toCompactRawBytes","ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","VoteProgram","Voter","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","end","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_BaseProvider","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","SOLANA","_switchChain","WalletLoginError","unsupportedOperation","_setupProvider","injectedProvider","engine","solanaMiddleware","configMiddleware","injectedProviderProxy","provider","JRPCEngine","getProviderHandlers","getInjectedProviderProxy","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","methodNotSupported","_getSecretKey","_signTransaction","_signMessage","sigData","display","_signAllTransactions","_req$params","_req$params2","invalidParams","_signAndSendTransaction","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","_BaseInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","_BaseInjectedProvider2","getProviderEngineProxy","_requestAccounts2","_yield$injectedProvid","_getAccounts2","_yield$injectedProvid2","_getPrivateKey2","_getSecretKey2","_signTransaction2","txMessage","_yield$injectedProvid3","invalidRequest","addSignature","_signMessage2","_signAndSendTransaction2","_yield$injectedProvid4","conn","custom","_signAllTransactions2","_data$signatures","allTxns","unsignedTx","_yield$injectedProvid5","getSlopeHandlers","SolflareInjectedProvider","_BaseInjectedProvider3","solflareProviderHandlers","_ref10","getSolflareHandlers","getTorusHandlers","_requestAccounts3","_getAccounts3","_getPrivateKey3","_getSecretKey3","_signMessage3","_signTransaction3","_signAndSendTransaction3","_req$params3","_signAllTransactions3","_req$params4","_req$params5","TorusInjectedProvider","_BaseProvider2","_switchChain2","_addChain","chainName","displayName","rpcUrls","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","_setupProvider2","handleInjectedProviderUpdate","setupEngine","_lookupNetwork2","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","emit","_setupEngine","_handleInjectedProviderUpdate","configure","setupProvider","_getProviderHandlers","keyPairGenerator","keyPair","_requestAccounts5","_getAccounts4","_getPrivateKey4","_getSecretKey4","_signTransaction5","partialSign","_signMessage5","signedMsg","nacl","detached","_signAndSendTransaction5","_providerEngineProxy","_signAllTransactions5","_req$params6","txns","tx","SolanaPrivateKeyProvider","_BaseProvider3","_enable","getED25519Key","sk","_setupProvider3","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","_updateAccount","_switchChain3","getChainConfig","_lookupNetwork3","health","chainSwitchHandlers","addNewChainConfig","_addNewChainConfig","_req$params7","addChain","switchSolanaChain","_switchSolanaChain","switchChain","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","_updatePrivatekey","updateAccount","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","_requestAccounts4","_signAndSendTransaction4","_yield$this$provider$","_signTransaction4","signedTransaction","_signAllTransactions4","signedTransactions","_signMessage4","_request","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","charCodeAt","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","o","enumerable","__setModuleDefault","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","default","INITIAL_LENGTH","fieldPath","originalMessage","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","toArray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readUInt8","readUInt16LE","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","_structSchema$values$","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","_structSchema$values$2","fieldValue","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","parse","isError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","timeout","ws_opts","send","promise","_login","resp","_listMethods","_subscribe","_unsubscribe","ArrayBuffer","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","rnds8","rng","msCrypto","REGEX","byteToHex","toLowerCase","rnds","random","runtime","regeneratorRuntime","accidentalStrictMode","Function","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}